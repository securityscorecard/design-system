{"version":3,"file":"SegmentedToggle.stories-D2S2xZkh.js","sources":["../../../src/components/forms/SegmentedToggle/SegmentedToggle.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\n\nimport { SegmentedToggle, SegmentedToggleItem } from './SegmentedToggle';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { Stack } from '../../layout/Stack';\nimport { Text } from '../../Text';\n\n/**\n * ```jsx\n * import { SegmentedToggle, SegmentedToggleItem } from '@securityscorecard/design-system';\n * ```\n */\n\nconst meta = {\n  title: 'components/forms/SegmentedToggle',\n  component: SegmentedToggle,\n  argTypes: {\n    children: {\n      description:\n        'List of SegmentedToggleItem components that will be rendered as options',\n      table: {\n        type: {\n          summary: 'ReactNode',\n        },\n      },\n      // @ts-expect-error Storybook is strangly typed here\n      type: {\n        required: true,\n      },\n    },\n    group: {\n      description:\n        'The group is used to identify the SegmentedToggle within the form',\n    },\n    isDisabled: {\n      description: 'Indicates if the SegmentedToggle is disabled or not.',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    isExpanded: {\n      description:\n        'Should the SegmentedToggle be expanded to full available width.',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    onChange: {\n      description: 'Callback when the SegmentedToggle has changed.',\n      table: {\n        type: {\n          summary: '(event: ChangeEvent<HTMLInputElement>) => void',\n        },\n      },\n    },\n  },\n} satisfies Meta<typeof SegmentedToggle>;\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nconst children = ({ group }) => (\n  <>\n    <SegmentedToggleItem\n      itemId={`${group}-input1`}\n      label=\"One\"\n      value=\"1\"\n      defaultChecked\n    />\n    <SegmentedToggleItem itemId={`${group}-input2`} label=\"Two\" value=\"2\" />\n    <SegmentedToggleItem itemId={`${group}-input3`} label=\"Three\" value=\"3\" />\n  </>\n);\n\nexport const Playground: Story = {\n  args: {\n    group: 'playground',\n    children: children({ group: 'playground' }),\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\nexport const Default: Story = {\n  args: { children: children({ group: 'default' }), group: 'default' },\n};\n\nexport const Disabled: Story = {\n  args: {\n    children: children({ group: 'disabled' }),\n    group: 'disabled',\n    isDisabled: true,\n  },\n};\n\nexport const DarkMode: Story = {\n  args: { children: children({ group: 'darkMode' }), group: 'darkMode' },\n  parameters: {\n    themes: {\n      themeOverride: 'Dark',\n    },\n  },\n};\n\nexport const StateManagement: Story = {\n  args: {\n    children: children({ group: 'stateManagement' }),\n    group: 'stateManagement',\n  },\n  render: function Render(args) {\n    const [selected, setSelected] = useState('1');\n\n    return (\n      <Stack gap={SpaceSizes.lg} justify=\"flex-start\">\n        <SegmentedToggle\n          {...args}\n          onChange={(e) => {\n            setSelected(e.target.value);\n          }}\n        />\n        <Text>Selected value: {selected}</Text>\n      </Stack>\n    );\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n"],"names":["title","component","argTypes","SegmentedToggle","children","description","table","type","summary","required","group","isDisabled","isExpanded","onChange","Meta","args","parameters","screenshot","skip","Playground","Default","Disabled","DarkMode","themes","themeOverride","StateManagement","selected","setSelected","useState","Stack","SpaceSizes","lg","jsx","e","target","value"],"mappings":"00BAeEA,MAAAA,GAAyC,CACzCC,MAAAA,mCACAC,UAAUC,EACRC,SAAQ,CACNC,SAAAA,CAEAC,YACEC,0EACEC,MAAAA,CACFD,KAAA,CACDC,QAAA,WACD,CACAD,EAEAA,KAAA,CACDE,SAAA,EACDC,CACEL,EAEFK,MAAC,CACDC,YACEN,mEACAC,EACEC,WAAM,CACJC,YAAS,uDACXF,MAAA,CACFC,KAAA,CACDC,QAAA,SACDI,CACEP,CAEAC,EACEC,WAAM,CACJC,YACF,kEACFF,MAAA,CACDC,KAAA,CACDM,QAAU,SACRR,CACAC,CACEC,EACEC,SAAAA,CACFH,YAAA,iDACFC,MAAA,CACFC,KAAA,CACFC,QAAA,gDACUM,CACZ,CAEA,CAEMV,EAAAA,WAAAA,CAAAA,KAAAA,CAAAA,YAAAA,CAAAA,UAAAA,uGAAAA,CAAAA,CAAAA,CAAcM,EAWnBN,EAAAA,CAAA,CAAAM,MAAAA,CAAA,IAGCK,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CACEL,OAAmB,GAAAA,CAAA,UACX,MAAA,MAAaA,MAAO,IAAc,eAAA,EAAA,CAAA,EAE5CM,EAAAA,IAAAA,GAAY,OAAA,GAAAN,CAAA,UAAA,MAAA,MAAA,MAAA,GAAA,CAAA,EACVO,EAAAA,IAAAA,GAAY,OAAA,GAAAP,CAAA,UAAA,MAAA,QAAA,MAAA,GAAA,CAAA,CAAA,CAAEQ,CAAAA,EAEjBC,EAAA,CAEDJ,KAAaK,CACXL,MAAM,aAAEX,SAAUA,EAAS,CAAAM,MAAA,YAAA,CAAA,CAAEA,EAAiBM,WAAE,CAAEN,WAAO,CAAAQ,KAAA,EAAA,CAAU,CACrE,EAGQE,EAAA,MACI,CAAAhB,WAAW,CAAAM,MAAA,SAAA,CAAA,EAAAA,MAAA,SAAA,CAAEA,EACJW,EAAA,CACjBV,KAAAA,CACFP,SAAAA,EAAA,CAAAM,MAAA,UAAA,CAAA,EACDA,MAAA,WAEDC,WAAaW,EACXP,GAAiDO,EAAA,CAAEZ,KAAAA,CAAON,SAAAA,EAAA,CAAAM,MAAA,UAAA,CAAA,EAAAA,MAAA,UAAA,EAAWM,WAAC,CACtEA,OAAU,CACRO,cAAQ,MACNC,CACF,CACF,EAGWC,EAAyB,CACpCV,KAAM,CACJX,SAAUA,EAAS,CAAAM,MAAA,iBAAA,CAAA,EAAEA,MAAK,iBAAoB,EAC9CA,OAAO,SAAAK,EAAA,CACR,KAAA,CAAAW,EAAAC,CAAA,EAAAC,WAAA,GAAA,EAEC,cAEAC,EACG,CAAA,IAAMC,EAAeC,GAAA,QAAK,aACzB,SAAA,CAAAC,EAAA,IAAC7B,EAGGwB,CAAAA,GAAAA,EACA,SAAAM,GAAA,CAEEA,EAAAA,EAAAC,OAAyBC,KAAA,CAAA,WAIrCnB,EAAY,CAAA,SAAA,CAAA,mBAAAU,CAAAA,EAAA,CACVT,CAAAA,CAAAA,CAAyB,EAC3BD,WAAA,CACDC,WAAA,CAAAC,KAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}