{"version":3,"file":"Inline-BnvQG4P8.js","sources":["../../../src/components/layout/Inline/Inline.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { prop } from 'ramda';\nimport { isNotUndefined, isNumber } from 'ramda-adjunct';\nimport { Property } from 'csstype';\nimport cls from 'classnames';\n\nimport { SpaceSize } from '../../../theme/space.types';\nimport { getSpace } from '../../../utils';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { StretchEnum } from './Inline.enums';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\ntype Stretch = (typeof StretchEnum)[keyof typeof StretchEnum];\n\nexport interface InlineProps {\n  /**\n   * Whitespace between each child of the Inline\n   */\n  gap?: SpaceSize;\n  /**\n   * Horizontal alignment of elements inside Inline\n   *\n   */\n  justify?: Property.JustifyContent;\n  /**\n   * Vertical alignment of elements inside Inline\n   */\n  align?: Property.AlignItems;\n  /**\n   * Child or children to fill available space\n   */\n  stretch?: number | Stretch;\n  className?: string;\n}\n\nconst getStretchStyle = (\n  stretch: Required<InlineProps['stretch']>,\n): string | null => {\n  if (isNumber(stretch)) {\n    return `\n      > :nth-child(${stretch}) { flex: 1 1 0%; }\n    `;\n  }\n\n  switch (stretch) {\n    case 'start':\n      return `\n        > :first-child { flex: 1 1 0%; }\n      `;\n    case 'end':\n      return `\n        > :last-child { flex: 1 1 0%; }\n      `;\n    case 'all':\n      return `\n        > * { flex: 1 1 0%; }\n      `;\n    default:\n      return null;\n  }\n};\n\nconst Inline = styled.div.attrs<InlineProps>((props) => ({\n  className: cls(CLX_LAYOUT, props?.className),\n  gap: props.gap ?? SpaceSizes.none,\n}))<InlineProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: ${prop('justify')};\n  align-items: ${prop('align')};\n\n  ${({ stretch }) => isNotUndefined(stretch) && getStretchStyle(stretch)}\n\n  /* FIXME: Until we remove 'margin' property from other components we need to\n    increase specificity of those nesting , since it can be overridden by inner\n    elements with the same specificity. This can lead to inconsistent output\n    of visual tests if styled-components puts CSS in a different order into the Head. */\n  && > * {\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  && > * + * {\n    margin-left: ${({ gap, theme }) => getSpace(gap, { theme })};\n  }\n`;\n\nexport default Inline;\n"],"names":["cov_6rbq4dui7","s","getStretchStyle","stretch","f","isNumber","b","gap"],"mappings":"ogHAuCWA,EAAA,EAAAC,EAAA,CAAA,IA0BR,MAAAC,EAAAC,GAAAH,CAOY,GAPZA,EAAA,EAAAI,EAAAJ,CAAAA,IAAAA,IAAAC,EAOY,CAAA,IAAAI,EAAAF,CAAA,EAAAH,OAAAA,EAAA,EAAAM,EAAA,CAAA,EAAA,CAAA,IAAAN,EAAA,EAAAC,EAYK,CAAA,IAAA;AAAA,qBAAAE,CAAA;AAAA,MAIpB,OAJsBI,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAItB,CAAA,IAAAJ,EAAA,CAAA,IAAA,QAAAH,OAAAA,EAAAM,EAAAA,UAAAN,EAAA,EAAAC;;;;;;"}