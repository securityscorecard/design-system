{"version":3,"file":"toPairs-0OtjENg8.js","sources":["../../../node_modules/ramda/es/toPairs.js"],"sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\nimport _has from \"./internal/_has.js\";\n/**\n * Converts an object into an array of key, value arrays. Only the object's\n * own properties are used.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.4.0\n * @category Object\n * @sig {String: *} -> [[String,*]]\n * @param {Object} obj The object to extract from\n * @return {Array} An array of key, value arrays from the object's own properties.\n * @see R.fromPairs, R.keys, R.values\n * @example\n *\n *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n */\n\nvar toPairs =\n/*#__PURE__*/\n_curry1(function toPairs(obj) {\n  var pairs = [];\n\n  for (var prop in obj) {\n    if (_has(prop, obj)) {\n      pairs[pairs.length] = [prop, obj[prop]];\n    }\n  }\n\n  return pairs;\n});\n\nexport default toPairs;"],"names":["toPairs","_curry1","obj","pairs","prop","_has","toPairs$1"],"mappings":"+CAqBA,IAAIA,EAEJC,EAAQ,SAAiBC,EAAK,CAC5B,IAAIC,EAAQ,CAAA,EAEZ,QAASC,KAAQF,EACXG,EAAKD,EAAMF,CAAG,IAChBC,EAAMA,EAAM,MAAM,EAAI,CAACC,EAAMF,EAAIE,CAAI,CAAC,GAI1C,OAAOD,CACT,CAAC,EAED,MAAAG,EAAeN","x_google_ignoreList":[0]}