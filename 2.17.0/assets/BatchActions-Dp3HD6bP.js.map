{"version":3,"file":"BatchActions-Dp3HD6bP.js","sources":["../../../src/components/Datatable/BatchModule/BatchActions/BatchActions.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { map } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { SpaceSizes } from '../../../../theme';\nimport { SSCIconNames } from '../../../../theme/icons/icons.enums';\nimport { pxToRem } from '../../../../utils';\nimport { Inline } from '../../../layout';\nimport { BaseButton } from '../../../_internal/BaseButton';\nimport { ButtonVariants } from '../../../Button/Button.enums';\nimport { Icon } from '../../../Icon';\nimport {\n  AbsoluteLinkActionKind,\n  ActionWithSubactions,\n  RelativeLinkActionKind,\n} from '../../../../types/action.types';\nimport { DropdownMenu } from '../../../_internal/BaseDropdownMenu';\nimport { BatchActionsProps } from './BatchActions.types';\nimport { DatatableStore } from '../../Datatable.store';\nimport { BatchActionArgs } from '../../Datatable.types';\nimport { Tooltip } from '../../../Tooltip';\n\nconst BatchActionButton = styled(BaseButton)`\n  padding: ${pxToRem(9.5, 16)};\n  line-height: ${pxToRem(13)};\n  height: 2.25rem;\n`;\n\nconst BatchActions = ({ actions }: BatchActionsProps) => {\n  const { selectedIds, hasExclusiveSelection } = DatatableStore.useState(\n    (s) => ({\n      selectedIds: s.selectedIds,\n      hasExclusiveSelection: s.hasExclusiveSelection,\n    }),\n  );\n\n  const handleResetSelection = () => {\n    DatatableStore.update((s) => {\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleOnActionClick = useCallback(\n    (onClick) => {\n      onClick(selectedIds, hasExclusiveSelection, handleResetSelection);\n    },\n    [selectedIds, hasExclusiveSelection],\n  );\n\n  return (\n    <Inline>\n      {actions.map((action) => {\n        let element;\n        if (\n          isNotUndefined(\n            (action as ActionWithSubactions<BatchActionArgs>).subActions,\n          )\n        ) {\n          const subActions = map(\n            (subAction) => ({\n              ...subAction,\n              onClick: () => handleOnActionClick(subAction.onClick),\n            }),\n            (action as ActionWithSubactions<BatchActionArgs>).subActions,\n          );\n\n          element = (\n            <DropdownMenu\n              key={action.name}\n              actions={subActions}\n              paneWidth={140}\n              placement=\"bottom-end\"\n            >\n              <BatchActionButton\n                name={action.name}\n                variant={ButtonVariants.text}\n                onClick={action.onClick}\n              >\n                <Inline align=\"center\" gap={SpaceSizes.xs}>\n                  <span>{action.label}</span>\n                  <Icon margin={{ left: 0.25 }} name={SSCIconNames.angleDown} />\n                </Inline>\n              </BatchActionButton>\n            </DropdownMenu>\n          );\n        } else {\n          element = (\n            <BatchActionButton\n              key={action.name}\n              href={(action as AbsoluteLinkActionKind<BatchActionArgs>).href}\n              name={action.name}\n              to={(action as RelativeLinkActionKind<BatchActionArgs>).to}\n              variant={ButtonVariants.text}\n              onClick={() => handleOnActionClick(action.onClick)}\n            >\n              {action.label}\n            </BatchActionButton>\n          );\n        }\n\n        return (\n          <Tooltip key={action.name} popup={action.tooltip}>\n            {element}\n          </Tooltip>\n        );\n      })}\n    </Inline>\n  );\n};\n\nexport default BatchActions;\n"],"names":["cov_22n1i5vjah","path","hash","global","gcv","coverageData","coverage","actualCoverage","BatchActionButton","s","styled","BaseButton","withConfig","displayName","componentId","pxToRem","BatchActions","actions","f","DatatableStore","hasExclusiveSelection","handleResetSelection","update","shouldResetSelectedRows","handleOnActionClick","useCallback","onClick","selectedIds","jsx","Inline","children","map","action","element","isNotUndefined","subActions","b"],"mappings":"wrBA8BQ,SAAAA,GAAA,CAAA,IAAAC,EAAA,mHAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,mHAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,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"}