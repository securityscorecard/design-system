{"version":3,"file":"UserAvatar-BWEUi_rS.js","sources":["../../../node_modules/ramda/es/toUpper.js","../../../src/components/UserAvatar/UserAvatar.enums.ts","../../../src/components/UserAvatar/UserAvatar.tsx"],"sourcesContent":["import invoker from \"./invoker.js\";\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\n\nvar toUpper =\n/*#__PURE__*/\ninvoker(0, 'toUpperCase');\nexport default toUpper;","export const UserAvatarSizes = {\n  md: 'md',\n  sm: 'sm',\n} as const;\n","import styled, { css } from 'styled-components';\nimport { any, pipe, take, toUpper, trim } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport PropTypes from 'prop-types';\nimport cls from 'classnames';\n\nimport { ButtonColors, ButtonVariants } from '../Button/Button.enums';\nimport type { UserAvatarProps, UserAvatarRootProps } from './UserAvatar.types';\nimport { getRadii, getToken, pxToRem } from '../../utils/helpers';\nimport { UserAvatarSizes } from './UserAvatar.enums';\nimport { BaseButton } from '../_internal/BaseButton';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { Text } from '../Text';\n\nconst smallAvatar = css`\n  width: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n  height: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n`;\nconst mediumAvatar = css`\n  width: ${pipe(getToken('size-action-size'), pxToRem)};\n  height: ${pipe(getToken('size-action-size'), pxToRem)};\n`;\n\nconst avatar = css`\n  background-color: var(--sscds-color-primary-9);\n`;\n\nconst invertedAvatar = css`\n  background-color: var(--sscds-color-neutral-0);\n  &:hover {\n    background-color: var(--sscds-color-primary-3);\n  }\n  &:active {\n    background-color: var(--sscds-color-primary-6);\n  }\n`;\n\nconst avatarSizes = {\n  [UserAvatarSizes.sm]: smallAvatar,\n  [UserAvatarSizes.md]: mediumAvatar,\n};\nconst userAvatarStyle = css<UserAvatarRootProps>`\n  border-radius: ${getRadii('round')};\n  ${({ $size }) => avatarSizes[$size]};\n  ${({ $isInverted }) => ($isInverted ? invertedAvatar : avatar)};\n`;\n\nconst RootUserAvatar = styled.div<UserAvatarRootProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  ${userAvatarStyle};\n`;\nconst normalizeString = pipe(trim, take(2), toUpper);\n\nconst UserAvatar = ({\n  label,\n  size = UserAvatarSizes.md,\n  className,\n  href,\n  to,\n  onClick,\n  isInverted = false,\n  ...props\n}: UserAvatarProps) =>\n  any(isNotUndefined, [href, to, onClick]) ? (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      aria-label=\"User avatar\"\n      as={BaseButton}\n      className={cls(CLX_COMPONENT, className)}\n      color={ButtonColors.primary}\n      href={href}\n      paddingSize={SpaceSizes.none}\n      to={to}\n      variant={ButtonVariants.solid}\n      onClick={onClick}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  ) : (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      className={cls(CLX_COMPONENT, className)}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  );\n\nUserAvatar.propTypes = {\n  label: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(Object.values(UserAvatarSizes)),\n  className: PropTypes.string,\n  isInverted: PropTypes.bool,\n  href: PropTypes.string,\n  to: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  onClick: PropTypes.func,\n};\n\nexport default UserAvatar;\n"],"names":["toUpper","invoker","toUpper$1","cov_87wexwtpa","actualCoverage","UserAvatarSizes","md","sm","cov_o01t45iu7","path","hash","global","gcv","coverageData","coverage","smallAvatar","s","css","pipe","getToken","pxToRem","avatar","invertedAvatar","onClick","mediumAvatar","UserAvatar","userAvatarStyle","getRadii","$size","f","avatarSizes","string","RootUserAvatar","styled","div","withConfig","displayName","componentId","normalizeString","trim","take"],"mappings":"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","x_google_ignoreList":[0]}