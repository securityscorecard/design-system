{"version":3,"file":"Datatable-6C9wNWo4.js","sources":["../../../node_modules/ramda/es/fromPairs.js","../../../src/components/Datatable/hooks/useDataFetch.ts","../../../src/components/Datatable/hooks/useTableRowSelect.ts","../../../src/components/Datatable/ControlsModule/index.ts","../../../src/components/Datatable/Table/Table.types.ts","../../../src/components/Datatable/Table/index.ts","../../../src/components/Datatable/Datatable.tsx"],"sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\n\nvar fromPairs =\n/*#__PURE__*/\n_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default fromPairs;","import { useEffect } from 'react';\nimport { pick, propEq, when } from 'ramda';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnDataFetchFn } from '../Datatable.types';\n\nexport const useDataFetch = <D>(onDataFetch: OnDataFetchFn<D>): void => {\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      pick([\n        'pageIndex',\n        'pageSize',\n        'sortBy',\n        'filters',\n        'query',\n        'isCanceled',\n      ]),\n      when(propEq('isCanceled', false), onDataFetch),\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onDataFetch]);\n};\n","import { useEffect } from 'react';\nimport { IdType } from 'react-table';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnSelectFn } from '../Table/Table.types';\n\nexport const useTableRowSelect = <D>(\n  onSelect: OnSelectFn<D>,\n  defaultSelectedRowIds: IdType<D>[],\n): void => {\n  useEffect(\n    () =>\n      DatatableStore.update((s) => {\n        s.selectedIds = defaultSelectedRowIds;\n      }),\n    [defaultSelectedRowIds],\n  );\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => ({\n        ids: s.selectedIds,\n        hasExclusiveSelection: s.hasExclusiveSelection,\n      }),\n      ({ ids, hasExclusiveSelection }) => {\n        onSelect(ids, hasExclusiveSelection);\n      },\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onSelect]);\n};\n","export { default as ControlsModule } from './ControlsModule';\nexport * from './ControlsModule.types';\n","import PropTypes, { ReactComponentLike } from 'prop-types';\nimport { Column, IdType, SortingRule } from 'react-table';\n\nimport { RendererColumnOptions } from '../../_internal/BaseTable/renderers/renderers.types';\nimport {\n  PrimaryKey,\n  RowAction,\n  RowActionKindsPropType,\n} from '../../_internal/BaseTable/BaseTable.types';\n\nexport type OnSelectFn<D> = (\n  ids: IdType<D>[],\n  hasExclusiveSelection: boolean,\n) => void;\n\nexport interface TableConfig<D> {\n  hasSelection: boolean;\n  isDataLoading: boolean;\n  isMultiSelect: boolean;\n  onSelect: OnSelectFn<D>;\n  isCancelDisabled: boolean;\n  onCancelLoading: () => void;\n  hasOnlyPerPageSelection: boolean;\n  defaultSelectedRowIds: IdType<D>[];\n  hasPagination: boolean;\n  hasServerSidePagination: boolean;\n  defaultPageSize: number;\n  defaultPageIndex: number;\n  hasSorting: boolean;\n  hasServerSideSorting: boolean;\n  defaultSortBy: SortingRule<D>[];\n  pageButtonsCount?: number;\n  defaultColumnOrder: IdType<D>[];\n  defaultHiddenColumns: IdType<D>[];\n  rowActions: RowAction<D>[];\n  NoMatchingDataComponent: ReactComponentLike;\n  NoDataComponent: ReactComponentLike;\n}\n\nexport const TableConfigPropType = {\n  onSelect: PropTypes.func,\n  NoDataComponent: PropTypes.elementType,\n  NoMatchingDataComponent: PropTypes.elementType,\n  hasSelection: PropTypes.bool,\n  isMultiSelect: PropTypes.bool,\n  hasOnlyPerPageSelection: PropTypes.bool,\n  defaultSelectedRowIds: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  ),\n  hasPagination: PropTypes.bool,\n  hasServerSidePagination: PropTypes.bool,\n  defaultPageSize: PropTypes.number,\n  hasSorting: PropTypes.bool,\n  hasServerSideSorting: PropTypes.bool,\n  defaultPageIndex: PropTypes.number,\n  defaultSortBy: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      desc: PropTypes.bool,\n    }),\n  ),\n  defaultHiddenColumns: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  ),\n  defaultColumnOrder: PropTypes.arrayOf(\n    PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  ),\n  rowActions: PropTypes.arrayOf(RowActionKindsPropType),\n};\n\nexport interface TableProps<D extends Record<string, unknown>>\n  extends Omit<\n    TableConfig<D>,\n    'onSelect' | 'defaultSelectedRowIds' | 'hasOnlyPerPageSelection'\n  > {\n  data: D[];\n  columns: Column<D>[];\n  dataSize: number;\n  isDataLoading: boolean;\n  onCancelLoading: () => void;\n  dataPrimaryKey?: PrimaryKey<D>;\n  defaultSelectedRows?: Record<IdType<D>, boolean>;\n  defaultPageIndex: number;\n}\n\nexport interface CustomColumnOptions<D> extends RendererColumnOptions<D> {\n  sticky?: string;\n  headerTooltip?: JSX.Element;\n  Header: string;\n}\n","export { default as Table } from './Table';\nexport * from './Table.types';\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useDeepCompareMemo } from 'use-deep-compare';\nimport { assoc, assocPath, fromPairs, map, pipe } from 'ramda';\nimport { isNotUndefined, noop } from 'ramda-adjunct';\nimport { IdType } from 'react-table';\n\nimport { getColor, getRadii } from '../../utils';\nimport { Padbox } from '../layout';\nimport { FieldPropTypes, FilterStatePropType } from '../Filters/Filters.types';\nimport { useDataFetch } from './hooks/useDataFetch';\nimport { useTableRowSelect } from './hooks/useTableRowSelect';\nimport { ActionPropType } from './types/Action.types';\nimport { mergeControlsConfig, mergeTableConfig } from './defaultConfigs';\nimport { ControlsModule } from './ControlsModule';\nimport { BatchModule } from './BatchModule';\nimport { Table } from './Table';\nimport { TableConfig, TableConfigPropType } from './Table/Table.types';\nimport { DatatableProps } from './Datatable.types';\nimport { DatatableStore, datatableInitialState } from './Datatable.store';\nimport { useColumnsControls } from './hooks/useColumnsControls';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useLocalStorageState } from '../../hooks/useLocalStorageState';\n\nconst StyledDatatable = styled(Padbox)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  border: 1px solid ${getColor('neutral.300')};\n  border-radius: ${getRadii('double')};\n  background: ${getColor('neutral.0')};\n`;\n\nconst mapSelectedRows = <D,>(defaultSelectedRowIds: IdType<D>[]) =>\n  pipe(\n    map((id: IdType<D>): [IdType<D>, boolean] => [id, true]),\n    fromPairs,\n  )(defaultSelectedRowIds);\n\nfunction Datatable<D extends Record<string, unknown>>({\n  id,\n  data,\n  dataSize,\n  columns,\n  dataPrimaryKey,\n  onCancelLoading,\n  isDataLoading = false,\n  onDataFetch = noop,\n  batchActions = [],\n  isControlsEnabled = true,\n  isBatchModuleEnabled = true,\n  controlsConfig = {},\n  tableConfig = {},\n  resetSelectionFn,\n}: DatatableProps<D>): React.ReactElement {\n  const [persistedState, setPersistedState] = useLocalStorageState<{\n    hiddenColumns: string[];\n    columnOrder: string[];\n  }>(`datatable_${id}`);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => {\n        return { hiddenColumns: s.hiddenColumns, columnOrder: s.columnOrder };\n      },\n      (partial) => {\n        setPersistedState(partial);\n      },\n    );\n    // eslint-disable-next-line\n    return unsubscribe;\n  }, []);\n\n  // Set canceled signal to prevent data fetch when unmounting\n  useEffect(\n    () => () =>\n      DatatableStore.replace(assoc('isCanceled', true, datatableInitialState)),\n    [],\n  );\n\n  const isCancelEnabled = isNotUndefined(onCancelLoading);\n\n  const {\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    ...restControlsConfig\n  } = useDeepCompareMemo(\n    () =>\n      mergeControlsConfig(\n        assocPath(\n          ['filteringConfig', 'isCancelEnabled'],\n          isCancelEnabled,\n        )(controlsConfig),\n      ),\n    [controlsConfig],\n  );\n  const {\n    onSelect,\n    defaultSelectedRowIds,\n    hasOnlyPerPageSelection,\n    ...restTableConfig\n  } = useDeepCompareMemo<TableConfig<D>>(\n    () => mergeTableConfig(tableConfig),\n    [tableConfig],\n  );\n\n  useDataFetch<D>(onDataFetch);\n  useTableRowSelect<D>(onSelect, defaultSelectedRowIds);\n  useColumnsControls(\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    columns,\n    persistedState?.columnOrder || restTableConfig.defaultColumnOrder,\n    persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns,\n  );\n\n  const handleCancelLoading = isCancelEnabled\n    ? () => {\n        DatatableStore.update((s) => {\n          s.isCanceled = true;\n          s.filters = s.filters.map((filter) => ({\n            ...filter,\n\n            // mark loading filters as canceled\n            isCanceled: filter.isLoading,\n            isLoading: false,\n          }));\n\n          onCancelLoading();\n        });\n      }\n    : noop;\n\n  resetSelectionFn?.(() => {\n    DatatableStore.update((s) => {\n      s.shouldResetSelectedRows = true;\n    });\n  });\n\n  return (\n    <StyledDatatable className={CLX_COMPONENT}>\n      {isControlsEnabled && (\n        <ControlsModule<D>\n          {...restControlsConfig}\n          isDataLoading={isDataLoading}\n          onCancelLoading={handleCancelLoading}\n        />\n      )}\n      {isBatchModuleEnabled && (\n        <BatchModule\n          actions={batchActions}\n          columns={{\n            isButtonDisplayed:\n              !isControlsEnabled && restControlsConfig.hasColumnsControls,\n            defaultIsColumnsControlsOpen:\n              restControlsConfig.defaultIsColumnsControlsOpen,\n            defaultIsColumnsControlsApplied:\n              restControlsConfig.defaultIsColumnsControlsApplied,\n          }}\n          dataSize={dataSize}\n          hasOnlyPerPageSelection={hasOnlyPerPageSelection}\n          hasSelection={restTableConfig.hasSelection}\n        />\n      )}\n      <Table<D>\n        columns={columns}\n        data={data}\n        dataPrimaryKey={dataPrimaryKey}\n        dataSize={dataSize}\n        defaultSelectedRows={mapSelectedRows(defaultSelectedRowIds)}\n        {...restTableConfig}\n        defaultColumnOrder={\n          persistedState?.columnOrder || restTableConfig.defaultColumnOrder\n        }\n        defaultHiddenColumns={\n          persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns\n        }\n        isCancelDisabled={!isCancelEnabled}\n        isDataLoading={isDataLoading}\n        onCancelLoading={handleCancelLoading}\n      />\n    </StyledDatatable>\n  );\n}\n\nDatatable.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  dataSize: PropTypes.number.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  isDataLoading: PropTypes.bool,\n  batchActions: PropTypes.arrayOf(ActionPropType),\n  dataPrimaryKey: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  isControlsEnabled: PropTypes.bool,\n  controlsConfig: PropTypes.exact({\n    onControlToggle: PropTypes.func,\n    onCancelLoading: PropTypes.func,\n    onColumnVisibilityChange: PropTypes.func,\n    hasSearch: PropTypes.bool,\n    searchConfig: PropTypes.exact({\n      placeholder: PropTypes.string,\n      onSearch: PropTypes.func,\n      onClear: PropTypes.func,\n      defaultValue: PropTypes.string,\n      isValidatedOnSubmit: PropTypes.bool,\n      pattern: PropTypes.string,\n      errorMessage: PropTypes.string,\n    }),\n    hasFiltering: PropTypes.bool,\n    filteringConfig: PropTypes.exact({\n      onChange: PropTypes.func,\n      onApply: PropTypes.func,\n      onClose: PropTypes.func,\n      state: PropTypes.arrayOf(FilterStatePropType),\n      fields: PropTypes.arrayOf(FieldPropTypes),\n      isCancelEnabled: PropTypes.bool,\n    }),\n    defaultIsFilteringOpen: PropTypes.bool,\n    defaultIsFilteringApplied: PropTypes.bool,\n    hasColumnsControls: PropTypes.bool,\n    onColumnOrderChange: PropTypes.func,\n    defaultIsColumnsControlsOpen: PropTypes.bool,\n    defaultIsColumnsControlsApplied: PropTypes.bool,\n  }),\n  tableConfig: PropTypes.exact(TableConfigPropType),\n  pageButtonsCount: PropTypes.number,\n  resetSelectionFn: PropTypes.func,\n  onDataFetch: PropTypes.func,\n  onCancelLoading: PropTypes.func,\n};\n\nDatatable.displayName = 'Datatable';\nexport default Datatable;\n"],"names":["fromPairs","_curry1","pairs","result","idx","fromPairs$1","cov_214budz8mx","s","useDataFetch","onDataFetch","f","useEffect","unsubscribe","DatatableStore","subscribe","update","useTableRowSelect","defaultSelectedRowIds","hasExclusiveSelection","ids","selectedIds","onSelect","cov_11ej2pj1jc","cov_1kkugieqb1","actualCoverage","TableConfigPropType","PropTypes","func","NoDataComponent","elementType","NoMatchingDataComponent","hasSelection","bool","isMultiSelect","hasOnlyPerPageSelection","arrayOf","oneOfType","string","number","hasPagination","hasServerSidePagination","defaultPageSize","hasSorting","hasServerSideSorting","defaultPageIndex","defaultSortBy","shape","id","isRequired","desc","defaultHiddenColumns","defaultColumnOrder","rowActions","RowActionKindsPropType","cov_2qbsdw7i9x","cov_1uotiyjt1e","path","hash","global","gcv","coverageData","coverage","StyledDatatable","styled","Padbox","withConfig","displayName","componentId","getColor","getRadii","onCancelLoading","Datatable","data","dataSize","columns","isDataLoading","b","noop","batchActions","isControlsEnabled","isBatchModuleEnabled","hiddenColumns","columnOrder","resetSelectionFn","persistedState","setPersistedState","useLocalStorageState","onColumnOrderChange","onColumnVisibilityChange","restTableConfig","replace","assoc","datatableInitialState","isCancelEnabled","isNotUndefined","useDeepCompareMemo","mergeControlsConfig","assocPath","controlsConfig","isCanceled","filter","isLoading","shouldResetSelectedRows"],"mappings":"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MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,YAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,g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AAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,sFAAA,EAAA,MAAA,CAAA,KAAA,OAAA,WAAA,UAAA,iBAAA,kBAAA,OAAA,YAAA,gBAAA,cAAA,oBAAA,cAAA,sBAAA,2BAAA,qBAAA,WAAA,wBAAA,0BAAA,kBAAA,eAAA,oBAAA,qBAAA,iBAAA,IAAA,SAAA,YAAA,mBAAA,oBAAA,qBAAA,+BAAA,kCAAA,YAAA,aAAA,OAAA,OAAA,SAAA,QAAA,EAAA,SAAA,m1BAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAApC,EAAAqC,EAAAL,CAAA,EAAAD,OAAAA,EAAAA,UAAA/B,CAAAA,OAAAA,CAAAA,EAAAA,CAAA+B,CAAAA,EAAA,EAQsC,MAAAO,IAAAP,EAAA,EAAAhD,EAAAwD,CAAAA,IAAAA,EAAAC,EAAA,EAAAC,WAAAC,CAAAA,YAAAC,6BAAAA,YAAAC,aAAAA,CAAAA,EAAAA,CAAAA,yEAAAA,kBAAAA,eAAAA,GAAAA,EAAAA,EAAAC,aAAAA,EAAAA,YAAAD,EAAA,WAAA,CAAA,GAAAb,EAAA,EAAAhD,EAAA,CAAA,IAqBpC+D,MAAAA,GAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,QAAAA,EAAAA,EAAAA,CAAAA,GAMkB,SAAAC,EAAA,CAAAxB,GAAAA,EACHyB,KAAAA,EAEEC,SAAAA,EACjBC,QAAAA,EAKA/D,eAAAA,EACE2D,gBAAAA,EACEK,cAAAA,GAAApB,EAAA,EAAAqB,EAAA,CAAA,EAAA,CAAA,IAAA,IAAAnE,YAAAA,GAAA8C,EAAA,EAAAqB,EAAA,CAAA,EAAA,CAAA,IAAAC,GAEFC,aAAAA,GAAAvB,EAAAqB,EAAAA,EAEIG,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,GAAAA,kBAAAA,GAAAxB,IAAAqB,EAAA,CAAA,EAAA,CAAA,IAAA,IAAOI,qBAAAA,GAAAzB,IAAAqB,EAAA,CAAA,EAAA,CAAA,IAAA,IAAmBK,eAAAA,GAAAA,EAAAA,EAAAA,EAA8BC,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,GAAAA,YAAAA,GAAAA,EAAAA,EAAAA,EAAYC,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,GAAAA,iBAAAA,CAG3C,EAAA5B,CAAAA,EAAA7C,EAAAA,OAI7B,KAAA0E,CAAAA,EAAAC,CAAA,GAAA9B,EAAA,EAAAhD,OAAA+E,GAAA,aAAAvC,CAAA,EAAA,GAAAQ,IAAAhD,EAAA,CAAA,IAYII,EAAAA,UAAA4C,IAAAA,CACJgC,GADIhC,EAAA7C,EAAAA,EAAA6C,CAAAA,IAAAA,EAAAhD,EAAAA,EACJgF,CAAAA,IAAAA,EACAC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,QADAD,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACAC,CAAAA,IAAAA,MAAAA,CAYF,MAAA5E,GAAA2C,EAAA,EAAAhD,EAAA,CAAA,IAAAM,EAAAC,UAAAP,IAAAgD,EAAA7C,EAAAA,EAAA6C,CAAAA,IAAAA,EAAA,EAAAhD,EACEc,CAAAA,IAAAA,CAAAA,cAAAA,EAAAA,cAAAA,YAAAA,EAAAA,WAAAA,GAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAGGoE,EAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,GAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAgBL7E,CAAA,EAAA,CAAA,CAAA,EAAA2C,EAAA,EAAAhD,EAI+CI,EAAAA,IAAAA,EAAAA,UAAA4C,KAAAA,EAAA7C,EAAAA,EAAA6C,CAAAA,IAAAA,IAAAhD,EAAA,EAAA,IAAA,KAAAgD,IAAA7C,EAAA,CAAA,IAAA6C,EAAA,EAAAhD,EAAAM,EAAAA,IAAAA,EAAA6E,QAAAC,GAAAC,aAAAA,GAAAA,CAAA,CAQvB,IAAA,CAAA,CAAA,EAAA,MAAAC,GAAAtC,EAAA,EAAAhD,EAAA,EAAA,IAAAuF,EAAAxB,CAAA,GAKxBa,CAAAA,oBAAAA,EACEtE,yBAAAA,EACEN,GAAAA,CAA4B,GAAAgD,EAAA,EAAAhD,EAAA,EAAA,IAAAwF,EAAA,KAAAxC,EAAA,EAAA7C,EAAA6C,CAAAA,IAAAA,IAAAhD,EAAAyF,EAAAA,IAAAA,GAAAC,GAAAJ,CAAAA,kBAAAA,iBAAAA,EAAAA,CAAA,EAAAK,CAAA,CAAAA,GAAAA,CAAAA,CAAA,IAgDlC7E,CAAAA,SAAAA,EAEAkD,sBAAAA,EAAsBrC,wBAAAA,EACyBc,GAAAA,CAClBA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,KAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAMKxC,GAAAC,CAAA,EAAA8C,EAAA,EAAAhD,EACHoB,EAAAA,IAAAA,GAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,QACAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,YAAAA,EAAAA,eAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,sBAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,KAAAA,GAAAA,YAAAA,EAAAA,iBAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,sBAQMK,EAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,IAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAEPK,EAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EACzB9B,EAAAA,IAAAA,EAAA4F,WAAA5C,GAAAA,EAAAhD,EAAAA,EACuByB,EAAAA,IAAAA,EAAAA,QAAAA,EAAAA,QAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,CAAAA,GAAAA,EACSmE,WAAAC,EAAAC,UAGZ1E,UACyB,EAAA,EAAA,EAAA4B,IAAAhD,EAAA,EAAA,IAG7C+D,EAAA,CAAA,CACiCtC,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,IAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAIMA,GAAAA,MAAAA,EAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IACGA,EAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,IAAAA,EAAAA,EAAAA,IAC5CzB,EAAA+F,wBAAA,EAAA,CAC+C,CAAA,GAAA/C,EAAA,EAAAhD,EAAA,EAAA,IAGzBoB,EAAAA,KAAAA,GAAAA,CAAAA,UAAAA,EAAAA,SAIzB4C,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,MAAAA,GAAAA,CAAAA,GAAAA,EAAAA,cAAAA,EAAAA,gBAAAA,CAAAA,CAAAA;;;;;;;;;;","x_google_ignoreList":[0]}