{"version":3,"file":"SortableList-DzzwybZp.js","sources":["../../src/components/SortableList/SortableItem.tsx","../../src/components/SortableList/SortableList.tsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\n\nimport { getColor, getRadii, getSpace, pxToRem } from '../../utils';\nimport { Text } from '../Text';\nimport { TextSizes } from '../Text/Text.enums';\nimport { SortableItemProps } from './SortableList.types';\nimport { SpaceSizes } from '../../theme';\nimport { Inline, Padbox } from '../layout';\n\nconst StyledSortableItem = styled(Padbox)`\n  background: ${getColor('neutral.0')};\n  border: 1px solid ${getColor('neutral.300')};\n  border-radius: ${getRadii('default')};\n\n  list-style-type: none;\n`;\n\nconst InnerHandle = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: ${getRadii('half')};\n  color: ${getColor('neutral.500')};\n  width: ${pxToRem(24)};\n`;\n\nconst Handle = styled(Padbox)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: grab;\n  margin: calc(${getSpace(SpaceSizes.sm)} * -1) !important;\n\n  &:hover ${InnerHandle} {\n    background-color: ${getColor('neutral.300')};\n    color: ${getColor('neutral.900')};\n  }\n`;\n\nconst SortableItem = ({ label, id, renderItem }: SortableItemProps) => {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    zIndex: isDragging ? 1 : 0,\n  };\n\n  return (\n    <StyledSortableItem\n      ref={setNodeRef}\n      as=\"li\"\n      paddingSize={SpaceSizes.sm}\n      style={style}\n    >\n      <Inline align=\"center\" gap={SpaceSizes.sm} stretch={2}>\n        <Handle paddingSize={SpaceSizes.sm} {...attributes} {...listeners}>\n          <InnerHandle>\n            <svg\n              fill=\"none\"\n              viewBox=\"0 0 24 22\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                clipRule=\"evenodd\"\n                d=\"M 9 7 C 9 6.448 9.448 6 10 6 L 14 6 C 14.552 6 15 6.448 15 7 C 15 7.552 14.552 8 14 8 L 10 8 C 9.448 8 9 7.552 9 7 Z M 9 11 C 9 10.448 9.448 10 10 10 L 14 10 C 14.552 10 15 10.448 15 11 C 15 11.552 14.552 12 14 12 L 10 12 C 9.448 12 9 11.552 9 11 Z M 10 14 C 9.448 14 9 14.448 9 15 C 9 15.552 9.448 16 10 16 L 14 16 C 14.552 16 15 15.552 15 15 C 15 14.448 14.552 14 14 14 L 10 14 Z\"\n                fill=\"currentColor\"\n                fillRule=\"evenodd\"\n              />\n            </svg>\n          </InnerHandle>\n        </Handle>\n        {renderItem !== undefined ? (\n          renderItem({ label, id })\n        ) : (\n          <Text size={TextSizes.md}>{label}</Text>\n        )}\n      </Inline>\n    </StyledSortableItem>\n  );\n};\n\nSortableItem.propTypes = {\n  label: PropTypes.string,\n  id: PropTypes.string,\n  renderItem: PropTypes.func,\n};\n\nexport default SortableItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DndContext,\n  KeyboardSensor,\n  PointerSensor,\n  TouchSensor,\n  closestCenter,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { restrictToVerticalAxis } from '@dnd-kit/modifiers';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport styled from 'styled-components';\n\nimport { Stack } from '../layout';\nimport { SpaceSizes } from '../../theme';\nimport SortableItem from './SortableItem';\nimport { SortableListProps } from './SortableList.types';\nimport { pxToRem } from '../../utils';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst SortableListRoot = styled.div<{\n  $maxHeight: SortableListProps['maxHeight'];\n}>`\n  overflow: auto;\n  max-height: ${({ $maxHeight }) =>\n    isNotUndefined($maxHeight) && pxToRem($maxHeight)};\n`;\n\nconst SortableList = ({\n  items,\n  labels,\n  renderItem,\n  maxHeight,\n  onOrderChange,\n  onDragStart,\n  onDragOver,\n  onDragEnd,\n  onDragCancel,\n}: SortableListProps) => {\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(TouchSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    }),\n  );\n\n  const handleDragEnd = (event) => {\n    if (isNotUndefined(onDragEnd)) {\n      onDragEnd(event);\n    }\n\n    const { active, over } = event;\n\n    if (isNotUndefined(onOrderChange) && active.id !== over.id) {\n      const oldIndex = items.indexOf(active.id);\n      const newIndex = items.indexOf(over.id);\n      onOrderChange(arrayMove(items, oldIndex, newIndex));\n    }\n  };\n\n  return (\n    <SortableListRoot $maxHeight={maxHeight} className={CLX_COMPONENT}>\n      <DndContext\n        collisionDetection={closestCenter}\n        modifiers={[restrictToVerticalAxis]}\n        sensors={sensors}\n        onDragCancel={onDragCancel}\n        onDragEnd={handleDragEnd}\n        onDragOver={onDragOver}\n        onDragStart={onDragStart}\n      >\n        <SortableContext items={items} strategy={verticalListSortingStrategy}>\n          <Stack\n            as=\"ul\"\n            gap={SpaceSizes.xs}\n            style={{\n              paddingInlineStart: 0, // reset ul user agent styles, :facepalm: core-ui\n            }}\n          >\n            {items.map((item) => (\n              <SortableItem\n                key={item}\n                id={item}\n                label={labels?.[item] || item}\n                renderItem={renderItem}\n              />\n            ))}\n          </Stack>\n        </SortableContext>\n      </DndContext>\n    </SortableListRoot>\n  );\n};\n\nSortableList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  labels: PropTypes.shape({}),\n  maxHeight: PropTypes.number,\n  renderItem: PropTypes.func,\n  onOrderChange: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragOver: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onDragCancel: PropTypes.func,\n};\n\nexport default SortableList;\n"],"names":["cov_1hurytma31","path","hash","global","gcv","coverageData","coverage","actualCoverage","StyledSortableItem","s","styled","Padbox","withConfig","displayName","componentId","InnerHandle","div","getColor","getRadii","renderItem","pxToRem","setNodeRef","id","toString","transition","SortableItem","label","attributes","transform","string","func","CSS","Transform","cov_16mycfi7vn","SortableListRoot","isNotUndefined","$maxHeight","SortableList","active","over","maxHeight","onOrderChange","onDragStart","onDragEnd","onDragCancel","f","sensors","useSensors","useSensor","PointerSensor","map","item","KeyboardSensor","sortableKeyboardCoordinates","PropTypes","labels"],"mappings":"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AAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,0FAAA,EAAA,MAAA,CAAA,YAAA,aAAA,iBAAA,gBAAA,cAAA,gBAAA,YAAA,aAAA,kBAAA,YAAA,8BAAA,8BAAA,yBAAA,iBAAA,SAAA,QAAA,aAAA,eAAA,UAAA,gBAAA,mBAAA,MAAA,aAAA,cAAA,cAAA,aAAA,eAAA,QAAA,SAAA,aAAA,YAAA,gBAAA,cAAA,aAAA,YAAA,eAAA,UAAA,mBAAA,gBAAA,QAAA,SAAA,OAAA,KAAA,WAAA,UAAA,WAAA,KAAA,qBAAA,MAAA,OAAA,YAAA,UAAA,SAAA,aAAA,QAAA,SAAA,MAAA,EAAA,SAAA,y2DAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAgC,OAAAA,EAAA,UAAA1B,CAAAA,OAAAA,GAAAA,CAAA,CAAA0B,IAAN,MAAMC,GAAAD,EAAAxB,EAAAA,EAAAC,CAAAA,IAAAA,EAAAM,IAAAJ,WAAAC,CAAAA,6CAAAC,YAAA,aAAA,CAAA,EAAA,CAAA,4BAAA,GAAA,gBASU,KAC3BqB,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,UAAAA,EAAAA,mBAA2Bf,EAAAgB,CAAA,GAAA,GAAAH,EAAA,EAAAxB,OAI/B,MAAM4B,EAAAA,CAAA,CAAEC,MAAAA,EAAQC,OAAAA,EAAAA,WAAAA,EAEhBC,UAAAA,EACEC,cAAAA,EACAC,YAAAA,EACAD,WAAAA,EACFE,UAAAA,EACFC,aAAAA,CAGG,IAAA,CAAAX,EAAAY,EAAAA,OAcc,MACeC,GAAAb,EAAA,EAAAxB,EAAA,CAAA,IAAAsC,EAAAC,EAAAC,CAAA,IAGfC,CAAKC,EAaxBH,EAAAI,EAAA,CAEAf,iBAAyBgB,CAChBC,CAAAA,CACPC,GAAAA,EAAAA,EAAAA,EAEApC,CAAAA,IAAAA,QAAsBW,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,SACGA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,MACFA,CAAAA,gCAGCA,KAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,GAGXO,GAHWP,EAAAA,EAAAA,EAGXO,CAAAA,IAAAA,EAAAA,EAAAA,UAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,IAAAA,CAAAA,EAAAA,EAAAA"}