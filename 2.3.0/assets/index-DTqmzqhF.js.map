{"version":3,"file":"index-DTqmzqhF.js","sources":["../../src/components/_internal/BaseTabs/index.ts","../../src/components/forms/SegmentedToggle/SegmentedToggle.tsx","../../src/components/forms/SegmentedToggle/SegmentedToggleItem.tsx","../../src/components/forms/SegmentedToggle/index.ts"],"sourcesContent":["export * as BaseTabsEnums from './BaseTabs.enums';\nexport * from './BaseTabLabel.types';\n","import PropTypes from 'prop-types';\nimport React, { forwardRef } from 'react';\nimport { noop } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport type {\n  SegmentedToggleItemProps,\n  SegmentedToggleProps,\n} from './SegmentedToggle.types';\nimport { BaseTabsWrapper } from '../../_internal/BaseTabs/BaseTabsWrapper';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { Inline } from '../../layout';\nimport { BaseTabsEnums } from '../../_internal/BaseTabs';\nimport { CLX_COMPONENT } from '../../../theme/constants';\n\nconst SegmentedToggle = forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<SegmentedToggleProps>\n>(\n  (\n    {\n      group,\n      isDisabled = false,\n      children,\n      onChange = noop,\n      className,\n      ...props\n    },\n    ref,\n  ) => (\n    <BaseTabsWrapper\n      ref={ref}\n      $variant={BaseTabsEnums.BaseTabVariants.segmented}\n      className={cls(CLX_COMPONENT, className)}\n      paddingSize={SpaceSizes.xs}\n    >\n      <Inline gap={SpaceSizes.sm} role=\"radiogroup\">\n        {React.Children.map(children, (segmentedToggleItem) => {\n          if (!React.isValidElement(segmentedToggleItem)) {\n            return null;\n          }\n\n          return React.cloneElement(\n            segmentedToggleItem as React.ReactElement<SegmentedToggleItemProps>,\n            {\n              key: segmentedToggleItem.props.value,\n              name: group,\n              disabled: isDisabled,\n              onChange,\n              ...props,\n            },\n          );\n        })}\n      </Inline>\n    </BaseTabsWrapper>\n  ),\n);\n\nSegmentedToggle.propTypes = {\n  group: PropTypes.string.isRequired,\n  isDisabled: PropTypes.bool,\n  className: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport default SegmentedToggle;\n","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { SegmentedToggleItemProps } from './SegmentedToggle.types';\nimport { ColorTypes } from '../../../theme/colors.enums';\nimport BaseTabLabel, {\n  segmentedTabSelected,\n} from '../../_internal/BaseTabs/BaseTabLabel';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { PaddingTypes } from '../../layout/Padbox/Padbox.enums';\nimport { getFormStyle } from '../../../utils/helpers';\nimport { BaseTabsEnums } from '../../_internal/BaseTabs';\n\nconst Radio = styled.input`\n  display: none;\n\n  :checked + ${BaseTabLabel} {\n    ${segmentedTabSelected}\n  }\n\n  :checked:disabled + ${BaseTabLabel} {\n    background: ${getFormStyle('disabledBgColor')};\n    border-color: ${getFormStyle('disabledBorderColor')};\n  }\n\n  :disabled + ${BaseTabLabel} {\n    color: ${getFormStyle('disabledColor')};\n    &:hover {\n      color: ${getFormStyle('disabledColor')};\n    }\n  }\n`;\n\nconst SegmentedToggleItemWrapper = styled.span`\n  display: flex;\n`;\n\nconst SegmentedToggleItem = forwardRef<\n  HTMLInputElement,\n  SegmentedToggleItemProps\n>(({ label, value, group, itemId, ...props }, ref) => {\n  const paddingSize = SpaceSizes.sm;\n\n  return (\n    <SegmentedToggleItemWrapper>\n      <Radio\n        ref={ref}\n        id={itemId}\n        name={group}\n        type=\"radio\"\n        value={value}\n        {...props}\n      />\n      <BaseTabLabel\n        $color={ColorTypes.primary500}\n        $variant={BaseTabsEnums.BaseTabVariants.segmented}\n        as=\"label\"\n        htmlFor={itemId}\n        paddingSize={paddingSize}\n        paddingType={PaddingTypes.squish}\n        style={{ marginBottom: 0 }}\n      >\n        {label}\n      </BaseTabLabel>\n    </SegmentedToggleItemWrapper>\n  );\n});\n\nSegmentedToggleItem.propTypes = {\n  label: PropTypes.string.isRequired,\n  itemId: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  group: PropTypes.string,\n};\n\nexport default SegmentedToggleItem;\n","export { default as SegmentedToggle } from './SegmentedToggle';\nexport { default as SegmentedToggleItem } from './SegmentedToggleItem';\nexport * from './SegmentedToggle.types';\n"],"names":["cov_2gbffjmdj8","actualCoverage","onChange","noop","className","React","key","group","isDisabled","props","ref","SegmentedToggle","bool","string","func","cov_2dy7xo6txs","path","hash","global","gcv","coverageData","coverage","SegmentedToggleItemWrapper","BaseTabLabel","SegmentedToggleItem","itemId","getFormStyle","styled","span","withConfig","displayName","componentId","isRequired","cov_2om9s3ryvk"],"mappings":"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"}