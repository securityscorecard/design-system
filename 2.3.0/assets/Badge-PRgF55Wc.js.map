{"version":3,"file":"Badge-PRgF55Wc.js","sources":["../../node_modules/ramda/es/lte.js","../../node_modules/ramda-adjunct/es/defaultWhen.js","../../src/components/Badge/Badge.enums.ts","../../src/components/Badge/Badge.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\n\nvar lte =\n/*#__PURE__*/\n_curry2(function lte(a, b) {\n  return a <= b;\n});\n\nexport default lte;","import { curry } from 'ramda';\n\n/**\n * Returns the second argument if predicate function returns `true`,\n * otherwise the third argument is returned.\n *\n * @func defaultWhen\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Logic\n * @sig  (a -> Boolean) -> b -> a -> a | b\n * @param {!function} predicate The predicate function\n * @param {*} defaultVal The default value\n * @param {*} val `val` will be returned instead of `defaultVal` if predicate returns false\n * @return {*} The `val` if predicate returns `false`, otherwise the default value\n * @see {@link http://ramdajs.com/docs/#defaultTo|R.defaultTo}\n * @example\n *\n * RA.defaultWhen(RA.isNull, 1, null); // => 1\n * RA.defaultWhen(RA.isNull, 1, 2); // => 2\n */\nvar defaultWhen = curry(function (predicate, defaultVal, val) {\n  return predicate(val) ? defaultVal : val;\n});\nexport default defaultWhen;","// eslint-disable-next-line import/prefer-default-export\n\nexport const BadgeVariants = {\n  neutral: 'neutral',\n  success: 'success',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n} as const;\n","import PropTypes from 'prop-types';\nimport { defaultWhen, isNotUndefined } from 'ramda-adjunct';\nimport { lte, pipe } from 'ramda';\nimport styled, { css } from 'styled-components';\n\nimport type { BadgeElementProps, BadgeProps } from './Badge.types';\nimport { BadgeVariants } from './Badge.enums';\nimport { getColor, getRadii, pxToRem } from '../../utils';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { SpaceSizes } from '../../theme';\nimport { Padbox } from '../layout';\n\nconst BadgeNeutral = css`\n  background-color: ${getColor('neutral.300')};\n  color: ${getColor('neutral.700')};\n`;\nconst BadgeSuccess = css`\n  background-color: ${getColor('success.500')};\n  color: ${getColor('neutral.0')};\n`;\nconst BadgeInfo = css`\n  background-color: ${getColor('info.500')};\n  color: ${getColor('neutral.0')};\n`;\nconst BadgeWarn = css`\n  background-color: ${getColor('warning.500')};\n  color: ${getColor('neutral.900')};\n`;\nconst BadgeError = css`\n  background-color: ${getColor('error.500')};\n  color: ${getColor('neutral.0')};\n`;\n\nconst badgeVariants = {\n  [BadgeVariants.neutral]: BadgeNeutral,\n  [BadgeVariants.success]: BadgeSuccess,\n  [BadgeVariants.info]: BadgeInfo,\n  [BadgeVariants.warn]: BadgeWarn,\n  [BadgeVariants.error]: BadgeError,\n};\n\nconst BadgeElement = styled(Padbox)<BadgeElementProps>`\n  display: inline-block;\n  min-width: 1.5rem;\n  padding-block: 0.125rem;\n  border-radius: ${getRadii('round')};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n  text-align: center;\n  ${({ $variant }) => badgeVariants[$variant]};\n  line-height: ${pxToRem(20)};\n`;\n\nconst normalizeCount = pipe(defaultWhen(lte(100), '99+'));\n\nconst Badge = ({ count, variant = BadgeVariants.error }: BadgeProps) =>\n  isNotUndefined(count) ? (\n    <BadgeElement\n      $variant={variant}\n      className={CLX_COMPONENT}\n      paddingSize={SpaceSizes.sm}\n    >\n      <span>{normalizeCount(count)}</span>\n    </BadgeElement>\n  ) : null;\n\nBadge.propTypes = {\n  count: PropTypes.number,\n};\n\nexport default Badge;\n"],"names":["lte","_curry2","a","b","defaultWhen","curry","predicate","defaultVal","val","BadgeVariants","cov_25gx3h0tot","s","info","warn","error","propTypes","BadgeInfo","css","getColor","neutral","success","BadgeSuccess","styled","BadgeWarn","cov_2oqieljdwm","$variant","normalizeCount","count","number","Badge"],"mappings":"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","x_google_ignoreList":[0,1]}