{"version":3,"file":"BatchActions-C7qYu_yw.js","sources":["../../src/components/Datatable/types/Action.types.ts","../../src/components/Datatable/BatchModule/BatchActions/BatchActions.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport {\n  AbsoluteLinkActionKindPropType,\n  ActionKinds,\n  ActionWithSubactions,\n  ActionWithSubactionsPropType,\n  HandlerActionKindPropType,\n  RelativeLinkActionKindPropType,\n} from '../../../types/action.types';\n\nexport type Action<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> =\n  | ActionKinds<OnClickArgs, OnClickReturnType>\n  | ActionWithSubactions<OnClickArgs, OnClickReturnType>;\n\nexport const ActionPropType = PropTypes.oneOfType([\n  HandlerActionKindPropType,\n  RelativeLinkActionKindPropType,\n  AbsoluteLinkActionKindPropType,\n  ActionWithSubactionsPropType,\n]);\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { map, pipe } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { SpaceSizes } from '../../../../theme';\nimport { SSCIconNames } from '../../../../theme/icons/icons.enums';\nimport { getFormStyle, pxToRem } from '../../../../utils';\nimport { Inline } from '../../../layout';\nimport { BaseButton } from '../../../_internal/BaseButton';\nimport { ButtonVariants } from '../../../Button/Button.enums';\nimport { Icon } from '../../../Icon';\nimport { ActionPropType } from '../../types/Action.types';\nimport {\n  AbsoluteLinkActionKind,\n  ActionWithSubactions,\n  RelativeLinkActionKind,\n} from '../../../../types/action.types';\nimport { DropdownMenu } from '../../../_internal/BaseDropdownMenu';\nimport { BatchActionsProps } from './BatchActions.types';\nimport { DatatableStore } from '../../Datatable.store';\nimport { BatchActionArgs } from '../../Datatable.types';\nimport { Tooltip } from '../../../Tooltip';\n\nconst BatchActionButton = styled(BaseButton)`\n  padding: ${pxToRem(9.5, 16)};\n  line-height: ${pxToRem(13)};\n  height: ${pipe(getFormStyle('fieldHeight'), pxToRem)};\n`;\n\nconst BatchActions = ({ actions }: BatchActionsProps) => {\n  const { selectedIds, hasExclusiveSelection } = DatatableStore.useState(\n    (s) => ({\n      selectedIds: s.selectedIds,\n      hasExclusiveSelection: s.hasExclusiveSelection,\n    }),\n  );\n\n  const handleResetSelection = () => {\n    DatatableStore.update((s) => {\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleOnActionClick = useCallback(\n    (onClick) => {\n      onClick(selectedIds, hasExclusiveSelection, handleResetSelection);\n    },\n    [selectedIds, hasExclusiveSelection],\n  );\n\n  return (\n    <Inline>\n      {actions.map((action) => {\n        let element;\n        if (\n          isNotUndefined(\n            (action as ActionWithSubactions<BatchActionArgs>).subActions,\n          )\n        ) {\n          const subActions = map(\n            (subAction) => ({\n              ...subAction,\n              onClick: () => handleOnActionClick(subAction.onClick),\n            }),\n            (action as ActionWithSubactions<BatchActionArgs>).subActions,\n          );\n\n          element = (\n            <DropdownMenu\n              key={action.name}\n              actions={subActions}\n              paneWidth={140}\n              placement=\"bottom-end\"\n            >\n              <BatchActionButton\n                name={action.name}\n                variant={ButtonVariants.text}\n                onClick={action.onClick}\n              >\n                <Inline align=\"center\" gap={SpaceSizes.xs}>\n                  <span>{action.label}</span>\n                  <Icon margin={{ left: 0.25 }} name={SSCIconNames.angleDown} />\n                </Inline>\n              </BatchActionButton>\n            </DropdownMenu>\n          );\n        } else {\n          element = (\n            <BatchActionButton\n              key={action.name}\n              href={(action as AbsoluteLinkActionKind<BatchActionArgs>).href}\n              name={action.name}\n              to={(action as RelativeLinkActionKind<BatchActionArgs>).to}\n              variant={ButtonVariants.text}\n              onClick={() => handleOnActionClick(action.onClick)}\n            >\n              {action.label}\n            </BatchActionButton>\n          );\n        }\n\n        return (\n          <Tooltip key={action.name} popup={action.tooltip}>\n            {element}\n          </Tooltip>\n        );\n      })}\n    </Inline>\n  );\n};\n\nBatchActions.propTypes = {\n  actions: PropTypes.arrayOf(ActionPropType).isRequired,\n};\n\nexport default BatchActions;\n"],"names":["ActionPropType","PropTypes","oneOfType","HandlerActionKindPropType","RelativeLinkActionKindPropType","AbsoluteLinkActionKindPropType","ActionWithSubactionsPropType","selectedIds","hasExclusiveSelection","useState","s","BatchActions","cov_1w8g1oknb","f","DatatableStore","handleOnActionClick","handleResetSelection","element","isNotUndefined","subActions","useCallback","onClick","jsx","Inline","children","actions","map","action","propTypes","b"],"mappings":"gvBAkBaA,MAAAA,EAAiBC,EAAUC,UAAU,CAChDC,EACAC,EACAC,EACAC,CAA4B,CAC7B,41LCSO,MAAEC,GAAAA,EAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,WAAAA,CAAAA,YAAAA,kCAAAA,YAAaC,aAAAA,CAAAA,EAAAA,CAAAA,WAAAA,gBAAAA,WAAAA,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAyCC,EAAAA,EAAAA,IAE7CC,EAAEH,aAAAA,EAAAA,CAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAKnB,MAAAI,aAAmC,IAAA,CAAAC,EAAA,EAAAC,EACjCC,CAAAA,IAAAA,KAAAA,CAAAA,YAAAA,yBAA6B,GAAAF,IAAAF,EAAAI,CAAAA,IAAAA,EAAAL,SAC3BC,IAA4BE,EAAAC,EAAAA,EAAAD,CAAAA,IAAAA,EAAA,EAAAF,QAC7BH,YAAAG,EAAAH,YACHC,sBAAAE,EAAAF,qBAEMO,EAEMR,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAKZ,MAAAS,EACGA,IAAA,CAAAJ,EAAA,EAAAC,EAAAD,CAAAA,IAAAA,EAAA,EAAAF,EAEOO,CAAAA,IAAAA,EAAAA,OAAAA,GAAAA,CAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAEFC,EAAAA,wBACoDC,EAG9CA,CAAAA,CACY,EAGhBJ,GAAAH,EAAA,EAAAF,EAEFU,CAAAA,IAAAA,EAAA,YAGEC,GAAA,CAAAT,EAAA,EAAAC,EAAAD,CAAAA,IAAAA,EAAA,EAAAF,EAYOW,CAAAA,IAAAA,EAAAd,EAAAC,GAAmB,CACpB,EAAc,CAAAD,EAAQC,CAAA,CAAK,GAAAI,OAAAA,EAAA,EAAAF,EAAA,CAAA,IAOjCY,EAAAA,IAAAC,EAWJC,CAAAA,SAAAC,EAAAC,IAAAC,GAAA,CAAAf,EAAAC,EAAAA,EAEA,CAAA,IAAA,MAMJ,eAEJK,EAEaU,EAAYT,UACdlB,EACX,CAAAW,EAAA,EAAAiB,EAEelB,CAAAA,EAAAA,CAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,QAAAA;;;;;;;;;;;;;;;;;;"}