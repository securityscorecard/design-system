{"version":3,"file":"mergeRefs-B_qfXDGV.js","sources":["../../node_modules/ramda/es/forEach.js","../../src/utils/mergeRefs.ts"],"sourcesContent":["import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\n\nvar forEach =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\n\nexport default forEach;","import { MutableRefObject, Ref } from 'react';\nimport { forEach } from 'ramda';\n\nconst isMutableRefObject = <T>(thing: unknown): thing is MutableRefObject<T> =>\n  (thing as MutableRefObject<T>) !== undefined;\n\nexport const mergeRefs = <T>(\n  ...refs: Ref<T>[]\n): null | Ref<T> | ((inst: T) => void) => {\n  const filteredRefs = refs.filter(Boolean);\n  if (!filteredRefs.length) return null;\n  if (filteredRefs.length === 1) return filteredRefs[0];\n\n  return (inst: T) => {\n    forEach((ref: Ref<T>) => {\n      if (typeof ref === 'function') {\n        ref(inst);\n      } else if (isMutableRefObject<T>(ref)) {\n        // eslint-disable-next-line no-param-reassign\n        ref.current = inst;\n      }\n    })(filteredRefs);\n  };\n};\n"],"names":["forEach","_curry2","_checkForMethod","fn","list","len","idx","isMutableRefObject","filteredRefs","filter","cov_11incrtcrx","f","s","thing","length","mergeRefs","refs","Boolean","b","ref","inst"],"mappings":"+CAqCA,IAAIA,EAEJC,EAEAC,EAAgB,UAAW,SAAiBC,EAAIC,EAAM,CAIpD,QAHIC,EAAMD,EAAK,OACXE,EAAM,EAEHA,EAAMD,GACXF,EAAGC,EAAKE,CAAG,CAAC,EACZA,GAAO,EAGT,OAAOF,CACT,CAAC,CAAC,uyGChDIG,IAAAA,EAAAA,CAAAA,IAMJ,MAAMC,EAAoBC,IAC1BC,EAAAC,EAAAA,OAAAD,EAAA,EAAAE,EAAAC,CAAAA,IAAAA,IAAkBC,QAAAA,EAAAA,EAAAA,eACUC,IAAGC,IAEX,CAAAN,EAAA,EAAAC,EAClBX,CAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAyBgB,CAAAA,IAAAA,EAAAP,OAAAQ,OAAA,GACnB,GADmBP,EAAA,EAAAE,OACnBJ,SAA2BE,EAAA,EAAAQ,cAAAR,QAAAA,IAAAQ,EAAAR,CAAAA,EAAAA,CAAAA,IAAAA,IAAAE,EAAA,CAAA,IAAAF,KAC7BS,OAD6BT,IAAAE,EAC7BO,CAAAA,IAAAA,EAAQL,SAAA,GAAAJ,EAAA,EAAAQ,EAAA,CAAA,EAAA,CAAA,IAAAR,EAAA,EAAAE,OAAAJ,EAAA,CAAA,IAAAE,IAAAQ,EAAA,CAAA,EAAA,CAAA,IAAAR,EAAA,EAAAE,OAGRO,GAAcC,CAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAChBpB,EAAAmB,GAAA,CAAAT,IAAAC,EAAA,CAAA,IAAAD,EAAAE,EAAAA,QACa,OAAAO,GAAA,YAAAT,EAAA,EAAAQ,EAAAR,CAAAA,EAAAA,CAAAA,IAAAA,IAAAE,EAAA,EAAA,IACjBO,EAAAC,CAAA,IACFV,IAAAQ,EAAAR,CAAAA,EAAAA,CAAAA,IAAAA,IAAAE,EAAA,EAAA,IAAAL,EAAAY,CAAA,GAAAT,EAAA,EAAAQ,EAAAR,CAAAA,EAAAA,CAAAA,IAAAA,IAAAE,EAAA,EAAA","x_google_ignoreList":[0]}