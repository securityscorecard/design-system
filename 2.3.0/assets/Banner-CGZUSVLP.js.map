{"version":3,"file":"Banner-CGZUSVLP.js","sources":["../../src/components/Banner/Banner.enums.ts","../../src/components/Banner/Banner.tsx"],"sourcesContent":["export const BannerVariants = {\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  success: 'success',\n} as const;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { isNonEmptyArray, noop } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport { BannerProps } from './Banner.types';\nimport {\n  AbsoluteLinkActionKind,\n  ActionKindsPropType,\n  RelativeLinkActionKind,\n} from '../../types/action.types';\nimport * as CustomPropTypes from '../../types/customPropTypes';\nimport { BannerVariants } from './Banner.enums';\nimport { Button } from '../Button';\nimport { ButtonColors, ButtonVariants } from '../Button/Button.enums';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { PaddingTypes } from '../layout/Padbox/Padbox.enums';\nimport { StretchEnum } from '../layout/Inline/Inline.enums';\nimport { Text as BaseText } from '../Text';\nimport { TextSizes } from '../Text/Text.enums';\nimport { SpaceSizes } from '../../theme';\nimport { getColor, getRadii } from '../../utils';\nimport { CloseButton } from '../CloseButton';\nimport { BaseToastBanner } from '../_internal/BaseToastBanner';\nimport { baseToastBannerColorVariants } from '../_internal/BaseToastBanner/BaseToastBanner';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useContainerQuery } from '../../hooks/useContainerQuery';\n\nconst iconPxSizesVariants = {\n  [BannerVariants.info]: 16,\n  [BannerVariants.warn]: 16,\n  [BannerVariants.error]: 16,\n  [BannerVariants.success]: 16,\n};\n\nconst bannerBorderColor = {\n  [BannerVariants.info]: 'info.400',\n  [BannerVariants.warn]: 'warning.400',\n  [BannerVariants.error]: 'error.400',\n  [BannerVariants.success]: 'success.400',\n};\n\nconst StyledPadbox = styled(Padbox)<{ $variant?: BannerProps['variant'] }>`\n  background-color: ${({ $variant }) =>\n    getColor(baseToastBannerColorVariants[$variant])};\n  border-radius: ${getRadii('double')};\n  border: 1px solid ${({ $variant }) => getColor(bannerBorderColor[$variant])};\n`;\n\nconst StyledButton = styled(Button)`\n  height: inherit;\n  padding: 0;\n  line-height: var(--sscds-font-lineheight-body-md);\n`;\n\nconst ContentWrapper = styled(Padbox)`\n  padding-left: 0rem;\n`;\n\nconst Text = styled(BaseText)<{ $variant?: BannerProps['variant'] }>`\n  max-width: 115ch;\n  color: ${getColor('neutral.1000')};\n`;\n\nconst CHANGE_LAYOUT_BREAKPOINT = 'change-banner-layout';\n\nconst BannerContent = ({ variant, children, actions }: BannerProps) => (\n  <>\n    <Text $variant={variant} as=\"div\" size={TextSizes.md}>\n      {children}\n    </Text>\n    {isNonEmptyArray(actions) && (\n      <Inline gap={SpaceSizes.mdPlus}>\n        {actions.map((action) => (\n          <StyledButton\n            key={action.name}\n            $variant={variant}\n            color={ButtonColors.secondary}\n            href={(action as AbsoluteLinkActionKind<[React.MouseEvent]>).href}\n            name={action.name}\n            to={(action as RelativeLinkActionKind<[React.MouseEvent]>).to}\n            variant={ButtonVariants.text}\n            onClick={action.onClick}\n          >\n            {action.label}\n          </StyledButton>\n        ))}\n      </Inline>\n    )}\n  </>\n);\n\nconst Banner = ({\n  children,\n  variant = BannerVariants.info,\n  actions,\n  isDismissable = true,\n  onClose = noop,\n  __hasPagination = false,\n  __onPrev,\n  __onNext,\n  __isFirst,\n  __isLast,\n  __current,\n  __total,\n  className,\n  changeLayoutBreakpoint = 960,\n  ...props\n}: BannerProps) => {\n  const changeLayoutQuery = useMemo(\n    () => ({\n      [CHANGE_LAYOUT_BREAKPOINT]: { minWidth: changeLayoutBreakpoint },\n    }),\n    [changeLayoutBreakpoint],\n  );\n  const [query, containerRef] = useContainerQuery(changeLayoutQuery);\n  const isInline = query[CHANGE_LAYOUT_BREAKPOINT];\n  return (\n    <StyledPadbox\n      ref={containerRef}\n      $variant={variant}\n      className={cls(CLX_COMPONENT, className)}\n      paddingSize={SpaceSizes.sm}\n      {...props}\n    >\n      <BaseToastBanner\n        iconAlign=\"flex-start\"\n        iconPxSizesVariants={iconPxSizesVariants}\n        iconSize={16}\n        paddingSize={SpaceSizes.md}\n        paddingType={PaddingTypes.square}\n        stretch={StretchEnum.end}\n        variant={variant}\n      >\n        <ContentWrapper paddingSize={SpaceSizes.md}>\n          <Inline align=\"flex-start\" gap={SpaceSizes.xl} stretch={1}>\n            {isInline ? (\n              <Inline\n                align=\"flex-start\"\n                gap={SpaceSizes.md}\n                justify=\"space-between\"\n              >\n                <BannerContent actions={actions} variant={variant}>\n                  {children}\n                </BannerContent>\n              </Inline>\n            ) : (\n              <Stack align=\"center\" gap={SpaceSizes.md}>\n                <BannerContent actions={actions} variant={variant}>\n                  {children}\n                </BannerContent>\n              </Stack>\n            )}\n            {__hasPagination && (\n              <Inline gap={SpaceSizes.sm}>\n                <StyledButton\n                  aria-label=\"Show previous banner\"\n                  isDisabled={__isFirst}\n                  variant=\"text\"\n                  onClick={__onPrev}\n                >\n                  <Icon name={SSCIconNames.angleLeft} />\n                </StyledButton>\n                <Text as=\"div\" size={TextSizes.md}>\n                  {__current} of {__total}\n                </Text>\n                <StyledButton\n                  aria-label=\"Show next banner\"\n                  isDisabled={__isLast}\n                  variant=\"text\"\n                  onClick={__onNext}\n                >\n                  <Icon name={SSCIconNames.angleRight} />\n                </StyledButton>\n              </Inline>\n            )}\n            {isDismissable && (\n              <CloseButton\n                aria-label=\"Close banner\"\n                marginCompensation={SpaceSizes.md}\n                onClose={onClose}\n              />\n            )}\n          </Inline>\n        </ContentWrapper>\n      </BaseToastBanner>\n    </StyledPadbox>\n  );\n};\n\nBanner.propTypes = {\n  variant: PropTypes.oneOf(Object.values(BannerVariants)),\n  actions: CustomPropTypes.tuple(ActionKindsPropType, ActionKindsPropType),\n  isDismissable: PropTypes.bool,\n  className: PropTypes.string,\n  onClose: PropTypes.func,\n};\nBanner.displayName = 'Banner';\n\nexport default Banner;\n"],"names":["cov_15hpyezock","actualCoverage","BannerVariants","info","warn","error","success","baseToastBannerColorVariants","bannerBorderColor","cov_1hsumywhu0","s","componentId","$variant","getColor","StyledButton","styled","Button","withConfig","displayName","f","getRadii","BannerContent","Padbox","children","Text","BaseText","actions","isDismissable","noop","__onPrev","__onNext","__isFirst","__isLast","__current","className","color","ButtonColors","secondary","props","name","action","changeLayoutQuery","to","text","changeLayoutBreakpoint","__total","query","isInline","b","onClose","Banner","variant","func"],"mappings":"s2DAAO,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,EAAME,MAAAA,GAAAA,EAAAA,EAAAA,OAAiB,CAC5BC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,QAAS,SACX,GCoBSC,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,+EAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,+EAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,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"}