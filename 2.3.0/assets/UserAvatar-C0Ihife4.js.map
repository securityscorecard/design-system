{"version":3,"file":"UserAvatar-C0Ihife4.js","sources":["../../node_modules/ramda/es/toUpper.js","../../src/components/UserAvatar/UserAvatar.enums.ts","../../src/components/UserAvatar/UserAvatar.tsx"],"sourcesContent":["import invoker from \"./invoker.js\";\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\n\nvar toUpper =\n/*#__PURE__*/\ninvoker(0, 'toUpperCase');\nexport default toUpper;","export const UserAvatarSizes = {\n  md: 'md',\n  sm: 'sm',\n} as const;\n","import styled, { css } from 'styled-components';\nimport { any, pipe, take, toUpper, trim } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport PropTypes from 'prop-types';\nimport cls from 'classnames';\n\nimport { ButtonColors, ButtonVariants } from '../Button/Button.enums';\nimport type { UserAvatarProps, UserAvatarRootProps } from './UserAvatar.types';\nimport { getRadii, getToken, pxToRem } from '../../utils/helpers';\nimport { UserAvatarSizes } from './UserAvatar.enums';\nimport { BaseButton } from '../_internal/BaseButton';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { Text } from '../Text';\n\nconst smallAvatar = css`\n  width: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n  height: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n`;\nconst mediumAvatar = css`\n  width: ${pipe(getToken('size-action-size'), pxToRem)};\n  height: ${pipe(getToken('size-action-size'), pxToRem)};\n`;\n\nconst avatar = css`\n  background-color: var(--sscds-color-primary-9);\n`;\n\nconst invertedAvatar = css`\n  background-color: var(--sscds-color-neutral-0);\n  &:hover {\n    background-color: var(--sscds-color-primary-3);\n  }\n  &:active {\n    background-color: var(--sscds-color-primary-6);\n  }\n`;\n\nconst avatarSizes = {\n  [UserAvatarSizes.sm]: smallAvatar,\n  [UserAvatarSizes.md]: mediumAvatar,\n};\nconst userAvatarStyle = css<UserAvatarRootProps>`\n  border-radius: ${getRadii('round')};\n  ${({ $size }) => avatarSizes[$size]};\n  ${({ $isInverted }) => ($isInverted ? invertedAvatar : avatar)};\n`;\n\nconst RootUserAvatar = styled.div<UserAvatarRootProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  ${userAvatarStyle};\n`;\nconst normalizeString = pipe(trim, take(2), toUpper);\n\nconst UserAvatar = ({\n  label,\n  size = UserAvatarSizes.md,\n  className,\n  href,\n  to,\n  onClick,\n  isInverted = false,\n  ...props\n}: UserAvatarProps) =>\n  any(isNotUndefined, [href, to, onClick]) ? (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      aria-label=\"User avatar\"\n      as={BaseButton}\n      className={cls(CLX_COMPONENT, className)}\n      color={ButtonColors.primary}\n      href={href}\n      paddingSize={SpaceSizes.none}\n      to={to}\n      variant={ButtonVariants.solid}\n      onClick={onClick}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  ) : (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      className={cls(CLX_COMPONENT, className)}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  );\n\nUserAvatar.propTypes = {\n  label: PropTypes.string.isRequired,\n  size: PropTypes.oneOf(Object.values(UserAvatarSizes)),\n  className: PropTypes.string,\n  isInverted: PropTypes.bool,\n  href: PropTypes.string,\n  to: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  onClick: PropTypes.func,\n};\n\nexport default UserAvatar;\n"],"names":["toUpper","invoker","toUpper$1","cov_bhcxuhoso","actualCoverage","UserAvatarSizes","md","sm","$isInverted","avatar","css","pxToRem","pipe","getToken","mediumAvatar","userAvatarStyle","RootUserAvatar","invertedAvatar","cov_1uucwocc6l","s","to","onClick","avatarSizes","props","isNotUndefined","UserAvatar","label","isRequired","oneOf","values","PropTypes","string","bool","func"],"mappings":"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","x_google_ignoreList":[0]}