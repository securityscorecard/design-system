{"version":3,"file":"Breadcrumbs-C9xEKcaQ.js","sources":["../../src/components/Breadcrumbs/BreadcrumbItem.tsx","../../src/components/Breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { BreadcrumbItemProps } from './Breadcrumbs.types';\nimport { Text } from '../Text';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport type { SSCIcons } from '../Icon/Icon.types';\nimport { Link } from '../Link';\nimport { Icon } from '../Icon';\n\nconst ListItem = styled.li`\n  list-style-type: none;\n  display: flex;\n  align-items: center;\n`;\n\nexport const IconLink = styled(Link)`\n  &:hover {\n    color: var(--sscds-color-icon-subtle);\n  }\n`;\n\nconst BreadcrumbItem = ({\n  children,\n  isSelected = false,\n  to = undefined,\n  href = undefined,\n  iconName,\n  iconType = 'ssc',\n  ...props\n}: BreadcrumbItemProps) => {\n  const hasIcon = isNotUndefined(iconName);\n\n  return (\n    <ListItem>\n      {isSelected ? (\n        <Text aria-current=\"page\" variant=\"subtle\">\n          {children}\n        </Text>\n      ) : hasIcon ? (\n        <IconLink\n          color=\"secondary\"\n          href={href}\n          to={to}\n          {...props}\n          aria-label={children}\n        >\n          <Icon name={iconName} size=\"sm\" type={iconType} />\n        </IconLink>\n      ) : (\n        <Link color=\"secondary\" href={href} to={to} {...props}>\n          {children}\n        </Link>\n      )}\n    </ListItem>\n  );\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.propTypes = {\n  children: PropTypes.string.isRequired,\n  to: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  href: PropTypes.string,\n  iconName: PropTypes.oneOfType([\n    PropTypes.oneOf<SSCIcons>(Object.values(SSCIconNames)),\n    PropTypes.string,\n  ]),\n};\n\nexport default BreadcrumbItem;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { slice } from 'ramda';\nimport styled from 'styled-components';\nimport { isNilOrEmpty, isNotNilOrEmpty } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport type {\n  BreadcrumbItemProps,\n  BreadcrumbsProps,\n} from './Breadcrumbs.types';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { DropdownMenu } from '../_internal/BaseDropdownMenu';\nimport { ActionKinds } from '../../types/action.types';\nimport { ColorTypes, SpaceSizes } from '../../theme';\nimport { Inline } from '../layout';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { IconLink } from './BreadcrumbItem';\n\nconst BreadcrumbsWrapper = styled.nav`\n  display: flex;\n`;\n\nconst InlineOrderedList = styled(Inline)`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nconst itemsAfterCollapse = 3;\nconst itemsBeforeCollapse = 1;\n\n// Build list of breadcrumbs interspersing a separator\nconst insertSeparators = (items: React.ReactElement[]) => {\n  return items.reduce((prev, current, index) => {\n    if (index < items.length - 1) {\n      return [\n        ...prev,\n        current,\n        <Icon\n          // eslint-disable-next-line react/no-array-index-key\n          key={`separator-${index}`}\n          color={ColorTypes.neutral600}\n          name={SSCIconNames.angleRight}\n          size=\"sm\"\n          hasFixedSize\n        />,\n      ];\n    }\n\n    return [...prev, current];\n  }, []);\n};\n\nconst renderDropdown = (actions: ActionKinds<React.MouseEvent[]>[]) => (\n  <li key=\"breadcrumbs-dropdown\">\n    <DropdownMenu\n      actions={actions}\n      paneWidth={270}\n      placement=\"bottom-start\"\n      aria-hidden\n    >\n      <IconLink aria-label=\"Open breadcrumbs menu\" color=\"secondary\">\n        <Icon name=\"ellipsis-h\" size=\"sm\" />\n      </IconLink>\n    </DropdownMenu>\n  </li>\n);\n\n// this renders the list of items only when the count of the actions is bigger than 2\nconst renderItemsBeforeAndAfter = (\n  allItems: React.ReactNode[],\n  allDropdownActions: ActionKinds<React.MouseEvent[]>[],\n) => {\n  const dropdown = renderDropdown(allDropdownActions);\n  return [\n    ...slice(0, itemsBeforeCollapse, allItems),\n    dropdown,\n    ...slice(allItems.length - itemsAfterCollapse, allItems.length, allItems),\n  ];\n};\n\nconst Breadcrumbs = ({ children, className, ...props }: BreadcrumbsProps) => {\n  const allItems = React.Children.map(children, (breadcrumbItem) => {\n    if (!React.isValidElement(breadcrumbItem)) {\n      return null;\n    }\n\n    return React.cloneElement(\n      breadcrumbItem as React.ReactElement<BreadcrumbItemProps>,\n      {\n        isSelected:\n          isNilOrEmpty(breadcrumbItem.props.to) &&\n          isNilOrEmpty(breadcrumbItem.props.href),\n        ...props,\n      },\n    );\n  });\n\n  const allDropdownActions = slice(\n    itemsBeforeCollapse,\n    -Math.abs(itemsAfterCollapse),\n  )(\n    React.Children.toArray(children).map((breadcrumbItem) => {\n      if (!React.isValidElement(breadcrumbItem)) {\n        return null;\n      }\n      return {\n        label: breadcrumbItem.props.children,\n        name: breadcrumbItem.props.children,\n        ...(isNotNilOrEmpty(breadcrumbItem.props.to) && {\n          to: breadcrumbItem.props.to,\n        }),\n        ...(isNotNilOrEmpty(breadcrumbItem.props.href) && {\n          href: breadcrumbItem.props.href,\n        }),\n      };\n    }),\n  );\n\n  return (\n    <BreadcrumbsWrapper\n      aria-label=\"Breadcrumb\"\n      className={cls(CLX_COMPONENT, className)}\n    >\n      <InlineOrderedList\n        align=\"center\"\n        as=\"ol\"\n        gap={SpaceSizes.xs}\n        justify=\"center\"\n      >\n        {insertSeparators(\n          allDropdownActions.length < 2\n            ? allItems\n            : renderItemsBeforeAndAfter(allItems, allDropdownActions),\n        )}\n      </InlineOrderedList>\n    </BreadcrumbsWrapper>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\n  className: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n"],"names":["iconName","ListItem","cov_2f31nevo0c","s","styled","li","withConfig","displayName","componentId","children","props","hasIcon","to","b","href","BreadcrumbItem","oneOfType","PropTypes","string","jsx","oneOf","cov_2ld38341p3","path","hash","global","gcv","coverageData","coverage","actualCoverage","BreadcrumbsWrapper","nav","insertSeparators","items","Inline","itemsAfterCollapse","neutral600","angleRight","f","prev","current","index","length","Icon","dropdown","name","slice","itemsBeforeCollapse","size","renderItemsBeforeAndAfter","React","map","isSelected","DropdownMenu","actions","paneWidth","placement","breadcrumbItem","IconLink","color","label","allItems","allDropdownActions","renderDropdown","Breadcrumbs"],"mappings":"yrBA4BEA,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,4FAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,4FAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,ceAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,2FAAAA,EAAAA,MAAAA,CAAAA,YAAAA,SAAAA,iBAAAA,OAAAA,eAAAA,OAAAA,OAAAA,WAAAA,KAAAA,aAAAA,cAAAA,cAAAA,WAAAA,iBAAAA,WAAAA,aAAAA,KAAAA,YAAAA,OAAAA,WAAAA,WAAAA,QAAAA,UAAAA,YAAAA,SAAAA,aAAAA,YAAAA,QAAAA,WAAAA,SAAAA,OAAAA,QAAAA,SAAAA,QAAAA,EAAAA,SAAAA,82CAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,YAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,EAjBwB,MAIzBC,GAAAC,IAAAC,EAAAC,CAAAA,IAAAA,EAAAC,GAAAC,WAAA,CAAAC,YAAAC,2BAAAA,2BAMA,EAGCC,CAAAA,uDAAAA,CAAAA,GAAAA,GAAAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,WAAAA,CAAAA,YAAAA,2BAAAA,2BAIAT,EAAAA,CAAAA,gDAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,IACW,MACRU,EAAAA,CAAAA,CACsBD,SAAAA,EACnBE,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAENC,GAAAA,GAAAV,IAAAW,EAAA,CAAA,EAAA,CAAA,IAAA,QAuBFC,KAAAA,GAAAZ,EAAA,EAAAW,EAAA,CAAA,EAAA,CAAA,IAAA,QACAE,SAAAA,EACAA,SAAAA,GAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,OACEN,GAAAA,CACcO,IACZC,CAAAA,IAAAA,OACgB,eACMC,CAAAA,IAAAA,EAAAA,CAAAA,GAAAA,OAAAA,EAAAA,EAAAA,OAGpBC,EAAA,IACHlB,eAESgB,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,IAAAA,GAAAA,eAAoB,OAClBG,QAAAA,SAGdX,SAAAA,CAAA,CAEeM,IAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,4pGCpDyB,SAAAM,GAAA,CAAA,IAAAC,EAAA,yFAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,yFAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,ceAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,wFAAA,EAAA,MAAA,CAAA,QAAA,YAAA,QAAA,SAAA,eAAA,kBAAA,MAAA,eAAA,OAAA,eAAA,aAAA,aAAA,SAAA,gBAAA,WAAA,qBAAA,MAAA,aAAA,cAAA,cAAA,oBAAA,qBAAA,sBAAA,mBAAA,QAAA,SAAA,OAAA,UAAA,QAAA,SAAA,aAAA,aAAA,iBAAA,UAAA,4BAAA,WAAA,qBAAA,WAAA,cAAA,WAAA,YAAA,QAAA,WAAA,MAAA,iBAAA,iBAAA,eAAA,aAAA,KAAA,OAAA,OAAA,MAAA,UAAA,QAAA,OAAA,KAAA,YAAA,UAAA,OAAA,aAAA,QAAA,EAAA,SAAA,4zEAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,YAAA,CAAA,OAAAO,CAAAA,EAAAA,EAAAP,EAAA,EAAA,MAAAQ,GAAAR,EAAA,EAAAlB,EAAAC,CAAAA,IAAAA,EAAA0B,IAAAxB,WAAAC,CAAAA,8CAAAC,YAAA,aAAA,CAMxC,EAIA,CAAA,eAAA,CAAA,GAAMuB,GAAAA,EAAAA,EAAAA,OAAoBC,EAAgCC,CAAA,EAAA3B,YAAAC,YAAA,iCAAAC,YAMjD,aAAA,CAAA,EAAA,CAAA,qCAAA,CAAA,GAAA0B,GAAAb,EAAA,EAAAlB,EAAA,CAAA,IAGmBgC,GAAAA,GAAAA,IAAAA,EAAAA,CAAAA,IACCC,GAAAA,EAAAA,EAAAA,EAEP,CAAA,IAAA,MAAAL,EAAAC,IAAAX,EAAA,EAAAgB,EAAAhB,CAAAA,IAAAA,IAAAlB,EAAA,CAAA,aAJY,CAAAmC,EAAAC,EAAAC,KAAAnB,EAAAgB,EAAAA,OAAAhB,EAAA,EAAAlB,EAKxB,CAAA,IAAAqC,EAAAR,EAAAS,OAAA,GAAApB,EAAA,EAAAR,EAAA,CAAA,EAAA,CAAA,IAAAQ,EAAA,EAAAlB,EAEN,CAAA,IAAA,CAEO,GAAAmC,EACJC,EACPpB,EAAAA,IAAAuB,EAsBQC,CAAAA,MAAAA,aAEJC,KAAGC,EAASC,WAIhBC,KAAA,kBAEqB,EAAA,EAZfC,aAAAA,CAA4BA,EAAAA,CAYXvC,IAAwBC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAC7C,CAAA,IAAiBuC,CAAAA,GAAAA,EAAAA,CAAeC,IAC9B,CAAA,CAAA,GACE7B,EAAA,EAAAlB,EAGF,CAAA,IAAA,MAAO8C,MAGHE,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,CAEwC1C,SAAAU,EAAAA,IAAAiC,EAAA,CAG5CC,QAAAA,EACDC,UAAA,IAEDC,UAA2BV,eAKvB,cAA0BW,GAE1B/C,SAAAU,MAAAsC,EAAA,CAAA,aAAA,wBAAAC,MAAA,YACOjD,SAAAU,EAAAA,IAAAuB,GAAAE,KAAA,aAAAG,KAAA,IAAA,CAAA,CAAA,CACLY,EACAf,CAlBAO,EAAAA,sBAkB2B1C,GAAAA,EAAAA,EAAAA,EAIuB,EAAA,IAAA,MAChDK,EAA2BA,CAC7B8C,EACFC,IAEJ,CAAAxC,EAAA,EAAAgB,EAEA,CAAA,IAAA,MAAAM,GAAAtB,EAAA,EAAAlB,QACG2D,EAAAD,CACY,GAAAxC,OAAAA,IAAAlB,EAAA,EAAA,IAiBjB,CAEA4D,GAAAA,EAAwB,EAAAjB,EAAAc,CAAA,EACZ3C,OACCA,EAAUC,OAAAA,EAAAA,EAAAA,OAAAA,CAAAA,CAAAA,CAGvB,EAAAG,EAAA,EAAAlB"}