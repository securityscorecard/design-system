{"version":3,"file":"Inline-DPdVYO7t.js","sources":["../../src/components/layout/Inline/Inline.enums.ts","../../src/components/layout/Inline/Inline.tsx"],"sourcesContent":["export const StretchEnum = {\n  start: 'start',\n  end: 'end',\n  all: 'all',\n} as const;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { prop } from 'ramda';\nimport { isNotUndefined, isNumber } from 'ramda-adjunct';\nimport { Property } from 'csstype';\nimport cls from 'classnames';\n\nimport {\n  AlignItemsPropType,\n  JustifyContentPropType,\n} from '../../../types/flex.types';\nimport { SpaceSize } from '../../../theme/space.types';\nimport { getSpace } from '../../../utils';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { StretchEnum } from './Inline.enums';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\ntype Stretch = (typeof StretchEnum)[keyof typeof StretchEnum];\n\nexport interface InlineProps {\n  /**\n   * Whitespace between each child of the Inline\n   */\n  gap?: SpaceSize;\n  /**\n   * Horizontal alignment of elements inside Inline\n   *\n   */\n  justify?: Property.JustifyContent;\n  /**\n   * Vertical alignment of elements inside Inline\n   */\n  align?: Property.AlignItems;\n  /**\n   * Child or children to fill available space\n   */\n  stretch?: number | Stretch;\n  className?: string;\n}\n\nconst getStretchStyle = (\n  stretch: Required<InlineProps['stretch']>,\n): string | null => {\n  if (isNumber(stretch)) {\n    return `\n      > :nth-child(${stretch}) { flex: 1 1 0%; }\n    `;\n  }\n\n  switch (stretch) {\n    case 'start':\n      return `\n        > :first-child { flex: 1 1 0%; }\n      `;\n    case 'end':\n      return `\n        > :last-child { flex: 1 1 0%; }\n      `;\n    case 'all':\n      return `\n        > * { flex: 1 1 0%; }\n      `;\n    default:\n      return null;\n  }\n};\n\nconst Inline = styled.div.attrs((props) => ({\n  ...props,\n  className: cls(CLX_LAYOUT, props?.className),\n}))<InlineProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: ${prop('justify')};\n  align-items: ${prop('align')};\n\n  ${({ stretch }) => isNotUndefined(stretch) && getStretchStyle(stretch)}\n\n  /* FIXME: Until we remove 'margin' property from other components we need to\n    increase specificity of those nesting , since it can be overriden by inner\n    elements with the same specificity. This can lead to inconsistent output\n    of visual test if styled-components puts CSS in different order into Head. */\n  && > * {\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  && > * + * {\n    margin-left: ${({ gap, theme }) => getSpace(gap, { theme })};\n  }\n`;\n\nInline.propTypes = {\n  align: AlignItemsPropType,\n  justify: JustifyContentPropType,\n  gap: PropTypes.oneOf(Object.values(SpaceSizes)),\n  stretch: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.oneOf<Stretch>(Object.values(StretchEnum)),\n  ]),\n  className: PropTypes.string,\n};\n\nInline.defaultProps = {\n  gap: SpaceSizes.none,\n};\n\nexport default Inline;\n"],"names":["cov_1mdbrli1yx","actualCoverage","StretchEnum","start","end","all","Inline","cov_2jirl9l77z","s","stretch","gap","theme","justify","JustifyContentPropType","oneOf","PropTypes","b","none"],"mappings":"wiCAAO,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,IAAME,MAAAA,GAAAA,EAAAA,EAAAA,EAAc,CAAA,IAAA,CACzBC,MAAO,QACPC,IAAK,MACLC,IAAK,KACP,GCyFAC,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,sFAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,sFAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gceAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,qFAAAA,EAAAA,MAAAA,CAAAA,SAAAA,YAAAA,OAAAA,iBAAAA,WAAAA,MAAAA,qBAAAA,yBAAAA,WAAAA,aAAAA,cAAAA,aAAAA,kBAAAA,UAAAA,SAAAA,MAAAA,QAAAA,QAAAA,YAAAA,aAAAA,cAAAA,cAAAA,MAAAA,QAAAA,YAAAA,QAAAA,UAAAA,QAAAA,SAAAA,SAAAA,YAAAA,SAAAA,SAAAA,eAAAA,MAAAA,EAAAA,SAAAA,8nCAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,YAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EA9CEC,EAAA,EAAAC,EA8BG,CAAA,IAAA,MAAEC,EAAQA,GAYOC,CAAKC,GAALD,EAAAA,EAAAA,OAAAA,IAAAA,EAAKC,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,OAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA;qBAA4BA,CAAAA;AAAAA,MAMrDC,OAFFN,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAEWO,EAAAA,KACMC,QAAAA,OAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IACNC;AAAAA;AAAAA,QAOXT,IAAsB,MAAAC,OAAAA,EAAA,EAAAS,UAAAT,EAAA,EAAAC,EAAA,CAAA,IACJS;AAAAA;AAAAA;;"}