{"version":3,"file":"ControlsModule-D8ibhrXF.js","sources":["../../src/components/Datatable/components/Search/Search.types.ts","../../src/components/Datatable/components/Search/Search.tsx","../../src/components/Datatable/components/Search/index.ts","../../src/components/Datatable/ControlsModule/ControlsModule.types.ts","../../src/components/Datatable/ControlsModule/ControlsModule.enums.ts","../../src/components/Datatable/ControlsModule/ControlsModule.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { InputProps } from '../../../forms/Input/Input.types';\n\nexport interface SearchProps\n  extends InputProps,\n    React.InputHTMLAttributes<HTMLInputElement> {\n  onSearch: (query: string) => void | Promise<void>;\n  onClear: () => void;\n  placeholder?: string;\n  isValidatedOnSubmit?: boolean;\n  pattern?: string;\n  errorMessage?: string;\n  value?: string;\n  defaultValue?: string;\n}\n\nexport const SearchPropType = {\n  onSearch: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  isValidatedOnSubmit: PropTypes.bool,\n  pattern: PropTypes.string,\n  errorMessage: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  defaultValue: PropTypes.string,\n};\n","import React, { useState } from 'react';\n\nimport { SearchPropType, SearchProps } from './Search.types';\nimport { Error } from '../../../forms/Message';\nimport { validatePattern } from '../../../Filters/helpers';\nimport { Stack } from '../../../layout';\nimport { SearchBar } from '../../../forms';\n\nconst Search = ({\n  onSearch,\n  onClear,\n  placeholder = 'Search',\n  isValidatedOnSubmit = false,\n  pattern,\n  errorMessage,\n  ...props\n}: SearchProps) => {\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(0);\n\n  const clear = () => {\n    setIsSearching(false);\n    setIsInvalid(false);\n    onClear?.();\n  };\n  const search = async (searchQuery: string) => {\n    setIsSearching(true);\n    await onSearch(searchQuery);\n    setIsSearching(false);\n  };\n  const handleKeyUp: React.KeyboardEventHandler = (e) => {\n    const target = e.target as HTMLInputElement;\n    const hasError = validatePattern(target);\n    const searchValidQuery = () => {\n      if (!hasError) {\n        search(target.value);\n      }\n    };\n\n    if (isValidatedOnSubmit) {\n      if (e.key === 'Enter') {\n        setIsInvalid(hasError);\n        searchValidQuery();\n      }\n    } else {\n      setIsInvalid(hasError);\n      if (typingTimeout) {\n        window.clearTimeout(typingTimeout);\n      }\n      setTypingTimeout(\n        window.setTimeout(() => {\n          searchValidQuery();\n        }, 500),\n      );\n    }\n  };\n\n  if (props.defaultValue !== undefined) {\n    return (\n      <Stack>\n        <SearchBar\n          isInvalid={isInvalid}\n          isSearching={isSearching}\n          pattern={pattern}\n          placeholder={placeholder}\n          onClear={clear}\n          onKeyUp={handleKeyUp}\n          {...props}\n        />\n        {isInvalid && <Error>{errorMessage}</Error>}\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack>\n      <SearchBar\n        isInvalid={isInvalid}\n        isSearching={isSearching}\n        pattern={pattern}\n        placeholder={placeholder}\n        onClear={clear}\n        onKeyUp={handleKeyUp}\n        {...props}\n      />\n      {isInvalid && <Error>{errorMessage}</Error>}\n    </Stack>\n  );\n};\n\nSearch.propTypes = SearchPropType;\n\nexport default Search;\n","export { default as Search } from './Search';\nexport * from './Search.types';\n","import PropTypes from 'prop-types';\nimport type { IdType } from 'react-table';\n\nimport { SearchPropType, SearchProps } from '../components/Search/Search.types';\nimport { FiltersPropType, FiltersProps } from '../../Filters/Filters.types';\nimport { ControlTypes } from './ControlsModule.enums';\n\nexport type Controls = (typeof ControlTypes)[keyof typeof ControlTypes];\n\nexport type ControlState = {\n  isActive: boolean;\n  isApplied: boolean;\n};\n\nexport type ControlsLocalState = Record<Controls, ControlState>;\n\nexport interface ControlsConfig<D> {\n  hasSearch: boolean;\n  searchConfig: Partial<SearchProps>;\n  hasFiltering: boolean;\n  filteringConfig: Partial<FiltersProps>;\n  defaultIsFilteringOpen: boolean;\n  defaultIsFilteringApplied: boolean;\n  hasColumnsControls: boolean;\n  defaultIsColumnsControlsOpen: boolean;\n  defaultIsColumnsControlsApplied: boolean;\n  onColumnOrderChange: (columnOrder: IdType<D>[]) => void;\n  onColumnVisibilityChange: (hiddenColumns: IdType<D>[]) => void;\n  onControlToggle: (control: Controls, isActive: boolean) => void;\n  onCancelLoading: () => void;\n  isDataLoading: boolean;\n}\n\n// TODO: commented part will be enabled when functionality is implemented\nexport const ControlsConfigPropType = {\n  hasSearch: PropTypes.bool,\n  searchConfig: PropTypes.exact(SearchPropType).isRequired,\n  hasFiltering: PropTypes.bool,\n  defaultIsFilteringOpen: PropTypes.bool,\n  defaultIsFilteringApplied: PropTypes.bool,\n  filteringConfig: PropTypes.exact(FiltersPropType).isRequired,\n  isDataLoading: PropTypes.bool,\n  onCancelLoading: PropTypes.func,\n  onControlToggle: PropTypes.func,\n  hasColumnsControls: PropTypes.bool.isRequired,\n  defaultIsColumnsControlsOpen: PropTypes.bool.isRequired,\n  defaultIsColumnsControlsApplied: PropTypes.bool.isRequired,\n  // hasGrouping: PropTypes.bool.isRequired,\n  // defaultIsGroupingOpen: PropTypes.bool.isRequired,\n  // defaultIsGroupingApplied: PropTypes.bool.isRequired,\n  // defaultGroups: /* TODO: add propTypes */,\n  // hasViews: PropTypes.bool.isRequired,\n  // defaultIsViewsOpen: PropTypes.bool.isRequired,\n  // defaultIsViewsApplied: PropTypes.bool.isRequired,\n  // defaultViews: /* TODO: add propTypes */,\n};\n\nexport type ControlsModuleProps<D> = Omit<\n  ControlsConfig<D>,\n  'onColumnOrderChange'\n>;\n","// TODO: commented part will be enabled when functionality is implemented\nexport const ControlTypes = {\n  filters: 'filters',\n  columns: 'columns',\n  // groups: 'groups',\n  // views: 'views',\n} as const;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { all, isEmpty, map, mergeDeepRight, omit, pipe, zipObj } from 'ramda';\nimport { isNonEmptyArray, isNotNilOrEmpty } from 'ramda-adjunct';\n\nimport { getColor } from '../../../utils';\nimport { Search } from '../components/Search';\nimport { Filters } from '../../Filters';\nimport { SSCIconNames } from '../../../theme/icons/icons.enums';\nimport { ColumnsControls } from '../components/ColumnsControls';\nimport { ControlButton } from '../components/ControlButton';\nimport { DatatableStore } from '../Datatable.store';\nimport {\n  ControlState,\n  Controls,\n  ControlsConfigPropType,\n  ControlsLocalState,\n  ControlsModuleProps,\n} from './ControlsModule.types';\nimport { Filter } from '../../Filters/Filters.types';\nimport { ControlTypes } from './ControlsModule.enums';\nimport { SpaceSizes } from '../../../theme';\nimport { Inline, Padbox } from '../../layout';\n\nconst FiltersContainer = styled(Padbox)`\n  display: flex;\n  background-color: ${getColor('neutral.0')};\n`;\n\nconst resetActiveControls: (\n  toggledControl: Controls[],\n  currentState: ControlsLocalState,\n) => ControlsLocalState = pipe(\n  omit,\n  map((controlState) => ({ ...controlState, isActive: false })),\n);\n\nconst prepareControlState: (providedState: [boolean, boolean]) => ControlState =\n  zipObj(['isActive', 'isApplied']);\n\nconst defaultControlState: ControlState = {\n  isActive: false,\n  isApplied: false,\n};\n\nconst mergeControlState = mergeDeepRight(defaultControlState);\n\n// TODO: commented part will be enabled when functionality is implemented\nfunction ControlsModule<D extends Record<string, unknown>>({\n  hasSearch,\n  searchConfig,\n  hasFiltering,\n  filteringConfig,\n  defaultIsFilteringOpen,\n  defaultIsFilteringApplied,\n  hasColumnsControls,\n  defaultIsColumnsControlsOpen,\n  defaultIsColumnsControlsApplied,\n  isDataLoading,\n  onCancelLoading,\n  onControlToggle,\n}: ControlsModuleProps<D>): React.ReactElement {\n  const {\n    onClose: onFilteringClose,\n    onApply: onFilteringApply,\n    state: filteringState,\n    fields: filteringFields,\n    ...restFilteringConfig\n  } = filteringConfig;\n  const {\n    onSearch,\n    onClear: onSearchClear,\n    defaultValue: defaultSearchValue,\n    ...restSearchConfig\n  } = searchConfig;\n\n  const filteringStoreState = DatatableStore.useState((s) => s.filters);\n  const [controlsState, setControlsState] = useState<ControlsLocalState>({\n    [ControlTypes.filters]: mergeControlState(\n      prepareControlState([\n        defaultIsFilteringOpen,\n        defaultIsFilteringApplied || isNonEmptyArray(filteringState),\n      ]),\n    ),\n    [ControlTypes.columns]: mergeControlState(\n      prepareControlState([\n        defaultIsColumnsControlsOpen,\n        defaultIsColumnsControlsApplied,\n      ]),\n    ),\n  });\n  const [appliedFilters, setAppliedFilters] = useState(0);\n\n  useEffect(() => {\n    DatatableStore.update((s) => {\n      s.query = defaultSearchValue;\n      s.filters = filteringState;\n      s.hasAppliedFilters = controlsState[ControlTypes.filters].isApplied;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isToolbarEnabled = hasFiltering || hasColumnsControls;\n\n  const shouldShowFiltering = hasFiltering && isNonEmptyArray(filteringFields);\n\n  const applyControlStateChange = (\n    control: Controls,\n    newState: Partial<ControlState>,\n  ): void => {\n    setControlsState((state) => ({\n      ...state,\n      [control]: {\n        ...state[control],\n        ...newState,\n      },\n    }));\n  };\n\n  const handleControlOnClick = (control: Controls, isActive: boolean): void => {\n    onControlToggle(control, !isActive);\n    setControlsState((state) => ({\n      ...resetActiveControls([control], state),\n      [control]: {\n        ...state[control],\n        isActive: !state[control].isActive,\n      },\n    }));\n  };\n\n  const handleCloseFilter = () => {\n    onFilteringClose();\n    applyControlStateChange(ControlTypes.filters, { isActive: false });\n  };\n\n  const handleApplyFilter = (appliedfilters: Filter[]): void => {\n    const hasAppliedFilters = isNonEmptyArray(appliedfilters);\n    onFilteringApply(appliedfilters);\n    applyControlStateChange(ControlTypes.filters, {\n      isApplied: hasAppliedFilters,\n    });\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.filters = appliedfilters;\n      s.hasAppliedFilters = hasAppliedFilters;\n      s.isCanceled = false;\n    });\n\n    setAppliedFilters(appliedfilters.length);\n  };\n\n  const handleOnSearch = (query: string): void => {\n    onSearch(query);\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.query = query;\n      s.isCanceled = false;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleOnSearchClear = (): void => {\n    onSearchClear();\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.query = '';\n    });\n  };\n  // trigger search on mount if defaultValue is provided\n  useEffect(() => {\n    if (isNotNilOrEmpty(defaultSearchValue)) {\n      handleOnSearch(defaultSearchValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => ({ columnOrder: s.columnOrder, hiddenColumns: s.hiddenColumns }),\n      ({ columnOrder, hiddenColumns }) => {\n        if (all(isEmpty, [columnOrder, hiddenColumns])) {\n          applyControlStateChange(ControlTypes.columns, {\n            isApplied: false,\n          });\n        }\n      },\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div>\n      <Padbox paddingSize={SpaceSizes.sm}>\n        <Inline align=\"center\" gap={SpaceSizes.lg} stretch=\"end\">\n          {isToolbarEnabled && (\n            <Inline gap=\"sm\">\n              {hasColumnsControls && (\n                <ColumnsControls\n                  isOpen={controlsState[ControlTypes.columns].isActive}\n                  onApply={(shouldApply) => {\n                    applyControlStateChange(ControlTypes.columns, {\n                      isApplied: shouldApply,\n                    });\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    );\n                  }}\n                  onClose={() =>\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    )\n                  }\n                  onOpen={() =>\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    )\n                  }\n                >\n                  {(props) => (\n                    <ControlButton\n                      iconName={SSCIconNames.columns3}\n                      label=\"Toggle columns\"\n                      onClick={() =>\n                        handleControlOnClick(\n                          ControlTypes.columns,\n                          controlsState[ControlTypes.columns].isActive,\n                        )\n                      }\n                      {...props}\n                    />\n                  )}\n                </ColumnsControls>\n              )}\n              {shouldShowFiltering && (\n                <ControlButton\n                  appliedFilters={appliedFilters}\n                  iconName={SSCIconNames.filter}\n                  // isActive={controlsState[ControlTypes.filters].isActive}\n                  label=\"Filters\"\n                  onClick={() =>\n                    handleControlOnClick(\n                      ControlTypes.filters,\n                      controlsState[ControlTypes.filters].isActive,\n                    )\n                  }\n                />\n              )}\n            </Inline>\n          )}\n\n          {hasSearch && (\n            <Search\n              defaultValue={defaultSearchValue}\n              onClear={handleOnSearchClear}\n              onSearch={handleOnSearch}\n              {...restSearchConfig}\n            />\n          )}\n        </Inline>\n      </Padbox>\n\n      {shouldShowFiltering && controlsState[ControlTypes.filters].isActive && (\n        <FiltersContainer paddingSize={SpaceSizes.md}>\n          <Filters\n            fields={filteringFields}\n            isLoading={isDataLoading}\n            state={filteringStoreState}\n            onApply={handleApplyFilter}\n            onCancel={onCancelLoading}\n            onClose={handleCloseFilter}\n            {...restFilteringConfig}\n          />\n        </FiltersContainer>\n      )}\n    </div>\n  );\n}\n\nControlsModule.propTypes = ControlsConfigPropType;\nControlsModule.displayName = 'ControlsModule';\n\nexport default ControlsModule;\n"],"names":["SearchPropType","onSearch","PropTypes","func","isRequired","onClear","placeholder","string","isValidatedOnSubmit","bool","pattern","errorMessage","isDisabled","defaultValue","isInvalid","cov_7e1y5lbn2","s","props","isSearching","useState","typingTimeout","clear","setTypingTimeout","setIsInvalid","f","setIsSearching","search","searchQuery","hasError","e","searchValidQuery","validatePattern","target","b","value","key","window","clearTimeout","setTimeout","children","jsx","SearchBar","Search","cov_hsjsru93k","actualCoverage","ControlsConfigPropType","hasSearch","searchConfig","exact","hasFiltering","defaultIsFilteringOpen","defaultIsFilteringApplied","filteringConfig","FiltersPropType","isDataLoading","onCancelLoading","onControlToggle","hasColumnsControls","defaultIsColumnsControlsOpen","defaultIsColumnsControlsApplied","cov_l3i7hvy1x","ControlTypes","columns","cov_1h5ljqax5a","path","hash","global","gcv","coverageData","coverage","prepareControlState","zipObj","withConfig","displayName","componentId","getColor","mergeControlState","onFilteringClose","filteringState","filteringFields","onSearchClear","defaultSearchValue","useEffect","DatatableStore","isApplied","shouldShowFiltering","applyControlStateChange","setControlsState","filteringStoreState","filters","newState","handleControlOnClick","control","resetActiveControls","isActive","handleCloseFilter","update","query","handleApplyFilter","hasAppliedFilters","isToolbarEnabled","pageIndex","isNonEmptyArray","setAppliedFilters","state","handleOnSearch","handleOnSearchClear","isNotNilOrEmpty","unsubscribe","columnOrder","hiddenColumns","appliedfilters","isCanceled","length","shouldApply","filter","ControlsModule"],"mappings":"6gCAiBO,MAAMA,EAAiB,CAC5BC,SAAUC,EAAUC,KAAKC,WACzBC,QAASH,EAAUC,KAAKC,WACxBE,YAAaJ,EAAUK,OACvBC,oBAAqBN,EAAUO,KAC/BC,QAASR,EAAUK,OACnBI,aAAcT,EAAUK,OACxBK,WAAYV,EAAUO,KACtBI,aAAcX,EAAUK,MAC1B,ECTSO,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,oGAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,oGAAAA,agBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MA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AA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,GAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,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"}