{"version":3,"file":"Breadcrumbs-BN8y9wzJ.js","sources":["../../../src/components/Breadcrumbs/BreadcrumbItem.tsx","../../../src/components/Breadcrumbs/Breadcrumbs.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { BreadcrumbItemProps } from './Breadcrumbs.types';\nimport { Text } from '../Text';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport type { SSCIcons } from '../Icon/Icon.types';\nimport { Link } from '../Link';\nimport { Icon } from '../Icon';\n\nconst ListItem = styled.li`\n  list-style-type: none;\n  display: flex;\n  align-items: center;\n`;\n\nexport const IconLink = styled(Link)`\n  &:hover {\n    color: var(--sscds-color-icon-subtle);\n  }\n`;\n\nconst BreadcrumbItem = ({\n  children,\n  isSelected = false,\n  to = undefined,\n  href = undefined,\n  iconName,\n  iconType = 'ssc',\n  ...props\n}: BreadcrumbItemProps) => {\n  const hasIcon = isNotUndefined(iconName);\n\n  return (\n    <ListItem>\n      {isSelected ? (\n        <Text aria-current=\"page\" variant=\"subtle\">\n          {children}\n        </Text>\n      ) : hasIcon ? (\n        <IconLink\n          color=\"secondary\"\n          href={href}\n          to={to}\n          {...props}\n          aria-label={children}\n        >\n          <Icon name={iconName} size=\"sm\" type={iconType} />\n        </IconLink>\n      ) : (\n        <Link color=\"secondary\" href={href} to={to} {...props}>\n          {children}\n        </Link>\n      )}\n    </ListItem>\n  );\n};\nBreadcrumbItem.displayName = 'BreadcrumbItem';\nBreadcrumbItem.propTypes = {\n  children: PropTypes.string.isRequired,\n  to: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.shape({\n      pathname: PropTypes.string,\n      search: PropTypes.string,\n      hash: PropTypes.string,\n    }),\n  ]),\n  href: PropTypes.string,\n  iconName: PropTypes.oneOfType([\n    PropTypes.oneOf<SSCIcons>(Object.values(SSCIconNames)),\n    PropTypes.string,\n  ]),\n};\n\nexport default BreadcrumbItem;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { slice } from 'ramda';\nimport styled from 'styled-components';\nimport { isNilOrEmpty, isNotNilOrEmpty } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport type {\n  BreadcrumbItemProps,\n  BreadcrumbsProps,\n} from './Breadcrumbs.types';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { DropdownMenu } from '../_internal/BaseDropdownMenu';\nimport { ActionKinds } from '../../types/action.types';\nimport { ColorTypes, SpaceSizes } from '../../theme';\nimport { Inline } from '../layout';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { IconLink } from './BreadcrumbItem';\n\nconst BreadcrumbsWrapper = styled.nav`\n  display: flex;\n`;\n\nconst InlineOrderedList = styled(Inline)`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nconst itemsAfterCollapse = 3;\nconst itemsBeforeCollapse = 1;\n\n// Build list of breadcrumbs interspersing a separator\nconst insertSeparators = (items: React.ReactElement[]) => {\n  return items.reduce((prev, current, index) => {\n    if (index < items.length - 1) {\n      return [\n        ...prev,\n        current,\n        <Icon\n          // eslint-disable-next-line react/no-array-index-key\n          key={`separator-${index}`}\n          color={ColorTypes.neutral600}\n          name={SSCIconNames.angleRight}\n          size=\"sm\"\n          hasFixedSize\n        />,\n      ];\n    }\n\n    return [...prev, current];\n  }, []);\n};\n\nconst renderDropdown = (actions: ActionKinds<React.MouseEvent[]>[]) => (\n  <li key=\"breadcrumbs-dropdown\">\n    <DropdownMenu\n      actions={actions}\n      paneWidth={270}\n      placement=\"bottom-start\"\n      aria-hidden\n    >\n      <IconLink aria-label=\"Open breadcrumbs menu\" color=\"secondary\">\n        <Icon name=\"ellipsis-h\" size=\"sm\" />\n      </IconLink>\n    </DropdownMenu>\n  </li>\n);\n\n// this renders the list of items only when the count of the actions is bigger than 2\nconst renderItemsBeforeAndAfter = (\n  allItems: React.ReactNode[],\n  allDropdownActions: ActionKinds<React.MouseEvent[]>[],\n) => {\n  const dropdown = renderDropdown(allDropdownActions);\n  return [\n    ...slice(0, itemsBeforeCollapse, allItems),\n    dropdown,\n    ...slice(allItems.length - itemsAfterCollapse, allItems.length, allItems),\n  ];\n};\n\nconst Breadcrumbs = ({ children, className, ...props }: BreadcrumbsProps) => {\n  const allItems = React.Children.map(children, (breadcrumbItem) => {\n    if (!React.isValidElement(breadcrumbItem)) {\n      return null;\n    }\n\n    return React.cloneElement(\n      breadcrumbItem as React.ReactElement<BreadcrumbItemProps>,\n      {\n        isSelected:\n          isNilOrEmpty(breadcrumbItem.props.to) &&\n          isNilOrEmpty(breadcrumbItem.props.href),\n        ...props,\n      },\n    );\n  });\n\n  const allDropdownActions = slice(\n    itemsBeforeCollapse,\n    -Math.abs(itemsAfterCollapse),\n  )(\n    React.Children.toArray(children).map((breadcrumbItem) => {\n      if (!React.isValidElement(breadcrumbItem)) {\n        return null;\n      }\n      return {\n        label: breadcrumbItem.props.children,\n        name: breadcrumbItem.props.children,\n        ...(isNotNilOrEmpty(breadcrumbItem.props.to) && {\n          to: breadcrumbItem.props.to,\n        }),\n        ...(isNotNilOrEmpty(breadcrumbItem.props.href) && {\n          href: breadcrumbItem.props.href,\n        }),\n      };\n    }),\n  );\n\n  return (\n    <BreadcrumbsWrapper\n      aria-label=\"Breadcrumb\"\n      className={cls(CLX_COMPONENT, className)}\n    >\n      <InlineOrderedList\n        align=\"center\"\n        as=\"ol\"\n        gap={SpaceSizes.xs}\n        justify=\"center\"\n      >\n        {insertSeparators(\n          allDropdownActions.length < 2\n            ? allItems\n            : renderItemsBeforeAndAfter(allItems, allDropdownActions),\n        )}\n      </InlineOrderedList>\n    </BreadcrumbsWrapper>\n  );\n};\n\nBreadcrumbs.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\n  className: PropTypes.string,\n};\n\nexport default Breadcrumbs;\n"],"names":["cov_1jwd6ytd22","path","hash","global","gcv","coverageData","coverage","actualCoverage","ListItem","s","styled","li","withConfig","displayName","componentId","IconLink","Link","BreadcrumbItem","children","isSelected","b","to","href","iconName","isRequired","hasIcon","isNotUndefined","string","cov_1iqcgoy7zu","BreadcrumbsWrapper","nav","InlineOrderedList","Inline","itemsAfterCollapse","neutral600","insertSeparators","items","f","reduce","prev","current","index","length","jsx","Icon","color","ColorTypes","name","SSCIconNames","angleRight","size","hasFixedSize","renderDropdown","actions","DropdownMenu","paneWidth","placement","renderItemsBeforeAndAfter","allItems","allDropdownActions","dropdown","slice","itemsBeforeCollapse"],"mappings":"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OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA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"}