{"version":3,"file":"ElementLabel-Cpu23K4t.js","sources":["../../../src/components/ElementLabel/ElementLabel.tsx"],"sourcesContent":["import React, { ComponentPropsWithoutRef, ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { WithAsProp } from '../../types/utils.types';\n\nexport type ElementLabelProps = WithAsProp<{\n  children: ReactNode;\n  /* Font size */\n  size?: 'sm' | 'md';\n  /* Font color */\n  color?:\n    | 'default'\n    | 'subtle'\n    | 'disabled'\n    | 'danger'\n    | 'inverse'\n    | 'white'\n    | 'link';\n  /* Font weight. When true ElementLabel will be rendered as bold */\n  isStrong?: boolean;\n}> &\n  ComponentPropsWithoutRef<'span'>;\n\nconst ElementLabelRoot = styled.span`\n  font-family: var(--sscds-font-family-body);\n  font-size: var(--sscds-elementlabel-font-size);\n  font-weight: var(--sscds-elementlabel-font-weight);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: var(--sscds-elementlabel-color);\n`;\nElementLabelRoot.displayName = 'ElementLabel.Root';\n\nfunction ElementLabel({\n  children,\n  size = 'sm',\n  color = 'default',\n  isStrong = false,\n  ...props\n}: ElementLabelProps) {\n  const vars = {\n    '--sscds-elementlabel-font-size': `var(--sscds-font-size-elementlabel-${size})`,\n    '--sscds-elementlabel-font-weight': isStrong\n      ? 'var(--sscds-font-weight-elementlabel-strong)'\n      : 'var(--sscds-font-weight-elementlabel-default)',\n    '--sscds-elementlabel-color':\n      color === 'link'\n        ? 'var(--sscds-color-link-default)'\n        : `var(--sscds-color-text-${color})`,\n    ...props.style,\n  };\n\n  return (\n    <ElementLabelRoot {...props} style={vars}>\n      {children}\n    </ElementLabelRoot>\n  );\n}\nElementLabel.displayName = 'Label';\n\nexport default ElementLabel;\n"],"names":["ElementLabelRoot","cov_138y8n9rri","s","styled","span","withConfig","displayName","componentId"],"mappings":"65EA2DA,MAAAA,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAAC,EAAAC,KAAAC,WAAAC,CAAAA,YAAAC,iCAAAA,0QAAAN,IAAAC,EAAA,CAAA"}