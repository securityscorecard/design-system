{"version":3,"file":"ElementCounter-B3r4wDeW.js","sources":["../../node_modules/ramda-adjunct/es/isPositive.js","../../src/components/Datatable/BatchModule/ElementCounter/ElementCounter.tsx"],"sourcesContent":["import { both, lt } from 'ramda';\nimport isNumber from './isNumber';\n\n/**\n * Checks if value is a positive `Number` primitive or object. Zero is not considered positive.\n *\n * @func isPositive\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.15.0|v1.15.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegative|isNegative}\n * @example\n *\n * RA.isPositive(1); // => true\n * RA.isPositive(Number.MAX_VALUE); // => true\n * RA.isPositive(-Infinity); // => false\n * RA.isPositive(NaN); // => false\n * RA.isPositive('5'); // => false\n */\nvar isPositive = both(isNumber, lt(0));\nexport default isPositive;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { isPositive } from 'ramda-adjunct';\nimport styled from 'styled-components';\n\nimport { Text } from '../../../Text';\nimport { abbreviateNumber, getColor, getSpace } from '../../../../utils';\nimport { DropdownMenu } from '../../../_internal/BaseDropdownMenu';\nimport { Icon } from '../../../Icon';\nimport { SSCIconNames } from '../../../../theme/icons/icons.enums';\nimport { DatatableStore } from '../../Datatable.store';\nimport { ElementCounterProps } from './ElementCounter.types';\nimport { Inline } from '../../../layout';\nimport { SpaceSizes } from '../../../../theme';\n\nconst SelectionButton = styled.button`\n  display: inline-flex;\n  align-self: center;\n  justify-content: center;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  height: 100%;\n  padding: ${getSpace(SpaceSizes.xs)};\n  font-size: var(--sscds-font-size-elementlabel-md);\n  color: ${getColor('neutral.800')};\n\n  &:hover {\n    color: ${getColor('primary.500')};\n  }\n`;\n\nexport const getCounterContent = (\n  totalLength: number,\n  selectedLength = 0,\n): React.ReactElement => (\n  <span data-testid=\"counter-content\">\n    {isPositive(selectedLength) && isPositive(totalLength)\n      ? `${abbreviateNumber(selectedLength)} of ${abbreviateNumber(\n          totalLength,\n        )} selected`\n      : isPositive(totalLength)\n      ? abbreviateNumber(totalLength)\n      : 'No data'}\n  </span>\n);\n\nfunction ElementCounterWrapper({ children, ...props }) {\n  return (\n    <Inline align=\"center\" gap={SpaceSizes.xs} {...props}>\n      {children}\n    </Inline>\n  );\n}\nElementCounterWrapper.displayName = 'ElementCounterWrapper';\n\nconst ElementCounter = ({\n  dataSize,\n  hasSelection,\n  hasOnlyPerPageSelection,\n}: ElementCounterProps) => {\n  const { selectedIds, hasExclusiveSelection } = DatatableStore.useState(\n    (s) => ({\n      selectedIds: s.selectedIds,\n      hasExclusiveSelection: s.hasExclusiveSelection,\n    }),\n  );\n\n  const [localSelectedLength, setLocalSelectedLength] = useState(\n    selectedIds.length || 0,\n  );\n\n  useEffect(() => {\n    setLocalSelectedLength(selectedIds.length);\n  }, [selectedIds]);\n\n  const computedSelectedLength = hasExclusiveSelection\n    ? dataSize - localSelectedLength\n    : localSelectedLength;\n\n  const content = getCounterContent(dataSize, computedSelectedLength);\n\n  const handleSelectAllClick = () => {\n    setLocalSelectedLength(0);\n    DatatableStore.update((s) => {\n      s.hasExclusiveSelection = true;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleSelectNoneClick = () => {\n    setLocalSelectedLength(0);\n    DatatableStore.update((s) => {\n      s.hasExclusiveSelection = false;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  if (!hasSelection) {\n    return (\n      <ElementCounterWrapper>\n        <Text size=\"md\" variant=\"secondary\">\n          {content}\n        </Text>\n      </ElementCounterWrapper>\n    );\n  }\n\n  if (hasOnlyPerPageSelection) {\n    return (\n      <ElementCounterWrapper>\n        <Text size=\"md\" variant=\"secondary\">\n          {content}\n        </Text>\n        {localSelectedLength > 0 && (\n          <SelectionButton\n            aria-label=\"Select None\"\n            title=\"Select None\"\n            type=\"button\"\n            onClick={handleSelectNoneClick}\n          >\n            <Icon name={SSCIconNames.times} size=\"sm\" />\n          </SelectionButton>\n        )}\n      </ElementCounterWrapper>\n    );\n  }\n\n  return (\n    <ElementCounterWrapper>\n      <Text size=\"md\" variant=\"secondary\">\n        {content}\n      </Text>\n      {dataSize > 0 && (\n        <DropdownMenu\n          actions={[\n            {\n              name: 'select-all',\n              label: 'Select All',\n              onClick: handleSelectAllClick,\n            },\n            {\n              name: 'select-none',\n              label: 'Select None',\n              onClick: handleSelectNoneClick,\n            },\n          ]}\n          paneWidth={140}\n        >\n          <SelectionButton\n            aria-label=\"Selection options\"\n            onClick={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <Icon\n              data-testid=\"selection-dropdown\"\n              name={SSCIconNames.angleDown}\n              size=\"sm\"\n            />\n          </SelectionButton>\n        </DropdownMenu>\n      )}\n    </ElementCounterWrapper>\n  );\n};\n\nElementCounter.propTypes = {\n  dataSize: PropTypes.number.isRequired,\n  hasSelection: PropTypes.bool.isRequired,\n  hasOnlyPerPageSelection: PropTypes.bool.isRequired,\n};\n\nexport default ElementCounter;\n"],"names":["isPositive","both","isNumber","lt","cov_1ru0yov8wp","path","hash","global","gcv","coverageData","coverage","actualCoverage","SelectionButton","s","styled","button","withConfig","displayName","componentId","getSpace","SpaceSizes","xs","hasOnlyPerPageSelection","hasExclusiveSelection","totalLength","selectedLength","b","selectedIds","f","jsx","children","setLocalSelectedLength","useEffect","abbreviateNumber","computedSelectedLength","content","dataSize","handleSelectAllClick","ElementCounterWrapper","props","Inline","align","gap","ElementCounter","hasSelection","DatatableStore","useState","localSelectedLength","length","label","e","getCounterContent","isRequired","PropTypes"],"mappings":"soBAsBA,IAAIA,EAAaC,EAAKC,EAAUC,EAAG,CAAC,CAAC,ECPA,SAAAC,GAAA,CAAA,IAAAC,EAAA,qHAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,qHAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,wBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,oHAAA,EAAA,MAAA,CAAA,YAAA,WAAA,YAAA,aAAA,SAAA,OAAA,mBAAA,WAAA,WAAA,eAAA,OAAA,eAAA,iBAAA,SAAA,aAAA,kBAAA,SAAA,aAAA,cAAA,cAAA,KAAA,oBAAA,cAAA,iBAAA,wBAAA,WAAA,QAAA,iBAAA,WAAA,eAAA,0BAAA,cAAA,wBAAA,IAAA,sBAAA,yBAAA,SAAA,yBAAA,UAAA,uBAAA,SAAA,0BAAA,wBAAA,QAAA,OAAA,QAAA,UAAA,IAAA,iBAAA,YAAA,YAAA,SAAA,aAAA,MAAA,EAAA,SAAA,m2EAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,EAAA,UAAAO,CAAAA,OAAAA,GAAAA,CAAA,CAAAP,EAkDjC,EAlDiC,MAAAQ,GAAAR,EAAA,EAAAS,EAAA,CAAA,IAAAC,EAAAC,OAAAC,WAAAC,CAAAA,8CAAAC,YAAA,cAAA,CAAA,EAAA,CAAA,sIAAA,2DAAA,kBAAA,IAAA,EAsCrCC,EAAAC,EAAAC,EAAA,iBAGwB,EAGtBC,EAAAA,aAAAA,CAAAA,GAAAA,IAAAA,EAAAA,CAAAA,UAEqBC,EAAAA,CAAsBC,EACjCC,GAAArB,EAAA,EAAAsB,EACSC,CAAAA,EAAAA,CAAAA,IAAAA,MAEjBvB,EAAA,EAAAwB,EAAA,CAAA,IAAAxB,IAAAS,OAAAgB,EAAA,IACF,QAAA,cAAA,kBAEAC,UAAA1B,IAAAsB,EAAA,CAAA,EAAA,CAAA,IAAA1B,EAA4B+B,CAAAA,IAAAA,EAAAA,EAAAA,UAAAA,EAAAA,CAC1BJ,IAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAGFK,GAAAA,EAAgBP,CAAA,CAAA,OAAAQ,EACdF,CACEJ,CAAAA,cAAAA,IAAAA,EAEEO,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,GAAAA,EAAAA,EAAAA,UAIAC,EAA4BC,CAAAA,IAAAA,EAAAA,EAAAA,EAE5BC,CAAAA,EAAAA,CAAAA,IAAAA,YAAAA,CACJN,GAGElB,SAA4ByB,EAAA,CAAAR,SAAAA,EAAA,GAAAS,CAAA,EAAA,CAAAnC,OAAAA,EAAA,EAAAwB,EAAAxB,CAAAA,IAAAA,EAAA,EAAAS,EAAA,CAAA,IAEhCgB,EAAAA,IAAAW,EAAA,CAAAC,MAAA,SAAAC,IAAAtB,EAAAC,GAAA,GAAAkB,EAEAT,SAAAA,CAAA,CACEC,CAEElB,CAAAA,IAAAA,OACAA,EAA4BI,YAAA,wBAAAb,EAAAS,EAAAA,OAC7B,MACH8B,EAAAA,CAAA,CAEAP,SAAAA,EAEIQ,aAAAA,EAMJtB,wBAAAA,CAE6B,IAAA,CAAAlB,EAAA,EAAAwB,EAC3B,CAAA,IAAA,KAAA,CAAAD,YAAAA,yBAEI,GAAAvB,EAAA,EAAAS,EAAA,CAAA,IAAAgC,EAAAC,SAAAjC,IAAAT,EAAA,EAAAwB,OAAAxB,EAAA,EAAAS,EAAA,CAAA,IAAA,CAGCkC,0BAUHxB,sBAAAV,EAAAU,qBAEJ,EAEA,GAKgB,CAAAwB,EACThB,CAAA,GAAA3B,IAAAS,EACCiC,CAAAA,IAAAA,EAAA,UACE1C,EAAA,EAAAsB,EAAA,CAAA,EAAA,CAAA,IAAAC,EACQqB,SAAA5C,EAAA,EAAAsB,EAAA,CAAA,EAAA,CAAA,IAAA,GAAA,GAAAtB,EAAA,EAAAS,OAEGwB,YAEX,IAAA,CAAAjC,IAAAwB,EAAA,CAAA,IAAAxB,EAAAS,EAAAA,QAAAkB,EACQJ,EAAAqB,MAAA,CAAA,EAAA,CACNC,CAAO,CAAA,EAET,MAEFf,GAAA9B,EAAA,EAAAS,yBAKIqC,EAAiBH,IAAA3C,EAAA,EAAAsB,EACnBqB,CAAAA,EAAAA,CAAAA,IAAAA,IAYZZ,GAAA/B,IAAAS,EAAA,EAAA,IAAAsC,EAAAf,EAAAF,CAAA,GAAA9B,IAAAS,EAAA,EAAA,IAGEuB,MAAAA,EAA2BgB,IAAAA,CAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAC3BR,EAAAA,IAAAA,EAA6BQ,CAAAA,EAAAA,IAAAA,QAC7B9B,EAAAA,OAAyB+B,2BAC3BxC,EAAAU,sBAAA,GAAAnB,IAAAS,EAAA,EAAA,IAEe8B,EAAAA,wBAAAA","x_google_ignoreList":[0]}