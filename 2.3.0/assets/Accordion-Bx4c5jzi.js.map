{"version":3,"file":"Accordion-Bx4c5jzi.js","sources":["../../../src/components/Accordion/Accordion.types.ts","../../../src/components/Accordion/AccordionCollapsible.tsx","../../../src/components/Accordion/Accordion.tsx"],"sourcesContent":["import { ReactNode } from 'react';\nimport PropTypes from 'prop-types';\n\nexport type AccordionItemId = string | number;\n\nexport type AccordionItem = {\n  title: string | ReactNode;\n  content: ReactNode;\n  isOpen?: boolean;\n  id: AccordionItemId;\n};\n\nexport interface AccordionCollapsibleProps {\n  className?: string;\n  isOpen: boolean;\n  title: ReactNode;\n  handleHeaderClick?: (index?: AccordionItemId) => void;\n  id: AccordionItemId;\n  children: ReactNode;\n}\n\nexport interface AccordionProps {\n  isCollapsedOnOpen?: boolean;\n  items: AccordionItem[];\n  className?: string;\n  openItems?: AccordionItemId[];\n  onChange?: (openIds: AccordionItemId[]) => void;\n}\n\nexport const AccordionItemIdPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.number,\n]);\n\nexport const AccordionItemPropType = PropTypes.exact({\n  title: PropTypes.node.isRequired,\n  content: PropTypes.node.isRequired,\n  isOpen: PropTypes.bool,\n  id: AccordionItemIdPropType.isRequired,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { IconTypes, SSCIconNames } from '../../theme/icons/icons.enums';\nimport { getColor, pxToRem } from '../../utils';\nimport { Icon } from '../Icon';\nimport { TextSizes } from '../Text/Text.enums';\nimport {\n  AccordionCollapsibleProps,\n  AccordionItemId,\n  AccordionItemIdPropType,\n} from './Accordion.types';\nimport { Inline, Padbox } from '../layout';\nimport { SpaceSizes } from '../../theme';\nimport { Text } from '../Text';\n\nconst Header = styled(Padbox)`\n  cursor: pointer;\n  border-bottom: 1px solid ${getColor('neutral.300')};\n  display: flex;\n  align-items: center;\n  flex: 1;\n  padding: 0.75rem 0;\n  font-family: inherit;\n  font-size: 1rem;\n  line-height: 1.5;\n\n  &:hover {\n    background-color: rgb(0 0 0 / 4%);\n  }\n`;\n\nconst Content = styled.div`\n  padding: 1rem 0;\n`;\n\nconst IconWrapper = styled(Padbox)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${pxToRem(20)};\n  height: ${pxToRem(20)};\n`;\nconst StyledIcon = styled(Icon)`\n  transition: transform 200ms;\n  height: 1em;\n`;\n\nconst AccordionCollapsible = ({\n  children,\n  className,\n  handleHeaderClick,\n  isOpen = false,\n  id,\n  title,\n}: AccordionCollapsibleProps) => {\n  const handleKeyDown = (\n    e: React.KeyboardEvent<HTMLDivElement>,\n    itemId?: AccordionItemId,\n  ) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      handleHeaderClick(itemId);\n    }\n  };\n  return (\n    <div className={className}>\n      <Header\n        paddingSize={SpaceSizes.sm}\n        role=\"button\"\n        tabIndex={0}\n        onClick={() => handleHeaderClick(id)}\n        onKeyDown={(e) => handleKeyDown(e, id)}\n      >\n        <Inline align=\"center\" gap={SpaceSizes.md}>\n          <IconWrapper paddingSize={SpaceSizes.xxs}>\n            <StyledIcon\n              name={SSCIconNames.angleRight}\n              rotation={isOpen ? 90 : undefined}\n              type={IconTypes.ssc}\n            />\n          </IconWrapper>\n          <Text as=\"div\" size={TextSizes.lg}>\n            {title}\n          </Text>\n        </Inline>\n      </Header>\n      {isOpen && (\n        <Content>\n          <Text as=\"div\" size={TextSizes.md}>\n            {children}\n          </Text>\n        </Content>\n      )}\n    </div>\n  );\n};\n\nAccordionCollapsible.propTypes = {\n  title: PropTypes.node.isRequired,\n  handleHeaderClick: PropTypes.func.isRequired,\n  id: AccordionItemIdPropType.isRequired,\n  className: PropTypes.string,\n  isOpen: PropTypes.bool,\n};\n\nexport default AccordionCollapsible;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { equals, filter, includes, pipe, pluck, propEq, reject } from 'ramda';\nimport cls from 'classnames';\n\nimport { Stack } from '../layout';\nimport {\n  AccordionItem,\n  AccordionItemId,\n  AccordionItemIdPropType,\n  AccordionItemPropType,\n  AccordionProps,\n} from './Accordion.types';\nimport AccordionCollapsible from './AccordionCollapsible';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst pickOpen: (items: AccordionItem[]) => AccordionItemId[] = pipe(\n  filter(propEq('isOpen', true)),\n  pluck('id'),\n);\n\nexport function filterState(\n  state: AccordionItemId[],\n  item: AccordionItemId,\n  isCollapsedOnOpen: boolean,\n) {\n  if (includes(item, state)) {\n    return reject(equals(item), state);\n  }\n  if (isCollapsedOnOpen) {\n    return [item];\n  }\n\n  return [...state, item];\n}\n\nconst Accordion = React.forwardRef<HTMLDivElement, AccordionProps>(\n  (\n    {\n      isCollapsedOnOpen = true,\n      items,\n      openItems,\n      className,\n      onChange,\n      ...props\n    },\n    ref,\n  ) => {\n    const [openIds, setOpenIds] = useState(pickOpen(items));\n\n    useEffect(() => {\n      if (openItems !== undefined) {\n        setOpenIds(isCollapsedOnOpen ? [openItems[0]] : openItems);\n      }\n    }, [openItems, isCollapsedOnOpen]);\n\n    const handleClick = useCallback(\n      (id: AccordionItemId) => {\n        const nextState = filterState(openIds, id, isCollapsedOnOpen);\n        setOpenIds(nextState);\n        onChange?.(nextState);\n      },\n      [openIds, setOpenIds, onChange, isCollapsedOnOpen],\n    );\n\n    return (\n      <Stack {...props} ref={ref} className={cls(CLX_COMPONENT, className)}>\n        {items.map(({ title, id, content }) => (\n          <AccordionCollapsible\n            key={`accordion-item-${id}`}\n            handleHeaderClick={handleClick}\n            id={id}\n            isOpen={includes(id, openIds)}\n            title={title}\n          >\n            {content}\n          </AccordionCollapsible>\n        ))}\n      </Stack>\n    );\n  },\n);\n\nAccordion.propTypes = {\n  items: PropTypes.arrayOf(AccordionItemPropType).isRequired,\n  isCollapsedOnOpen: PropTypes.bool,\n  className: PropTypes.string,\n  openItems: PropTypes.arrayOf(AccordionItemIdPropType),\n  onChange: PropTypes.func,\n};\n\nexport default Accordion;\n"],"names":["AccordionItemIdPropType","PropTypes","oneOfType","string","number","AccordionItemPropType","exact","title","node","isRequired","content","isOpen","bool","id","Header","cov_1ciygyby6z","s","styled","Padbox","withConfig","displayName","componentId","getColor","handleHeaderClick","StyledIcon","Icon","AccordionCollapsible","children","setOpenIds","pickOpen","cov_2lt8uq7irg","pipe","filter","propEq","pluck","filterState","state","item","isCollapsedOnOpen","f","includes","b","reject","equals","onChange","items","props","ref","useEffect","openItems"],"mappings":"ouBA6BaA,MAAAA,EAA0BC,EAAUC,UAAU,CACzDD,EAAUE,OACVF,EAAUG,MAAM,CACjB,EAEYC,EAAwBJ,EAAUK,MAAM,CACnDC,MAAON,EAAUO,KAAKC,WACtBC,QAAST,EAAUO,KAAKC,WACxBE,OAAQV,EAAUW,KAClBC,GAAIb,EAAwBS,UAC9B,CAAC,ECeCI,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,kGAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,kGAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA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AAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,cAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gceAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,sFAAAA,EAAAA,MAAAA,CAAAA,QAAAA,YAAAA,YAAAA,WAAAA,YAAAA,aAAAA,QAAAA,KAAAA,UAAAA,YAAAA,aAAAA,OAAAA,QAAAA,EAAAA,SAAAA,sSAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,EAAAA,UAAAA,CAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EAtBQ,MAAAC,GAAAC,EAAA,EAAAd,EAAAe,CAAAA,IAAAA,EAAAC,EAAAC,EAAAC,SAAAA,EAAAA,CAAAA,EAAAA,UASUC,SAAAA,EAAAC,EAAAC,EAAAC,EAAAR,CAMtB,OANsBA,EAAA,EAAAS,EAAA,CAAA,IAAAT,IAAAd,EAMtB,CAAA,IAAAwB,EAAAH,EAAAD,CAAA,GAAAN,EAAA,EAAAW,UAAAX,EAAA,EAAAd,EAAA,CAAA,IAGA0B,EAAAC,EAAAN,CAAA,EAAAD,CAAA,IAAAN,EAAA,EAAAW,EAAAX,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAAd,EAAA,CAAA,IAGEsB,GAAAR,EAAAW,EAAAA,EAAAX,CAAAA,EAAAA,CAAAA,IAAAA,EAAA,EAAAd,OACEY,CAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,QAIJQ,EAAAC,CAAA,GAEI,CAEAO,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,WAAAA,CAAAA,CAKJN,kBAAAA,GAAAR,IAAAW,EAAA,CAAA,EAAA,CAAA,IAAA,IAEgBI,MAAAA,EAAEtC,UAAAA,EAAOM,UAAAA,EAAIH,SAAAA,EAa/B,GAAAoC,CAGoB,EAAAC,IAAAjB,CAAAA,EAAAS,EAAAA,EAGCpC,CAAAA,IAAAA,KAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,SAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,IAGvB6C,EAAAA,UAAA,IAAA,CAAAlB,EAAA,EAAAS,EAAAT,CAAAA,IAAAA,EAAAd,EAAAA,OAEAiC,YAAAnB,IAAAW,EAAAX,CAAAA,EAAAA,CAAAA,IAAAA,EAAAd,EAAAA"}