{"version":3,"file":"Tooltip-BT_E9yk_.js","sources":["../../node_modules/ramda-adjunct/es/isTruthy.js","../../node_modules/ramda-adjunct/es/isFalsy.js","../../src/hooks/useCalculatePortalPlacements.enums.ts","../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import { curryN } from 'ramda';\n\n/**\n * In JavaScript, a `truthy` value is a value that is considered true\n * when evaluated in a Boolean context. All values are truthy unless\n * they are defined as falsy (i.e., except for `false`, `0`, `\"\"`, `null`, `undefined`, and `NaN`).\n *\n * @func isTruthy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://developer.mozilla.org/en-US/docs/Glossary/Truthy|truthy}, {@link RA.isFalsy|isFalsy}\n * @example\n *\n * RA.isTruthy({}); // => true\n * RA.isTruthy([]); // => true\n * RA.isTruthy(42); // => true\n * RA.isTruthy(3.14); // => true\n * RA.isTruthy('foo'); // => true\n * RA.isTruthy(new Date()); // => true\n * RA.isTruthy(Infinity); // => true\n */\nvar isTruthy = curryN(1, Boolean);\nexport default isTruthy;","import { complement } from 'ramda';\nimport isTruthy from './isTruthy';\n\n/**\n * A falsy value is a value that translates to false when evaluated in a Boolean context.\n * Falsy values are `false`, `0`, `\"\"`, `null`, `undefined`, and `NaN`.\n *\n * @func isFalsy\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2..0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link https://developer.mozilla.org/en-US/docs/Glossary/Falsy|falsy}, {@link RA.isTruthy|isTruthy}\n * @example\n *\n * RA.isFalsy(false); // => true\n * RA.isFalsy(0); // => true\n * RA.isFalsy(''); // => true\n * RA.isFalsy(null); // => true\n * RA.isFalsy(undefined); // => true\n * RA.isFalsy(NaN); // => true\n */\nvar isFalsy = complement(isTruthy);\nexport default isFalsy;","export const PortalPlacements = {\n  top: 'top',\n  bottom: 'bottom',\n  bottomLeft: 'bottom-left',\n  bottomRight: 'bottom-right',\n  left: 'left',\n  right: 'right',\n} as const;\n","import React from 'react';\nimport * as RadixTooltip from '@radix-ui/react-tooltip';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { pipe, prop } from 'ramda';\nimport { isFalsy } from 'ramda-adjunct';\n\nimport { Padbox } from '../layout';\nimport { getColor, getDepth, getRadii, pxToRem } from '../../utils';\nimport { TooltipProps } from './Tooltip.types';\nimport { useFloatingContext } from '../../contexts/FloatingContext';\n\ntype ContentProps = {\n  $width: TooltipProps['width'];\n  $isInFloatingElement: boolean;\n};\nconst Content = styled(RadixTooltip.Content)<ContentProps>`\n  border-radius: ${getRadii('default')};\n  color: ${getColor('neutral.900')};\n  background-color: ${getColor('neutral.0')};\n  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.25);\n  user-select: none;\n  animation-duration: 400ms;\n  animation-timing-function: cubic-bezier(0.16, 1, 0.3, 1);\n  will-change: transform, opacity;\n  width: ${pipe(prop('$width'), pxToRem)};\n  z-index: ${({ $isInFloatingElement, theme }) =>\n    $isInFloatingElement\n      ? getDepth('modal', { theme }) + 1\n      : getDepth('tooltip', { theme })};\n\n  &[data-state='delayed-open'][data-side='top'] {\n    animation-name: slideDownAndFade;\n  }\n  &[data-state='delayed-open'][data-side='right'] {\n    animation-name: slideLeftAndFade;\n  }\n  &[data-state='delayed-open'][data-side='bottom'] {\n    animation-name: slideUpAndFade;\n  }\n  &[data-state='delayed-open'][data-side='left'] {\n    animation-name: slideRightAndFade;\n  }\n  .TooltipArrow {\n    fill: white;\n  }\n\n  @keyframes slideUpAndFade {\n    from {\n      opacity: 0;\n      transform: translateY(2px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideRightAndFade {\n    from {\n      opacity: 0;\n      transform: translateX(-2px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n\n  @keyframes slideDownAndFade {\n    from {\n      opacity: 0;\n      transform: translateY(-2px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes slideLeftAndFade {\n    from {\n      opacity: 0;\n      transform: translateX(2px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n`;\n\nconst Tooltip = ({\n  children,\n  defaultIsPopupDisplayed,\n  placement = 'bottom',\n  popup,\n  width = 270,\n  enterDelay = 100,\n  wrapperEl: Wrapper = 'span',\n  ...props\n}: TooltipProps) => {\n  const side = placement.split('-')[0];\n  const align = placement.endsWith('-start')\n    ? 'start'\n    : placement.endsWith('-end')\n    ? 'end'\n    : 'center';\n  const isInFloatingElement = useFloatingContext() ?? false;\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  if (isFalsy(popup)) return <>{children}</>;\n\n  return (\n    <RadixTooltip.Root\n      defaultOpen={defaultIsPopupDisplayed}\n      delayDuration={enterDelay}\n    >\n      <RadixTooltip.Trigger asChild>\n        <Wrapper {...props}>{children}</Wrapper>\n      </RadixTooltip.Trigger>\n      <RadixTooltip.Portal>\n        <Content\n          $isInFloatingElement={isInFloatingElement}\n          $width={width}\n          align={align}\n          alignOffset={12}\n          arrowPadding={4}\n          className=\"ssc-ui-styled\"\n          data-testid=\"ssc-tooltip\"\n          side={side as 'bottom' | 'top' | 'left' | 'right'}\n          sideOffset={2}\n        >\n          <Padbox paddingSize=\"md\">{popup}</Padbox>\n          <RadixTooltip.Arrow className=\"TooltipArrow\" height={6} width={12} />\n        </Content>\n      </RadixTooltip.Portal>\n    </RadixTooltip.Root>\n  );\n};\n\nTooltip.propTypes = {\n  popup: PropTypes.node,\n  className: PropTypes.string,\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\n  width: PropTypes.oneOf(['auto', PropTypes.oneOfType([PropTypes.number])]),\n  defaultIsPopupDisplayed: PropTypes.bool,\n};\n\nexport default Tooltip;\n"],"names":["isTruthy","curryN","isTruthy$1","isFalsy","complement","PortalPlacements","top","bottom","bottomLeft","bottomRight","left","right","theme","getRadii","getColor","pipe","prop","pxToRem","$isInFloatingElement","props","getDepth","cov_2efntljtal","s"],"mappings":"kZAyBA,IAAIA,EAAWC,EAAO,EAAG,OAAO,EAChC,MAAAC,EAAeF,ECFf,IAAIG,EAAUC,EAAWJ,CAAQ,67BCxBpBK,MAAAA,GAAAA,EAAAA,EAAAA,EAAmB,CAAA,IAAA,CAC9BC,IAAK,MACLC,OAAQ,SACRC,WAAY,cACZC,YAAa,eACbC,KAAM,OACNC,MAAO,OACT,kyKCqB0B,MAAEC,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,WAAAA,CAAAA,YAAAA,mBAAAA,YAAAA,aAAAA,CACA,EAAAC,CAAAA,iBAAAA,UAAAA,qBAAAA,+KAAAA,YAAAA,mxBAAAA,EAAAA,EAAA,SAAA,EAAED,EAAAA,aAAAA,EAAQE,EAAA,WAAA,EAoE5BC,EAAAC,EAAA,QAAA,EAAAC,CAAA,EACK,CAAA,CAAAC,qBAAAA,EAAAN,MAAAA,CAAA,4CAEVO,EAAAA,QAAAA,CAAAA,MAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IACeC,EAAA,UAAA,CAAAR,MAAAA,CAAA,CAAA,GAAA,GAAAS,EAAA,EAAAC","x_google_ignoreList":[0,1]}