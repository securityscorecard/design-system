{"version":3,"file":"SemanticModal-BfK3j95c.js","sources":["../../src/components/SemanticModal/SemanticModal.enums.ts","../../src/components/SemanticModal/SemanticModal.tsx"],"sourcesContent":["export const SemanticModalVariants = {\n  success: 'success',\n  warn: 'warn',\n  error: 'error',\n  ban: 'ban',\n} as const;\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { SemanticModalVariants } from './SemanticModal.enums';\nimport { RenderButtonProps, SemanticModalProps } from './SemanticModal.types';\nimport { Modal, ModalEnums } from '../Modal';\nimport { Button, ButtonEnums } from '../Button';\nimport { ButtonColors } from '../Button/Button.enums';\nimport { Icon } from '../Icon';\nimport {\n  AbsoluteLinkActionKind,\n  ActionKinds,\n  ActionKindsPropType,\n  RelativeLinkActionKind,\n} from '../../types/action.types';\nimport * as CustomPropTypes from '../../types/customPropTypes';\nimport { getColor, pxToRem } from '../../utils';\nimport { Center, Inline, Padbox, Stack } from '../layout';\nimport { Color, SpaceSizes } from '../../theme';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { H4 } from '../Heading';\nimport { Text } from '../Text';\n\nconst colorVariants: Record<keyof typeof SemanticModalVariants, Color> = {\n  [SemanticModalVariants.success]: 'success.500',\n  [SemanticModalVariants.warn]: 'warning.500',\n  [SemanticModalVariants.error]: 'error.500',\n  [SemanticModalVariants.ban]: 'error.500',\n};\n\nconst iconVariants = {\n  [SemanticModalVariants.success]: SSCIconNames.checkCircle,\n  [SemanticModalVariants.warn]: SSCIconNames.exclTriangle,\n  [SemanticModalVariants.error]: SSCIconNames.error,\n  [SemanticModalVariants.ban]: SSCIconNames.ban,\n};\n\nconst StyledIcon = styled(Icon)<{ $variant?: SemanticModalProps['variant'] }>`\n  color: ${({ $variant }) => getColor(colorVariants[$variant])};\n  font-size: ${pxToRem(48)};\n`;\n\nconst renderButton = ({\n  action,\n  color,\n  isLoading,\n  loadingText,\n  variant,\n}: RenderButtonProps) => (\n  <Button\n    key={action.name}\n    color={color}\n    href={(action as AbsoluteLinkActionKind<[React.MouseEvent]>).href}\n    isLoading={isLoading}\n    loadingText={loadingText}\n    name={action.name}\n    to={(action as RelativeLinkActionKind<[React.MouseEvent]>).to}\n    variant={variant}\n    onClick={action.onClick}\n  >\n    {action.label}\n  </Button>\n);\n\nconst SemanticModal = forwardRef<HTMLDivElement, SemanticModalProps>(\n  (\n    {\n      title,\n      message,\n      actions,\n      onClose,\n      variant = SemanticModalVariants.success,\n      primaryButtonColor = ButtonEnums.ButtonColors.primary,\n      isPrimaryButtonLoading = false,\n      loadingText = '',\n    },\n    ref,\n  ) => {\n    return (\n      <Modal ref={ref} size={ModalEnums.ModalSizes.sm} onClose={onClose}>\n        <Center isTextCentered>\n          <Stack gap={SpaceSizes.lg}>\n            <div>\n              <StyledIcon $variant={variant} name={iconVariants[variant]} />\n            </div>\n            <Stack gap={SpaceSizes.md}>\n              <H4>{title}</H4>\n              <Text as=\"div\" size=\"md\">\n                {message}\n              </Text>\n              <Padbox paddingSize={SpaceSizes.md}>\n                <Inline gap={SpaceSizes.md} justify=\"center\">\n                  {actions.map(\n                    (action: ActionKinds<[React.MouseEvent]>, index: number) =>\n                      isNotUndefined(action) &&\n                      renderButton({\n                        action,\n                        variant:\n                          index === 0\n                            ? ButtonEnums.ButtonVariants.outline\n                            : ButtonEnums.ButtonVariants.solid,\n                        color:\n                          index === 0\n                            ? ButtonEnums.ButtonColors.primary\n                            : primaryButtonColor,\n                        isLoading: index === 0 ? false : isPrimaryButtonLoading,\n                        loadingText,\n                      }),\n                  )}\n                </Inline>\n              </Padbox>\n            </Stack>\n          </Stack>\n        </Center>\n      </Modal>\n    );\n  },\n);\n\nexport default SemanticModal;\n\nSemanticModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  message: PropTypes.node.isRequired,\n  actions: CustomPropTypes.tuple(ActionKindsPropType, ActionKindsPropType)\n    .isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(Object.values(SemanticModalVariants)),\n  primaryButtonColor: PropTypes.oneOf(Object.values(ButtonColors)),\n  isPrimaryButtonLoading: PropTypes.bool,\n  loadingText: PropTypes.string,\n};\n"],"names":["cov_1fl0zyizo6","actualCoverage","SemanticModalVariants","success","warn","error","ban","loadingText","checkCircle","SSCIconNames","exclTriangle","iconVariants","cov_2bkzkmzbxl","s","$variant","pxToRem","isLoading","variant","title","message","actions","onClose","primaryButtonColor","Button","color","href","action","name","to","onClick","forwardRef","SemanticModal","CustomPropTypes","ActionKindsPropType","isRequired","values","f"],"mappings":"6sDAAO,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,EAAME,MAAAA,GAAAA,EAAAA,EAAAA,OAAwB,CACnCC,QAAS,UACTC,KAAM,OACNC,MAAO,QACPC,IAAK,KACP,GCuByBD,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,6FAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,6FAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,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"}