{"version":3,"file":"index-B-CeicLq.js","sources":["../../../src/components/layout/Container/Container.tsx","../../../src/components/layout/Container/index.ts","../../../src/components/layout/Row/Row.tsx","../../../src/components/layout/Row/index.ts","../../../src/components/layout/Col/Col.tsx","../../../src/components/layout/Col/index.ts","../../../src/components/layout/Cluster/index.ts","../../../src/components/layout/Grid/Grid.tsx","../../../src/components/layout/Grid/index.ts","../../../src/components/layout/Center/Center.tsx","../../../src/components/layout/Center/index.ts","../../../src/components/layout/Surface/Surface.tsx","../../../src/components/layout/Surface/index.ts","../../../src/components/layout/index.ts"],"sourcesContent":["import styled from 'styled-components';\n\nimport { pxToRem } from '../../../utils';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\nconst Container = styled.div.attrs({ className: CLX_LAYOUT })`\n  margin: 0 auto;\n  width: ${({ theme }) => pxToRem(theme.layout.containerWidth)};\n`;\n\nexport default Container;\n","export { default as Container } from './Container';\n","import { ReactNode } from 'react';\nimport styled from 'styled-components';\n\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\nconst StyledRow = styled.div`\n  box-sizing: border-box;\n  margin: 0;\n  min-width: 0;\n  flex-wrap: wrap;\n  margin-inline: calc(var(--sscds-space-grid-gutter) / -2);\n  display: flex;\n`;\n\nconst Row = ({ children }: { children: ReactNode }) => (\n  <StyledRow className={CLX_LAYOUT}>{children}</StyledRow>\n);\n\nexport default Row;\n","export { default as Row } from './Row';\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport { ColProps } from './Col.types';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\nconst StyledCol = styled.div`\n  box-sizing: border-box;\n  margin: 0;\n  min-width: 0;\n  margin-inline-start: var(--sscds-col-margin-start);\n  padding-inline: calc(var(--sscds-space-grid-gutter) / 2);\n  flex: 1 1 auto;\n  max-width: var(--sscds-col-width);\n`;\n\nconst Col = ({ children, cols = 'auto', offset = 0 }: ColProps) => (\n  <StyledCol\n    className={CLX_LAYOUT}\n    style={{\n      '--sscds-col-margin-start': `calc(100% / 12 * ${offset})`,\n      '--sscds-col-width':\n        cols === 'auto' ? 'auto' : `calc(${cols} / 12 * 100%)`,\n    }}\n  >\n    {children}\n  </StyledCol>\n);\n\nCol.propTypes = {\n  cols: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.oneOf<'auto'>(['auto']),\n  ]),\n  offset: PropTypes.number,\n};\n\nexport default Col;\n","export { default as Col } from './Col';\nexport * from './Col.types';\n","export { default as Cluster } from './Cluster';\n","import React, { ReactNode } from 'react';\nimport styled, { css } from 'styled-components';\nimport PropTypes, { ReactComponentLike } from 'prop-types';\nimport { Property } from 'csstype';\nimport { prop } from 'ramda';\nimport cls from 'classnames';\n\nimport { getSpace } from '../../../utils';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { SpaceSize } from '../../../theme/space.types';\nimport { AlignItemsPropType } from '../../../types/flex.types';\nimport { CLX_LAYOUT } from '../../../theme/constants';\nimport { useLogger } from '../../../hooks/useLogger';\n\ninterface GridWrapperProps {\n  $overflow: 'hidden' | 'visible';\n}\ninterface GridParentProps {\n  $gap?: SpaceSize;\n  $align?: Property.AlignItems;\n  $cols?: number;\n}\n\nexport interface GridProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Whitespace around each child of the Inline\n   */\n  gap?: GridParentProps['$gap'];\n  /**\n   * Number of columns in the grid\n   */\n  cols?: GridParentProps['$cols'];\n  /**\n   * Vertical alignment of elements inside Inline\n   */\n  align?: GridParentProps['$align'];\n  /**\n   * Tag or component reference for wrapper element\n   */\n  wrapperEl?: ReactComponentLike;\n  /**\n   * Overflow type of the wrapper element\n   */\n  wrapperOverflow?: GridWrapperProps['$overflow'];\n  /**\n   * Tag or component reference for parent element\n   */\n  parentEl?: ReactComponentLike;\n  className?: string;\n  children: ReactNode;\n}\n\nconst GridWrapper = styled.div<GridWrapperProps>`\n  overflow: ${prop('$overflow')};\n`;\nconst GridParent = styled.div<GridParentProps>(\n  ({ $cols, $gap, $align, theme }) => {\n    const gapSize = getSpace($gap, { theme });\n\n    return css`\n      display: flex;\n      flex-wrap: wrap;\n      align-items: ${$align};\n      margin: calc(${gapSize} / -2);\n\n      & > * {\n        width: calc(${100 / $cols}% - ${gapSize});\n        margin: calc(${gapSize} / 2);\n      }\n    `;\n  },\n);\n\nconst Grid = ({\n  children,\n  gap,\n  align,\n  cols,\n  parentEl,\n  wrapperEl,\n  wrapperOverflow = 'hidden',\n  ...props\n}: GridProps) => {\n  const { error } = useLogger('Grid');\n  if (cols === 1) {\n    error('Minimal number of columns is 2. Use Stack instead of Grid[cols=1]');\n    return null;\n  }\n  return (\n    <GridWrapper\n      $overflow={wrapperOverflow}\n      as={wrapperEl}\n      className={cls(CLX_LAYOUT, props?.className)}\n    >\n      <GridParent\n        $align={align}\n        $cols={cols}\n        $gap={gap}\n        as={parentEl}\n        {...props}\n      >\n        {children}\n      </GridParent>\n    </GridWrapper>\n  );\n};\n\nGrid.propTypes = {\n  gap: PropTypes.oneOf(Object.values(SpaceSizes)),\n  cols: PropTypes.number,\n  align: AlignItemsPropType,\n  wrapperEl: PropTypes.elementType,\n  parentEl: PropTypes.elementType,\n  wrapperOverflow: PropTypes.oneOf(['hidden', 'visible']),\n  className: PropTypes.string,\n};\n\nGrid.defaultProps = {\n  gap: SpaceSizes.none,\n  cols: 6,\n};\n\nexport default Grid;\n","export { default as Grid } from './Grid';\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { includes } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport { getSpace, pxToRem } from '../../../utils';\nimport { SpaceSize } from '../../../theme/space.types';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\nexport interface CenterProps {\n  /**\n   * Maximal content width\n   */\n  maxWidth?: number;\n  /**\n   * Gutters arround content. Gutters are not counted in maximal content width.\n   */\n  gutters?: SpaceSize;\n  /**\n   * Centers all children inside component\n   */\n  areChildrenCentered?: boolean;\n  /**\n   * Centers text in component\n   */\n  isTextCentered?: boolean;\n  className?: string;\n}\n\nconst Center = styled.div\n  .withConfig<CenterProps>({\n    shouldForwardProp: (prop) =>\n      !includes(prop, [\n        'maxWidth',\n        'gutters',\n        'areChildrenCentered',\n        'isTextCentered',\n      ]),\n  })\n  .attrs((props) => ({\n    ...props,\n    className: cls(CLX_LAYOUT, props?.className),\n  }))<CenterProps>`\n  box-sizing: content-box;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: ${({ maxWidth, theme }) =>\n    pxToRem(isNotUndefined(maxWidth) ? maxWidth : theme.layout.containerWidth)};\n  ${({ gutters, theme }) => {\n    const size = getSpace(gutters, { theme });\n\n    return `\n      padding-left: ${size};\n      padding-right: ${size};\n    `;\n  }};\n\n  ${({ areChildrenCentered }) =>\n    areChildrenCentered &&\n    `\n    display:flex;\n    flex-direction: column;\n    align-items: center;\n  `};\n\n  ${({ isTextCentered }) => isTextCentered && `text-align: center;`};\n`;\n\nCenter.propTypes = {\n  maxWidth: PropTypes.number,\n  gutters: PropTypes.oneOf(Object.values(SpaceSizes)),\n  areChildrenCentered: PropTypes.bool,\n  isTextCentered: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nCenter.defaultProps = {\n  gutters: SpaceSizes.none,\n  areChildrenCentered: false,\n  isTextCentered: false,\n};\n\nexport default Center;\n","export { default as Center } from './Center';\n","import {\n  CSSProperties,\n  ComponentPropsWithoutRef,\n  ReactNode,\n  forwardRef,\n} from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport clx from 'classnames';\n\nimport { Radii, getRadii } from '../../../utils';\n\nconst SurfaceBackgrounds = [\n  'default',\n  'white',\n  'dynamic',\n  'transparent',\n] as const;\nconst SurfaceRadii = ['none', 'sm', 'md', 'lg'] as const;\nconst SurfaceMode = ['light', 'dark'] as const;\n\nexport type SurfaceProps = {\n  children: ReactNode;\n  /** Background of the surface box */\n  background?: (typeof SurfaceBackgrounds)[number];\n  /** Corner rounding of the surface box */\n  radius?: (typeof SurfaceRadii)[number];\n  /** Size of the box shadow. Takes and integer, Bigger value, bigger size of the shadow */\n  elevation?: number;\n  /** Show border around the surface box */\n  hasBorder?: boolean;\n  /**\n   *  Switch color scheme for light or dark backgrounds\n   *\n   * @deprecated Replaced with design tokens for using dark mode add \".dark\" classname\n   * to Surface or its parent\n   */\n  mode?: (typeof SurfaceMode)[number];\n} & ComponentPropsWithoutRef<'div'>;\n\nconst SurfaceRoot = styled.div`\n  background: var(--sscds-background);\n  border-radius: var(--sscds-radius);\n  box-shadow: var(--sscds-elevation);\n  border: var(--sscds-border-width) solid var(--sscds-border-color);\n  transition: border-radius 300ms ease-in, background 300ms ease-in,\n    box-shadow 300ms ease-in;\n`;\nconst getBackground = (\n  background: (typeof SurfaceBackgrounds)[number],\n): string => {\n  switch (background) {\n    case 'dynamic':\n      return 'var(--sscds-color-background-surface-dynamic)';\n    case 'default':\n    case 'white':\n      return 'var(--sscds-color-background-surface-default)';\n    case 'transparent':\n    default:\n      return 'var(--sscds-color-clear)';\n  }\n};\n\nconst getShadow = (elevation: number) => {\n  return elevation === 0\n    ? 'none'\n    : `0px ${elevation * 2}px ${elevation * 6}px rgba(0 0 0/15%)`;\n};\n\nconst radiiMap: Record<\n  Exclude<(typeof SurfaceRadii)[number], 'none'>,\n  Exclude<Radii, 'circle' | 'half' | 'round'>\n> = {\n  sm: 'default',\n  md: 'double',\n  lg: 'large',\n};\n\nconst Surface = forwardRef<HTMLDivElement, SurfaceProps>(\n  (\n    {\n      background = 'default',\n      radius = 'sm',\n      elevation = 0,\n      hasBorder = false,\n      mode = 'light',\n      children,\n      style,\n      ...rest\n    },\n    ref,\n  ) => {\n    const theme = useTheme();\n    const cssVars: CSSProperties = {\n      '--sscds-background': getBackground(background),\n      '--sscds-radius':\n        radius === 'none' ? 0 : getRadii(radiiMap[radius], { theme }),\n      '--sscds-elevation': getShadow(elevation),\n      '--sscds-border-width': hasBorder ? '1px' : '0',\n      '--sscds-border-color':\n        background === 'dynamic'\n          ? 'var(--sscds-color-border-surface-dynamic)'\n          : 'var(--sscds-color-border-surface-default)',\n      ...style,\n    };\n\n    return (\n      <SurfaceRoot\n        ref={ref}\n        style={cssVars}\n        {...rest}\n        className={clx(rest.className, {\n          dark: mode === 'dark',\n        })}\n      >\n        {children}\n      </SurfaceRoot>\n    );\n  },\n);\n\nexport default Surface;\n","export { default as Surface } from './Surface';\n","// Layout grid components\nexport * from './Container';\nexport * from './Row';\nexport * from './Col';\n\n// Layout primitives\nexport * from './Padbox';\nexport * from './Stack';\nexport * from './Inline';\nexport * from './Cluster';\nexport * from './Grid';\nexport * from './Center';\nexport * from './Surface';\n"],"names":["Container","cov_2jhwgg4153","s","styled","div","attrs","className","CLX_LAYOUT","withConfig","displayName","componentId","theme","f","pxToRem","layout","containerWidth","cov_1mw5eysza5","actualCoverage","StyledRow","cov_1xvj58x38w","cov_24jju7o8th","StyledCol","cov_ppdqoz5y7","Col","offset","cols","b","cov_9ot3h7xxm","cov_t5lx9gxok","cov_ti9txhuq","path","hash","global","gcv","coverageData","coverage","elementType","GridParent","Grid","gapSize","getSpace","$gap","css","$align","$cols","cov_8dn0lhdcz","bool","Center","cov_myf1mn332","shouldForwardProp","prop","includes","props","number","cls","none","gutters","size","cov_9blvo65xi","style","cov_2b66d2nd8j","children","background","cov_1wymb3rnfy","cov_1dcuh009i"],"mappings":"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AA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,IAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA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AAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,IAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,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"}