{"version":3,"file":"Step-CDGPcsHY.js","sources":["../../node_modules/ramda/es/pathEq.js","../../src/components/Stepper/Stepper.enums.ts","../../src/components/Stepper/Stepper.context.ts","../../src/components/Stepper/Stepper.tsx","../../src/components/Stepper/StepBullet.tsx","../../src/components/Stepper/Step.tsx"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\nimport path from \"./path.js\";\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\n\nvar pathEq =\n/*#__PURE__*/\n_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\nexport default pathEq;","export const StepperOrientations = {\n  horizontal: 'horizontal',\n  vertical: 'vertical',\n} as const;\n","import { createContext } from 'react';\n\nimport { StepperContextValue } from './Stepper.types';\n\nexport const StepperContext = createContext<StepperContextValue>({});\n","import React, { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { pathEq } from 'ramda';\nimport cls from 'classnames';\n\nimport { SpaceSizes } from '../../theme';\nimport { Inline, Stack } from '../layout';\nimport { StepperProps } from './Stepper.types';\nimport { mergeRefs } from '../../utils/mergeRefs';\nimport { StepperContext } from './Stepper.context';\nimport { StepperOrientations } from './Stepper.enums';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useContainerQuery } from '../../hooks/useContainerQuery';\n\nconst SHOW_TEXT_BREAKPOINT = 'show-step-text';\n\nconst Stepper = forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<StepperProps>\n>(\n  (\n    {\n      children,\n      activeStep = 0,\n      showTextBreakpoint = 600,\n      orientation = StepperOrientations.horizontal,\n      areStepsExpanded = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const showTextQuery = useMemo(\n      () => ({\n        [SHOW_TEXT_BREAKPOINT]: { minWidth: showTextBreakpoint },\n      }),\n      [showTextBreakpoint],\n    );\n    const [query, containerRef] = useContainerQuery(showTextQuery);\n\n    const stepsArr: React.ReactElement[] = React.Children.toArray(\n      children,\n    ).filter(pathEq(['type', 'displayName'], 'Step'));\n    const steps = stepsArr.map((step, index) =>\n      React.cloneElement(step, {\n        ...step.props,\n        index,\n        shouldShowText:\n          activeStep === index ||\n          query[SHOW_TEXT_BREAKPOINT] ||\n          orientation === StepperOrientations.vertical,\n        isLast: index + 1 === stepsArr.length,\n      }),\n    );\n\n    const mergedRef = mergeRefs(ref, containerRef);\n\n    const context = useMemo(\n      () => ({\n        activeStep,\n        orientation,\n        areStepsExpanded,\n      }),\n      [activeStep, orientation, areStepsExpanded],\n    );\n\n    return (\n      <StepperContext.Provider value={context}>\n        {orientation === StepperOrientations.vertical ? (\n          <Stack\n            ref={mergedRef}\n            className={cls(CLX_COMPONENT, className)}\n            gap={SpaceSizes.sm}\n            {...props}\n          >\n            {steps}\n          </Stack>\n        ) : (\n          <Inline\n            ref={mergedRef}\n            align=\"flex-start\"\n            className={cls(CLX_COMPONENT, className)}\n            gap={SpaceSizes.sm}\n            {...props}\n          >\n            {steps}\n          </Inline>\n        )}\n      </StepperContext.Provider>\n    );\n  },\n);\n\nStepper.propTypes = {\n  activeStep: PropTypes.number,\n  showTextBreakpoint: PropTypes.number,\n  orientation: PropTypes.oneOf(Object.values(StepperOrientations)),\n  areStepsExpanded: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nexport default Stepper;\n","import PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nimport { getColor, pxToRem } from '../../utils';\nimport { width as checkWidth, svgPathData } from '../../theme/icons/check';\nimport { BulletCircleProps, StepBulletProps } from './Stepper.types';\n\nexport const bulletSize = 20;\n\nconst BulletWrapper = styled.span`\n  flex-shrink: 0;\n`;\n\nconst Bullet = styled.svg`\n  width: ${pxToRem(bulletSize)};\n  height: ${pxToRem(bulletSize)};\n  display: block;\n`;\n\nexport const BulletCircle = styled.circle<BulletCircleProps>`\n  stroke: ${getColor('primary.500')};\n  stroke-width: 2px;\n  fill: ${getColor('neutral.0')};\n\n  ${({ $isPending }) =>\n    $isPending &&\n    css`\n      stroke: ${getColor('neutral.600')};\n    `}\n  ${({ $isActive }) =>\n    $isActive &&\n    css`\n      fill: ${getColor('primary.500')};\n    `}\n`;\n\nconst BulletText = styled.text`\n  fill: ${getColor('neutral.0')};\n  font-family: var(--sscds-font-family-body);\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n`;\n\nconst BulletCheck = styled.path`\n  fill: ${getColor('primary.500')};\n`;\n\nconst BULLET_VIEWBOX_SIZE = 20;\n/**\n * calculate ratio between check icon and step bullet\n * according to design width of the check icon is half of the bullet width\n * == BULLET_VIEWBOX_SIZE / WIDTH_OF_CHECK_ICON / 2\n */\nconst checkIconRatio = BULLET_VIEWBOX_SIZE / checkWidth / 2;\nconst translateX = checkWidth / 2;\n\nconst StepBullet = ({\n  stepNumber,\n  isActive,\n  isPending,\n  isDone,\n}: StepBulletProps) => (\n  <BulletWrapper>\n    <Bullet viewBox={`0 0 ${BULLET_VIEWBOX_SIZE} ${BULLET_VIEWBOX_SIZE}`}>\n      <BulletCircle\n        $isActive={isActive}\n        $isPending={isPending}\n        cx=\"10\"\n        cy=\"10\"\n        r=\"9\"\n      />\n      {isActive && (\n        <BulletText textAnchor=\"middle\" x=\"10\" y=\"15\">\n          {stepNumber}\n        </BulletText>\n      )}\n      {isDone && (\n        <BulletCheck\n          d={svgPathData}\n          style={{\n            transform: `scale(${checkIconRatio}) matrix(1, 0, 0, 1, ${translateX}, ${translateX})`,\n          }}\n        />\n      )}\n    </Bullet>\n  </BulletWrapper>\n);\n\nStepBullet.propTypes = {\n  stepNumber: PropTypes.number.isRequired,\n  isActive: PropTypes.bool,\n  isPending: PropTypes.bool,\n  isDone: PropTypes.bool,\n};\n\nexport default StepBullet;\n","import React, { forwardRef, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { getColor, getRadii, getSpace, pxToRem } from '../../utils';\nimport { SpaceSizes } from '../../theme';\nimport { Text } from '../Text';\nimport { TextSizes, TextVariants } from '../Text/Text.enums';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { StepProps } from './Stepper.types';\nimport { StepperContext } from './Stepper.context';\nimport { StepperOrientations } from './Stepper.enums';\nimport StepBullet, { BulletCircle, bulletSize } from './StepBullet';\n\nconst StepLabel = styled(Text)`\n  max-width: 26ch;\n  line-height: ${pxToRem(bulletSize)};\n`;\n\nconst StepSummary = styled(Text)`\n  max-width: 30ch;\n`;\n\nconst StepButton = styled.button`\n  border: 0 none;\n  background: transparent none;\n  border-radius: ${getRadii('default')};\n\n  &:hover {\n    cursor: pointer;\n\n    ${/* sc-selector */ BulletCircle} {\n      fill: ${getColor('primary.50')};\n    }\n  }\n`;\n\nconst connectorSize = 2;\nconst connectorIndentation = pxToRem(bulletSize / 2 - connectorSize / 2);\nconst connectorStyled = css`\n  content: '';\n  display: block;\n  background-color: ${getColor('neutral.500')};\n`;\n\nconst StepConnector = styled.div`\n  flex: 1 1 1rem;\n\n  &::before {\n    ${connectorStyled};\n    height: ${`${connectorSize}px`};\n    margin-top: ${connectorIndentation};\n  }\n`;\n\nconst StepContent = styled.div<{ $isLast?: StepProps['isLast'] }>`\n  display: flex;\n  align-items: stretch;\n  min-height: 1rem;\n  margin-top: ${getSpace(SpaceSizes.sm)};\n  margin-bottom: ${getSpace(SpaceSizes.sm)};\n\n  &::before {\n    ${connectorStyled};\n    width: ${`${connectorSize}px`};\n    margin-left: ${connectorIndentation};\n    margin-right: ${connectorIndentation};\n  }\n\n  ${({ $isLast }) =>\n    $isLast &&\n    `\n    &::before {\n      background-color: transparent;\n    }\n  `};\n`;\n\nconst Step = forwardRef<HTMLDivElement, React.PropsWithChildren<StepProps>>(\n  (\n    { children, label, summary, index, isLast, shouldShowText, onStepClick },\n    ref,\n  ) => {\n    const { orientation, activeStep, areStepsExpanded } =\n      useContext(StepperContext);\n    const stepNumber = index + 1;\n    const isActive = activeStep === index;\n    const isDone = activeStep > index;\n    const isPending = activeStep < index;\n\n    const isStepClickable = isDone && isNotUndefined(onStepClick);\n\n    const handleStepClick = () => {\n      onStepClick(index);\n    };\n\n    const stepLabel = (\n      <Inline gap=\"sm\">\n        <StepBullet\n          isActive={isActive}\n          isDone={isDone}\n          isPending={isPending}\n          stepNumber={stepNumber}\n        />\n        {shouldShowText && (\n          <Stack gap={SpaceSizes.xs}>\n            <StepLabel isBold={isActive}>{label}</StepLabel>\n            {isNotUndefined(summary) && (\n              <StepSummary size={TextSizes.md} variant={TextVariants.secondary}>\n                {summary}\n              </StepSummary>\n            )}\n          </Stack>\n        )}\n      </Inline>\n    );\n\n    return (\n      <>\n        <div ref={ref}>\n          {isStepClickable ? (\n            <StepButton onClick={handleStepClick}>{stepLabel}</StepButton>\n          ) : (\n            stepLabel\n          )}\n          {orientation === StepperOrientations.vertical && (\n            <StepContent $isLast={isLast} data-testid=\"step-content\">\n              {(isActive || areStepsExpanded) && (\n                <Padbox paddingSize={SpaceSizes.sm}>{children}</Padbox>\n              )}\n            </StepContent>\n          )}\n        </div>\n        {!isLast && orientation === StepperOrientations.horizontal && (\n          <StepConnector />\n        )}\n      </>\n    );\n  },\n);\nStep.displayName = 'Step';\nStep.propTypes = {\n  label: PropTypes.string.isRequired,\n  summary: PropTypes.string,\n  index: PropTypes.number,\n  shouldShowText: PropTypes.bool,\n  isLast: PropTypes.bool,\n  onStepClick: PropTypes.func,\n};\n\nexport default Step;\n"],"names":["pathEq","_curry3","_path","val","obj","equals","path","cov_1uv2y148qb","actualCoverage","StepperOrientations","horizontal","vertical","cov_pvtkz9qx3","children","Stepper","cov_2r8n7besmi","s","forwardRef","showTextQuery","minWidth","showTextBreakpoint","orientation","b","areStepsExpanded","className","React","steps","ref","index","shouldShowText","isLast","f","SHOW_TEXT_BREAKPOINT","mergedRef","context","activeStep","Children","toArray","filter","stepsArr","map","step","cloneElement","number","bool","string","bulletSize","cov_1igbvq9876","BulletWrapper","styled","span","withConfig","displayName","componentId","pxToRem","BulletCircle","circle","$isPending","$isActive","BulletText","text","BulletCheck","getColor","checkIconRatio","isPending","isDone","cov_16xqyvufn2","hash","global","gcv","coverageData","coverage","StepLabel","Text","StepSummary","StepButton","button","getRadii","connectorStyled","StepContent","div","connectorIndentation","connectorSize","css","StepConnector","label","summary","getSpace","SpaceSizes","sm","isStepClickable","$isLast","stepLabel","onStepClick","useContext","StepperContext","stepNumber","isActive","isRequired","func","Step"],"mappings":"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AAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EA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","x_google_ignoreList":[0]}