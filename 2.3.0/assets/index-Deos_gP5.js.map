{"version":3,"file":"index-Deos_gP5.js","sources":["../../src/components/Tabs/Tabs.tsx","../../src/components/Tabs/Tab.tsx","../../src/components/Tabs/index.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { equals } from 'ramda';\n\nimport { Inline } from '../layout';\nimport { TabProps, TabsProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { BaseTabsWrapper } from '../_internal/BaseTabs/BaseTabsWrapper';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Tabs = ({\n  selectedValue,\n  selectedPatternMatcher = equals,\n  children,\n  onSelectTab,\n  variant = TabVariants.underline,\n  isExpanded = false,\n}: TabsProps) => (\n  <BaseTabsWrapper\n    $isExpanded={isExpanded}\n    $variant={variant}\n    className={CLX_COMPONENT}\n    paddingSize={\n      variant === TabVariants.segmented ? SpaceSizes.xs : SpaceSizes.none\n    }\n  >\n    <Inline\n      gap={\n        variant === TabVariants.segmented\n          ? SpaceSizes.sm\n          : variant === TabVariants.underline\n          ? SpaceSizes.none\n          : SpaceSizes.lg\n      }\n      role=\"tablist\"\n      stretch={isExpanded ? 'all' : 0}\n    >\n      {React.Children.map(children, (tab) => {\n        if (!React.isValidElement(tab)) {\n          return null;\n        }\n\n        return React.cloneElement<Partial<TabProps>>(tab, {\n          key: tab.props.value,\n          __variant: variant,\n          __isExpanded: isExpanded,\n          __isSelected: selectedPatternMatcher(tab.props.value, selectedValue),\n          __onSelectTab: onSelectTab,\n        });\n      })}\n    </Inline>\n  </BaseTabsWrapper>\n);\n\nTabs.propTypes = {\n  selectedValue: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n    .isRequired,\n  children: PropTypes.arrayOf(PropTypes.node).isRequired,\n  variant: PropTypes.oneOf(Object.values(TabVariants)),\n  selectedPatternMatcher: PropTypes.func,\n  isExpanded: PropTypes.bool,\n  onSelectTab: PropTypes.func,\n};\n\nexport default Tabs;\n","import React, { KeyboardEvent, MouseEvent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TabProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { requireRouterLink } from '../../utils/require-router-link';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { PaddingTypes } from '../layout/Padbox/Padbox.enums';\nimport BaseTabLabel from '../_internal/BaseTabs/BaseTabLabel';\n\nconst Tab = ({\n  children,\n  onClick,\n  value,\n  __variant,\n  __isExpanded,\n  __isSelected,\n  __onSelectTab,\n}: TabProps) => {\n  const isLink = value?.toString()?.startsWith('/');\n  const handleKeyDown = (e: KeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      __onSelectTab(value);\n    }\n  };\n  const handler = isLink\n    ? { to: value, onClick }\n    : {\n        onClick: (e: MouseEvent<HTMLAnchorElement>) => {\n          __onSelectTab(value);\n          onClick?.(e);\n        },\n        onKeyDown: (e: KeyboardEvent<HTMLAnchorElement>) => {\n          handleKeyDown(e);\n        },\n      };\n  let RouterLink = null;\n\n  if (isLink) {\n    RouterLink = requireRouterLink();\n  }\n\n  const paddingSize =\n    __variant === TabVariants.segmented\n      ? SpaceSizes.sm\n      : __variant === TabVariants.underline\n      ? SpaceSizes.md\n      : SpaceSizes.none;\n\n  return (\n    <BaseTabLabel\n      $isExpanded={__isExpanded}\n      $isSelected={__isSelected}\n      $variant={__variant}\n      aria-selected={__isSelected}\n      as={isLink ? RouterLink : 'a'}\n      paddingSize={paddingSize}\n      paddingType={PaddingTypes.squish}\n      role=\"tab\"\n      tabIndex={0}\n      {...handler}\n    >\n      {children}\n    </BaseTabLabel>\n  );\n};\n\nTab.propTypes = {\n  children: PropTypes.node.isRequired,\n  value: PropTypes.string.isRequired,\n  __variant: PropTypes.oneOf(Object.values(TabVariants)),\n  // eslint-disable-next-line\n  __isSelected: PropTypes.bool,\n  // eslint-disable-next-line\n  __isExpanded: PropTypes.bool,\n  __onSelectTab: PropTypes.func, // internal property\n  onClick: PropTypes.func,\n};\n\nexport default Tab;\n","export * as TabsEnums from './Tabs.enums';\nexport { default as Tabs } from './Tabs';\nexport { default as Tab } from './Tab';\nexport * from './Tabs.types';\n"],"names":["cov_1oe7yg7xsi","path","hash","global","gcv","coverageData","coverage","actualCoverage","s","selectedValue","equals","children","onSelectTab","variant","isExpanded","b","tab","f","jsx","BaseTabsWrapper","React","key","value","__variant","__isExpanded","selectedPatternMatcher","props","none","Inline","gap","segmented","PropTypes","oneOf","values","bool","role","Tabs","onClick","__isSelected","__onSelectTab","handleKeyDown","toString","startsWith","cov_19a0gkj3rw","e","to","handler","isLink","onKeyDown","RouterLink","paddingSize","requireRouterLink","isRequired","TabVariants","underline","func","$isSelected","Tab","cov_ob2thfvid"],"mappings":"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GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAA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"}