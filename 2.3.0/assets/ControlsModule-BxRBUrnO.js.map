{"version":3,"file":"ControlsModule-BxRBUrnO.js","sources":["../../../src/components/Datatable/components/Search/Search.types.ts","../../../src/components/Datatable/components/Search/Search.tsx","../../../src/components/Datatable/components/Search/index.ts","../../../src/components/Datatable/ControlsModule/ControlsModule.types.ts","../../../src/components/Datatable/ControlsModule/ControlsModule.enums.ts","../../../src/components/Datatable/ControlsModule/ControlsModule.tsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { InputProps } from '../../../forms/Input/Input.types';\n\nexport interface SearchProps\n  extends InputProps,\n    React.InputHTMLAttributes<HTMLInputElement> {\n  onSearch: (query: string) => void | Promise<void>;\n  onClear: () => void;\n  placeholder?: string;\n  isValidatedOnSubmit?: boolean;\n  pattern?: string;\n  errorMessage?: string;\n  value?: string;\n  defaultValue?: string;\n}\n\nexport const SearchPropType = {\n  onSearch: PropTypes.func.isRequired,\n  onClear: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  isValidatedOnSubmit: PropTypes.bool,\n  pattern: PropTypes.string,\n  errorMessage: PropTypes.string,\n  isDisabled: PropTypes.bool,\n  defaultValue: PropTypes.string,\n};\n","import React, { useState } from 'react';\n\nimport { SearchPropType, SearchProps } from './Search.types';\nimport { Error } from '../../../forms/Message';\nimport { validatePattern } from '../../../Filters/helpers';\nimport { Stack } from '../../../layout';\nimport { SearchBar } from '../../../forms';\n\nconst Search = ({\n  onSearch,\n  onClear,\n  placeholder = 'Search',\n  isValidatedOnSubmit = false,\n  pattern,\n  errorMessage,\n  ...props\n}: SearchProps) => {\n  const [isInvalid, setIsInvalid] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  const [typingTimeout, setTypingTimeout] = useState(0);\n\n  const clear = () => {\n    setIsSearching(false);\n    setIsInvalid(false);\n    onClear?.();\n  };\n  const search = async (searchQuery: string) => {\n    setIsSearching(true);\n    await onSearch(searchQuery);\n    setIsSearching(false);\n  };\n  const handleKeyUp: React.KeyboardEventHandler = (e) => {\n    const target = e.target as HTMLInputElement;\n    const hasError = validatePattern(target);\n    const searchValidQuery = () => {\n      if (!hasError) {\n        search(target.value);\n      }\n    };\n\n    if (isValidatedOnSubmit) {\n      if (e.key === 'Enter') {\n        setIsInvalid(hasError);\n        searchValidQuery();\n      }\n    } else {\n      setIsInvalid(hasError);\n      if (typingTimeout) {\n        window.clearTimeout(typingTimeout);\n      }\n      setTypingTimeout(\n        window.setTimeout(() => {\n          searchValidQuery();\n        }, 500),\n      );\n    }\n  };\n\n  if (props.defaultValue !== undefined) {\n    return (\n      <Stack>\n        <SearchBar\n          isInvalid={isInvalid}\n          isSearching={isSearching}\n          pattern={pattern}\n          placeholder={placeholder}\n          onClear={clear}\n          onKeyUp={handleKeyUp}\n          {...props}\n        />\n        {isInvalid && <Error>{errorMessage}</Error>}\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack>\n      <SearchBar\n        isInvalid={isInvalid}\n        isSearching={isSearching}\n        pattern={pattern}\n        placeholder={placeholder}\n        onClear={clear}\n        onKeyUp={handleKeyUp}\n        {...props}\n      />\n      {isInvalid && <Error>{errorMessage}</Error>}\n    </Stack>\n  );\n};\n\nSearch.propTypes = SearchPropType;\n\nexport default Search;\n","export { default as Search } from './Search';\nexport * from './Search.types';\n","import PropTypes from 'prop-types';\nimport type { IdType } from 'react-table';\n\nimport { SearchPropType, SearchProps } from '../components/Search/Search.types';\nimport { FiltersPropType, FiltersProps } from '../../Filters/Filters.types';\nimport { ControlTypes } from './ControlsModule.enums';\n\nexport type Controls = (typeof ControlTypes)[keyof typeof ControlTypes];\n\nexport type ControlState = {\n  isActive: boolean;\n  isApplied: boolean;\n};\n\nexport type ControlsLocalState = Record<Controls, ControlState>;\n\nexport interface ControlsConfig<D> {\n  hasSearch: boolean;\n  searchConfig: Partial<SearchProps>;\n  hasFiltering: boolean;\n  filteringConfig: Partial<FiltersProps>;\n  defaultIsFilteringOpen: boolean;\n  defaultIsFilteringApplied: boolean;\n  hasColumnsControls: boolean;\n  defaultIsColumnsControlsOpen: boolean;\n  defaultIsColumnsControlsApplied: boolean;\n  onColumnOrderChange: (columnOrder: IdType<D>[]) => void;\n  onColumnVisibilityChange: (hiddenColumns: IdType<D>[]) => void;\n  onControlToggle: (control: Controls, isActive: boolean) => void;\n  onCancelLoading: () => void;\n  isDataLoading: boolean;\n}\n\n// TODO: commented part will be enabled when functionality is implemented\nexport const ControlsConfigPropType = {\n  hasSearch: PropTypes.bool,\n  searchConfig: PropTypes.exact(SearchPropType).isRequired,\n  hasFiltering: PropTypes.bool,\n  defaultIsFilteringOpen: PropTypes.bool,\n  defaultIsFilteringApplied: PropTypes.bool,\n  filteringConfig: PropTypes.exact(FiltersPropType).isRequired,\n  isDataLoading: PropTypes.bool,\n  onCancelLoading: PropTypes.func,\n  onControlToggle: PropTypes.func,\n  hasColumnsControls: PropTypes.bool.isRequired,\n  defaultIsColumnsControlsOpen: PropTypes.bool.isRequired,\n  defaultIsColumnsControlsApplied: PropTypes.bool.isRequired,\n  // hasGrouping: PropTypes.bool.isRequired,\n  // defaultIsGroupingOpen: PropTypes.bool.isRequired,\n  // defaultIsGroupingApplied: PropTypes.bool.isRequired,\n  // defaultGroups: /* TODO: add propTypes */,\n  // hasViews: PropTypes.bool.isRequired,\n  // defaultIsViewsOpen: PropTypes.bool.isRequired,\n  // defaultIsViewsApplied: PropTypes.bool.isRequired,\n  // defaultViews: /* TODO: add propTypes */,\n};\n\nexport type ControlsModuleProps<D> = Omit<\n  ControlsConfig<D>,\n  'onColumnOrderChange'\n>;\n","// TODO: commented part will be enabled when functionality is implemented\nexport const ControlTypes = {\n  filters: 'filters',\n  columns: 'columns',\n  // groups: 'groups',\n  // views: 'views',\n} as const;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { all, isEmpty, map, mergeDeepRight, omit, pipe, zipObj } from 'ramda';\nimport { isNonEmptyArray, isNotNilOrEmpty } from 'ramda-adjunct';\n\nimport { getColor } from '../../../utils';\nimport { Search } from '../components/Search';\nimport { Filters } from '../../Filters';\nimport { SSCIconNames } from '../../../theme/icons/icons.enums';\nimport { ColumnsControls } from '../components/ColumnsControls';\nimport { ControlButton } from '../components/ControlButton';\nimport { DatatableStore } from '../Datatable.store';\nimport {\n  ControlState,\n  Controls,\n  ControlsConfigPropType,\n  ControlsLocalState,\n  ControlsModuleProps,\n} from './ControlsModule.types';\nimport { Filter } from '../../Filters/Filters.types';\nimport { ControlTypes } from './ControlsModule.enums';\nimport { SpaceSizes } from '../../../theme';\nimport { Inline, Padbox } from '../../layout';\n\nconst FiltersContainer = styled(Padbox)`\n  display: flex;\n  background-color: ${getColor('neutral.0')};\n`;\n\nconst resetActiveControls: (\n  toggledControl: Controls[],\n  currentState: ControlsLocalState,\n) => ControlsLocalState = pipe(\n  omit,\n  map((controlState) => ({ ...controlState, isActive: false })),\n);\n\nconst prepareControlState: (providedState: [boolean, boolean]) => ControlState =\n  zipObj(['isActive', 'isApplied']);\n\nconst defaultControlState: ControlState = {\n  isActive: false,\n  isApplied: false,\n};\n\nconst mergeControlState = mergeDeepRight(defaultControlState);\n\n// TODO: commented part will be enabled when functionality is implemented\nfunction ControlsModule<D extends Record<string, unknown>>({\n  hasSearch,\n  searchConfig,\n  hasFiltering,\n  filteringConfig,\n  defaultIsFilteringOpen,\n  defaultIsFilteringApplied,\n  hasColumnsControls,\n  defaultIsColumnsControlsOpen,\n  defaultIsColumnsControlsApplied,\n  isDataLoading,\n  onCancelLoading,\n  onControlToggle,\n}: ControlsModuleProps<D>): React.ReactElement {\n  const {\n    onClose: onFilteringClose,\n    onApply: onFilteringApply,\n    state: filteringState,\n    fields: filteringFields,\n    ...restFilteringConfig\n  } = filteringConfig;\n  const {\n    onSearch,\n    onClear: onSearchClear,\n    defaultValue: defaultSearchValue,\n    ...restSearchConfig\n  } = searchConfig;\n\n  const filteringStoreState = DatatableStore.useState((s) => s.filters);\n  const [controlsState, setControlsState] = useState<ControlsLocalState>({\n    [ControlTypes.filters]: mergeControlState(\n      prepareControlState([\n        defaultIsFilteringOpen,\n        defaultIsFilteringApplied || isNonEmptyArray(filteringState),\n      ]),\n    ),\n    [ControlTypes.columns]: mergeControlState(\n      prepareControlState([\n        defaultIsColumnsControlsOpen,\n        defaultIsColumnsControlsApplied,\n      ]),\n    ),\n  });\n  const [appliedFilters, setAppliedFilters] = useState(0);\n\n  useEffect(() => {\n    DatatableStore.update((s) => {\n      s.query = defaultSearchValue;\n      s.filters = filteringState;\n      s.hasAppliedFilters = controlsState[ControlTypes.filters].isApplied;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isToolbarEnabled = hasFiltering || hasColumnsControls;\n\n  const shouldShowFiltering = hasFiltering && isNonEmptyArray(filteringFields);\n\n  const applyControlStateChange = (\n    control: Controls,\n    newState: Partial<ControlState>,\n  ): void => {\n    setControlsState((state) => ({\n      ...state,\n      [control]: {\n        ...state[control],\n        ...newState,\n      },\n    }));\n  };\n\n  const handleControlOnClick = (control: Controls, isActive: boolean): void => {\n    onControlToggle(control, !isActive);\n    setControlsState((state) => ({\n      ...resetActiveControls([control], state),\n      [control]: {\n        ...state[control],\n        isActive: !state[control].isActive,\n      },\n    }));\n  };\n\n  const handleCloseFilter = () => {\n    onFilteringClose();\n    applyControlStateChange(ControlTypes.filters, { isActive: false });\n  };\n\n  const handleApplyFilter = (appliedfilters: Filter[]): void => {\n    const hasAppliedFilters = isNonEmptyArray(appliedfilters);\n    onFilteringApply(appliedfilters);\n    applyControlStateChange(ControlTypes.filters, {\n      isApplied: hasAppliedFilters,\n    });\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.filters = appliedfilters;\n      s.hasAppliedFilters = hasAppliedFilters;\n      s.isCanceled = false;\n    });\n\n    setAppliedFilters(appliedfilters.length);\n  };\n\n  const handleOnSearch = (query: string): void => {\n    onSearch(query);\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.query = query;\n      s.isCanceled = false;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleOnSearchClear = (): void => {\n    onSearchClear();\n\n    DatatableStore.update((s) => {\n      s.pageIndex = 0;\n      s.query = '';\n    });\n  };\n  // trigger search on mount if defaultValue is provided\n  useEffect(() => {\n    if (isNotNilOrEmpty(defaultSearchValue)) {\n      handleOnSearch(defaultSearchValue);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => ({ columnOrder: s.columnOrder, hiddenColumns: s.hiddenColumns }),\n      ({ columnOrder, hiddenColumns }) => {\n        if (all(isEmpty, [columnOrder, hiddenColumns])) {\n          applyControlStateChange(ControlTypes.columns, {\n            isApplied: false,\n          });\n        }\n      },\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n\n  return (\n    <div>\n      <Padbox paddingSize={SpaceSizes.sm}>\n        <Inline align=\"center\" gap={SpaceSizes.lg} stretch=\"end\">\n          {isToolbarEnabled && (\n            <Inline gap=\"sm\">\n              {hasColumnsControls && (\n                <ColumnsControls\n                  isOpen={controlsState[ControlTypes.columns].isActive}\n                  onApply={(shouldApply) => {\n                    applyControlStateChange(ControlTypes.columns, {\n                      isApplied: shouldApply,\n                    });\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    );\n                  }}\n                  onClose={() =>\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    )\n                  }\n                  onOpen={() =>\n                    handleControlOnClick(\n                      ControlTypes.columns,\n                      controlsState[ControlTypes.columns].isActive,\n                    )\n                  }\n                >\n                  {(props) => (\n                    <ControlButton\n                      iconName={SSCIconNames.columns3}\n                      label=\"Toggle columns\"\n                      onClick={() =>\n                        handleControlOnClick(\n                          ControlTypes.columns,\n                          controlsState[ControlTypes.columns].isActive,\n                        )\n                      }\n                      {...props}\n                    />\n                  )}\n                </ColumnsControls>\n              )}\n              {shouldShowFiltering && (\n                <ControlButton\n                  appliedFilters={appliedFilters}\n                  iconName={SSCIconNames.filter}\n                  // isActive={controlsState[ControlTypes.filters].isActive}\n                  label=\"Filters\"\n                  onClick={() =>\n                    handleControlOnClick(\n                      ControlTypes.filters,\n                      controlsState[ControlTypes.filters].isActive,\n                    )\n                  }\n                />\n              )}\n            </Inline>\n          )}\n\n          {hasSearch && (\n            <Search\n              defaultValue={defaultSearchValue}\n              onClear={handleOnSearchClear}\n              onSearch={handleOnSearch}\n              {...restSearchConfig}\n            />\n          )}\n        </Inline>\n      </Padbox>\n\n      {shouldShowFiltering && controlsState[ControlTypes.filters].isActive && (\n        <FiltersContainer paddingSize={SpaceSizes.md}>\n          <Filters\n            fields={filteringFields}\n            isLoading={isDataLoading}\n            state={filteringStoreState}\n            onApply={handleApplyFilter}\n            onCancel={onCancelLoading}\n            onClose={handleCloseFilter}\n            {...restFilteringConfig}\n          />\n        </FiltersContainer>\n      )}\n    </div>\n  );\n}\n\nControlsModule.propTypes = ControlsConfigPropType;\nControlsModule.displayName = 'ControlsModule';\n\nexport default ControlsModule;\n"],"names":["SearchPropType","onSearch","PropTypes","func","isRequired","onClear","placeholder","string","isValidatedOnSubmit","bool","pattern","errorMessage","isDisabled","defaultValue","cov_vqzxv4jyw","path","hash","global","gcv","coverageData","coverage","actualCoverage","s","Search","b","f","isInvalid","setIsInvalid","useState","isSearching","setIsSearching","typingTimeout","setTypingTimeout","search","searchQuery","handleKeyUp","e","target","hasError","validatePattern","value","searchValidQuery","key","window","setTimeout","props","jsxs","Stack","children","jsx","SearchBar","clear","onKeyUp","cov_271tnkjlme","ControlsConfigPropType","hasSearch","searchConfig","exact","hasFiltering","defaultIsFilteringOpen","defaultIsFilteringApplied","filteringConfig","FiltersPropType","isDataLoading","onCancelLoading","onControlToggle","hasColumnsControls","defaultIsColumnsControlsOpen","defaultIsColumnsControlsApplied","cov_21klmelht6","ControlTypes","columns","controlState","FiltersContainer","cov_dxy18tkm2","styled","Padbox","withConfig","displayName","componentId","getColor","resetActiveControls","pipe","omit","map","mergeControlState","mergeDeepRight","defaultControlState","filteringState","filteringFields","restFilteringConfig","onSearchClear","defaultSearchValue","restSearchConfig","onClose","onFilteringClose","useEffect","DatatableStore","setControlsState","filteringStoreState","filters","controlsState","prepareControlState","isNonEmptyArray","appliedFilters","setAppliedFilters","applyControlStateChange","update","query","hasAppliedFilters","isApplied","state","control","handleControlOnClick","isActive","handleCloseFilter","columnOrder","hiddenColumns","onFilteringApply","appliedfilters","pageIndex","isCanceled","length","isToolbarEnabled","shouldApply","shouldResetSelectedRows","handleOnSearchClear","filter","isNotNilOrEmpty","ControlsModule"],"mappings":"6gCAiBO,MAAMA,EAAiB,CAC5BC,SAAUC,EAAUC,KAAKC,WACzBC,QAASH,EAAUC,KAAKC,WACxBE,YAAaJ,EAAUK,OACvBC,oBAAqBN,EAAUO,KAC/BC,QAASR,EAAUK,OACnBI,aAAcT,EAAUK,OACxBK,WAAYV,EAAUO,KACtBI,aAAcX,EAAUK,MAC1B,ECTE,SAAAO,GAAA,CAAA,IAAAC,EAAA,sGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,sGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KA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AAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,IAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,GAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,GAAAA,E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"}