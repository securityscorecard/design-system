{"version":3,"file":"SegmentedToggle-DrRckhhl.js","sources":["../../src/managers/common/createCtx.ts","../../src/components/forms/SegmentedToggle/SegmentedToggle.tsx"],"sourcesContent":["import { createContext, useContext } from 'react';\n\nimport { useLogger } from '../../hooks/useLogger';\n\nexport function createCtx<P>(namespace: string, errorMessage: string) {\n  const ctx = createContext<P | undefined>(undefined);\n  function useCtx() {\n    const { error } = useLogger(namespace);\n    const c = useContext(ctx);\n    if (!c) error(errorMessage);\n    return c;\n  }\n  return {\n    useContext: useCtx,\n    Provider: ctx.Provider,\n  } as const;\n}\n","import {\n  type ChangeEventHandler,\n  type ComponentPropsWithRef,\n  type ReactNode,\n  forwardRef,\n  useMemo,\n} from 'react';\nimport cls from 'classnames';\nimport styled, { css } from 'styled-components';\n\nimport { Inline, Padbox } from '../../layout';\nimport { CLX_COMPONENT } from '../../../theme/constants';\nimport { createCtx } from '../../../managers/common/createCtx';\nimport ElementLabel from '../../ElementLabel/ElementLabel';\n\nexport interface SegmentedToggleItemProps\n  extends Omit<ComponentPropsWithRef<'input'>, 'size'> {\n  label: string;\n  value: string | number;\n  itemId: string;\n}\n\nexport interface SegmentedToggleProps {\n  children: ReactNode;\n  /**\n   * The group is used to identify the SegmentedToggle within the form\n   */\n  group: string;\n  /**\n   * Indicates if the SegmentedToggle is disabled or not.\n   */\n  isDisabled?: boolean;\n  /**\n   * Should the SegmentedToggle be expanded to full available width.\n   */\n  isExpanded?: boolean;\n  /**\n   * Callback when the SegmentedToggle has changed.\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  className?: string;\n}\n\ntype SegmentedToggleContext = {\n  name: string;\n  disabled?: boolean;\n  onChange?: ChangeEventHandler;\n};\n\nconst { useContext, Provider } = createCtx<SegmentedToggleContext>(\n  'SegmentedToggle',\n  'The SegmentedToggleItem has to be a child of the SegmentedToggle component.',\n);\n\nconst SegmentedToggleRoot = styled(Padbox)`\n  display: inline-block;\n  background-color: var(--sscds-color-neutral-alpha-3);\n  box-shadow: inset 0 0 0 1px var(--sscds-color-neutral-alpha-3);\n  border-radius: var(--sscds-radii-input);\n  ${({ $isExpanded }) =>\n    $isExpanded &&\n    css`\n      width: 100%;\n      flex-grow: 1;\n    `};\n`;\n\nexport const SegmentedToggle = forwardRef<HTMLDivElement, SegmentedToggleProps>(\n  (\n    {\n      group,\n      isDisabled = false,\n      children,\n      onChange,\n      className,\n      isExpanded = false,\n      ...props\n    },\n    ref,\n  ) => {\n    const value = useMemo(\n      () => ({\n        name: group,\n        disabled: isDisabled,\n        onChange,\n      }),\n      [group, isDisabled, onChange],\n    );\n\n    return (\n      <Provider value={value}>\n        <SegmentedToggleRoot\n          ref={ref}\n          className={cls(CLX_COMPONENT, className)}\n          {...props}\n          $isExpanded={isExpanded}\n          paddingSize=\"1x\"\n        >\n          <Inline\n            gap=\"2x\"\n            role=\"radiogroup\"\n            stretch={isExpanded ? 'all' : undefined}\n          >\n            {children}\n          </Inline>\n        </SegmentedToggleRoot>\n      </Provider>\n    );\n  },\n);\n\nconst SegmentedToggleItemRoot = styled.div`\n  display: flex;\n`;\n\nconst SegmentedToggleLabel = styled.label`\n  display: block;\n  width: 100%;\n  padding: var(--sscds-space-1x) var(--sscds-space-2x);\n  text-align: center;\n  transition: var(--sscds-action-transition);\n`;\n\nconst Radio = styled.input`\n  /* transform: translateX(-100%); */\n  position: absolute;\n  pointer-events: none;\n  opacity: 0;\n  margin: 0;\n\n  + ${SegmentedToggleLabel} {\n    color: var(--sscds-color-text-default);\n    border-radius: var(--sscds-radii-default);\n  }\n\n  :hover + ${SegmentedToggleLabel} {\n    background-color: var(--sscds-color-neutral-alpha-3);\n  }\n  :focus-visible + ${SegmentedToggleLabel} {\n    outline: 2px solid var(--sscds-color-border-action-focused);\n  }\n\n  :checked + ${SegmentedToggleLabel} {\n    background-color: var(--sscds-color-neutral-0);\n    box-shadow: var(--sscds-shadow-1x);\n  }\n\n  :checked:disabled + ${SegmentedToggleLabel} {\n    background-color: var(--sscds-color-background-action-base-disabled);\n    color: var(--sscds-color-text-disabled);\n    box-shadow: none;\n  }\n\n  :disabled + ${SegmentedToggleLabel} {\n    color: var(--sscds-color-text-disabled);\n    &:hover {\n      color: var(--sscds-color-text-disabled);\n      background-color: transparent;\n    }\n  }\n`;\n\nexport const SegmentedToggleItem = forwardRef<\n  HTMLInputElement,\n  SegmentedToggleItemProps\n>(({ label, value, itemId, ...props }, ref) => {\n  const { name, disabled, onChange } = useContext();\n\n  return (\n    <SegmentedToggleItemRoot>\n      <Radio\n        ref={ref}\n        id={itemId}\n        type=\"radio\"\n        value={value}\n        {...props}\n        disabled={disabled}\n        name={name}\n        onChange={onChange}\n      />\n      <SegmentedToggleLabel htmlFor={itemId}>\n        <ElementLabel color={disabled ? 'disabled' : 'default'}>\n          {label}\n        </ElementLabel>\n      </SegmentedToggleLabel>\n    </SegmentedToggleItemRoot>\n  );\n});\n"],"names":["cov_8qfkh0g66","path","hash","global","gcv","coverageData","coverage","actualCoverage","createCtx","namespace","errorMessage","f","ctx","s","createContext","error","useLogger","c","useContext","b","useCtx","Provider","name","label","value","itemId","$isExpanded","cov_2qk8fz9mmi","css"],"mappings":"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,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAA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"}