{"version":3,"file":"ElementLabel.stories-BjmprxWl.js","sources":["../../../src/components/ElementLabel/ElementLabel.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from '@storybook/react';\n\nimport { Stack } from '../layout/Stack';\nimport ElementLabel from './ElementLabel';\n\nconst meta = {\n  title: 'typography/ElementLabel',\n  component: ElementLabel,\n  parameters: {\n    docs: {\n      description: {\n        component:\n          'ElementLabel is used for short and mostly interactive text elements like button, links, form field labels, and dropdown options/lists.',\n      },\n    },\n  },\n  argTypes: {\n    size: {\n      description: 'Selects the font size',\n      control: 'select',\n      options: ['sm', 'md'],\n      table: {\n        type: { summary: \"'sm' | 'md'\" },\n        defaultValue: { summary: \"'sm'\" },\n      },\n    },\n    color: {\n      description: 'Selects the font color',\n      control: 'select',\n      options: [\n        'default',\n        'subtle',\n        'disabled',\n        'danger',\n        'inverse',\n        'white',\n        'link',\n      ],\n      table: {\n        type: {\n          summary:\n            \"'default' | 'subtle' | 'disabled' | 'danger' | 'inverse' | 'white' | 'link'\",\n        },\n        defaultValue: { summary: \"'default'\" },\n      },\n    },\n    isStrong: {\n      description:\n        'Selects the font weight. When true ElementLabel will be rendered as bold ',\n      control: 'boolean',\n      table: {\n        type: { summary: 'boolean' },\n        defaultValue: { summary: 'false' },\n      },\n    },\n  },\n} satisfies Meta<typeof ElementLabel>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Playground: Story = {\n  args: {\n    children: 'Playground',\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\nexport const Sizes: Story = {\n  render: (args) => (\n    <Stack gap=\"sm\">\n      <ElementLabel {...args} size=\"sm\">\n        Small\n      </ElementLabel>\n      <ElementLabel {...args} size=\"md\">\n        Medium\n      </ElementLabel>\n    </Stack>\n  ),\n  args: { children: 'ElementLabel size' },\n};\n\nexport const Colors: Story = {\n  render: (args) => (\n    <Stack gap=\"sm\">\n      <ElementLabel {...args} color=\"default\">\n        Default\n      </ElementLabel>\n      <ElementLabel {...args} color=\"subtle\">\n        Subtle\n      </ElementLabel>\n      <ElementLabel {...args} color=\"disabled\">\n        Disabled\n      </ElementLabel>\n      <ElementLabel {...args} color=\"danger\">\n        Danger\n      </ElementLabel>\n      <ElementLabel\n        {...args}\n        color=\"inverse\"\n        style={{ background: 'var(--sscds-color-neutral-12)' }}\n      >\n        Inverse\n      </ElementLabel>\n      <ElementLabel\n        {...args}\n        color=\"white\"\n        style={{ background: 'var(--sscds-color-black)' }}\n      >\n        White\n      </ElementLabel>\n      <ElementLabel {...args} color=\"link\">\n        Link\n      </ElementLabel>\n    </Stack>\n  ),\n  args: { children: 'ElementLabel color' },\n};\n\nexport const ColorsDark: Story = {\n  render: Colors.render,\n  args: Colors.args,\n  decorators: [\n    (storyFn) => (\n      <div\n        className=\"dark\"\n        style={{ background: 'var(--sscds-color-background-body)' }}\n      >\n        {storyFn()}\n      </div>\n    ),\n  ],\n  name: 'Colors (Dark mode)',\n};\n\nexport const Weights: Story = {\n  render: (args) => (\n    <Stack gap=\"sm\">\n      <ElementLabel {...args} isStrong={false}>\n        Default\n      </ElementLabel>\n      <ElementLabel {...args} isStrong>\n        Strong\n      </ElementLabel>\n    </Stack>\n  ),\n  args: { children: 'ElementLabel font weight' },\n};\n"],"names":["component","ElementLabel","parameters","docs","description","argTypes","size","control","options","table","type","summary","defaultValue","color","isStrong","Meta","Playground","args","children","Sizes","screenshot","skip","render","jsxs","Stack","jsx","Colors","background","decorators","name","storyFn"],"mappings":"wSAOEA,MAAAA,EAAWC,CACXC,MAAAA,0BACEC,UAAMF,EACJG,WAAAA,CACEJ,KAAAA,CAEFI,YAAA,CACFJ,UACD,wIACDK,CACEC,CACEF,EACAG,SAAAA,CACAC,KAAAA,CACAC,YAAO,wBACLC,QAAM,SAAEC,QAAAA,CAAAA,KAAS,IAAA,QAAe,CAChCC,KAAAA,CAAAA,QAAc,aAAA,EAAED,aAAS,CAAAA,QAAA,MAAA,CAAO,CAClC,EACFE,MAAC,CACDA,YAAO,yBACLT,QAAAA,SACAG,QAAS,CACTC,UASAC,SACEC,WACEC,SAEF,UACAC,QAAgBD,MAAAA,EAClBF,MAAA,CACDC,KAAA,CACDI,QACEV,6EAEAG,EACAE,aAAO,CAAAE,QAAA,WAAA,CACLD,CAAQC,WAAoB,CAC5BC,YAAgBD,4EAAiBJ,QAAA,UACnCE,MAAA,CACFC,KAAA,CAAAC,QAAA,SAAA,EACFC,aAAA,CAAAD,QAAA,OAAA,CACUI,CAEZ,CAEA,CAEA,EAKwBC,EAAA,CAAKC,KAAA,CAC3BC,SAAA,YACD,EAEDhB,WAAaiB,CACLC,WACJ,CAAAC,KAAM,EAAK,CACT,CACN,IAE4B,CAC5BC,OAAAL,GACAM,EAAA,KAAAC,EAAA,CAAoB,IAAA,KACd,SAAA,CAAAC,QACH,CAAA,GAAAR,EAAA,KAAA,KAAA,SACOC,QAAAA,QAA8BjB,EAAA,CAAA,GAAAgB,EAAA,KAAA,KAAA,SAGxC,SAAA,CAAA,EACQ,EAGRA,KAAA,CAAAC,SAAA,mBAAA,CACA,EAEAQ,EAAA,CACAJ,OAAoBL,GACdM,EAAA,KAAAC,EAAA,UACN,SAAA,CAAAC,MAAAxB,EAAA,CAAA,GAAAgB,EAAA,MAAA,UAAA,SAEM,UAAA,QACNhB,EAAA,CAAA,GAAAgB,EAAA,MAAA,SAAA,SAEM,SAAA,QAGWU,EAAY,CAAA,GAAAV,EAAA,MAAA,WAAA,SAE7B,WAAA,UACoB,CAAA,GAAAA,EAAA,MAAA,SAAA,SAIHU,SAAAA,QAAyC1B,EAE1D,CAAA,GAAAgB,EACQ,MAAY,4BACS,+BAAA,EAAa,SAGpC,UAAA,QAEEhB,EAAEiB,CAAAA,GAAQD,EAAuB,MAAA,QACxC,MAAA,CAAAU,WAAA,0BAAA,EAAA,SAIK,QAAA,QACJC,EACU,CAAA,GAAAX,EACF,MACF,OAAU,SACkD,OAAA,CAAA,EAE5D,EAINY,KAAM,CAAAX,SAAA,oBAAA,CACR,IAImB,CACbI,OAAaI,EAAAJ,OACnBL,KAAAS,EAAAT,KACAW,WAAoB,CACpBE,SACA,MACQ,CAAA,UAAY,aAEjB,CAAAH,WAAA,oCAAA,EACOT,SAAUY,EAAA,CAAA,CAA2B,CAC9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}