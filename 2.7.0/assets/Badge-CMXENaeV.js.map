{"version":3,"file":"Badge-CMXENaeV.js","sources":["../../../node_modules/ramda/es/lte.js","../../../node_modules/ramda-adjunct/es/defaultWhen.js","../../../src/components/Badge/Badge.enums.ts","../../../src/components/Badge/Badge.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns `true` if the first argument is less than or equal to the second;\n * `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {Number} a\n * @param {Number} b\n * @return {Boolean}\n * @see R.gte\n * @example\n *\n *      R.lte(2, 1); //=> false\n *      R.lte(2, 2); //=> true\n *      R.lte(2, 3); //=> true\n *      R.lte('a', 'z'); //=> true\n *      R.lte('z', 'a'); //=> false\n */\n\nvar lte =\n/*#__PURE__*/\n_curry2(function lte(a, b) {\n  return a <= b;\n});\n\nexport default lte;","import { curry } from 'ramda';\n\n/**\n * Returns the second argument if predicate function returns `true`,\n * otherwise the third argument is returned.\n *\n * @func defaultWhen\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/2.2.0|v2.2.0}\n * @category Logic\n * @sig  (a -> Boolean) -> b -> a -> a | b\n * @param {!function} predicate The predicate function\n * @param {*} defaultVal The default value\n * @param {*} val `val` will be returned instead of `defaultVal` if predicate returns false\n * @return {*} The `val` if predicate returns `false`, otherwise the default value\n * @see {@link http://ramdajs.com/docs/#defaultTo|R.defaultTo}\n * @example\n *\n * RA.defaultWhen(RA.isNull, 1, null); // => 1\n * RA.defaultWhen(RA.isNull, 1, 2); // => 2\n */\nvar defaultWhen = curry(function (predicate, defaultVal, val) {\n  return predicate(val) ? defaultVal : val;\n});\nexport default defaultWhen;","// eslint-disable-next-line import/prefer-default-export\n\nexport const BadgeVariants = {\n  neutral: 'neutral',\n  success: 'success',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n} as const;\n","import { defaultWhen } from 'ramda-adjunct';\nimport { lte, pipe } from 'ramda';\nimport styled, { css } from 'styled-components';\n\nimport type { BadgeElementProps, BadgeProps } from './Badge.types';\nimport { BadgeVariants } from './Badge.enums';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst BadgeNeutral = css`\n  background-color: var(--sscds-color-neutral-4);\n  color: var(--sscds-color-text-default);\n`;\nconst BadgeSuccess = css`\n  background-color: var(--sscds-color-success-500);\n  color: var(--sscds-color-text-white);\n`;\nconst BadgeInfo = css`\n  background-color: var(--sscds-color-info-500);\n  color: var(--sscds-color-text-white);\n`;\nconst BadgeWarn = css`\n  background-color: var(--sscds-color-warning-500);\n  color: var(--sscds-color-text-black);\n`;\nconst BadgeError = css`\n  background-color: var(--sscds-color-danger-500);\n  color: var(--sscds-color-text-white);\n`;\n\nconst badgeVariants = {\n  [BadgeVariants.neutral]: BadgeNeutral,\n  [BadgeVariants.success]: BadgeSuccess,\n  [BadgeVariants.info]: BadgeInfo,\n  [BadgeVariants.warn]: BadgeWarn,\n  [BadgeVariants.error]: BadgeError,\n};\n\nconst BadgeElement = styled.div<BadgeElementProps>`\n  display: inline-block;\n  min-width: 1.5rem;\n  padding: 0 var(--sscds-space-2x);\n  border-radius: var(--sscds-radii-rounded);\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n  text-align: center;\n  ${({ $variant }) => badgeVariants[$variant]};\n  line-height: var(--sscds-font-lineheight-elementlabel);\n`;\n\nconst normalizeCount = pipe(defaultWhen(lte(100), '99+'));\n\nconst Badge = ({ count, variant = 'error' }: BadgeProps) => {\n  if (typeof count === 'undefined') {\n    return null;\n  }\n\n  return (\n    <BadgeElement $variant={variant} className={CLX_COMPONENT}>\n      <span>{normalizeCount(count)}</span>\n    </BadgeElement>\n  );\n};\n\nexport default Badge;\n"],"names":["lte","_curry2","a","b","defaultWhen","curry","predicate","defaultVal","val","BadgeVariants","cov_2bxguvmqd2","s","info","warn","error","cov_14cdwzhr9q","path","hash","global","gcv","coverageData","coverage","actualCoverage","BadgeNeutral","css","BadgeSuccess","BadgeWarn","BadgeError","badgeVariants","neutral","success","BadgeInfo"],"mappings":"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","x_google_ignoreList":[0,1]}