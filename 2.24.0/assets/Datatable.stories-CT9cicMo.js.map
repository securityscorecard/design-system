{"version":3,"file":"Datatable.stories-CT9cicMo.js","sources":["../../../src/components/Datatable/mocks/controls.ts","../../../src/components/Datatable/Datatable.storiesTypes.ts","../../../src/components/Datatable/Datatable.stories.tsx"],"sourcesContent":["import { action } from '@storybook/addon-actions';\n\nimport { fields } from '../../Filters/mocks/options';\n\nconst filteringConfig = {\n  fields,\n  onApply: action('onFiltersApply'),\n  onChange: action('onFiltersChange'),\n  onClose: action('onFiltersClose'),\n};\n\nexport const controlsConfig = {\n  filteringConfig,\n  searchConfig: {\n    onSearch: action('onSearch'),\n    onClear: action('onClear'),\n  },\n  onColumnVisibilityChange: action('columnVisibilityChange'),\n};\n","export const ColumnsType = `{\n  Header: string;\n  cellType?: CellTypes;\n  cellLinkComponent?: ReactComponentLike;\n  cellOnClick?: (value: CellValue, rowData: D) => void;\n  cellHrefComposer?: (value: CellValue, rowData: D) => string;\n  cellToComposer?: (value: CellValue, rowData: D) => To;\n  cellFormatter?: (value: CellValue, rowData: D) => string;\n  cellTooltipPopupComposer?: (value: CellValue, rowData: D) => JSX.Element;\n  nullCondition?: (value: CellValue) => boolean;\n  nullConditionValue?: string;\n  multiValueDisplayLimit?: number;\n  headerTooltip?: JSX.Element;\n\n  ...rest of Column options from 'react-table'\n}`;\n\nexport const DataPrimaryKeyType = `| string\n| (originalRow: D, relativeIndex: number, parent?: Row<D>) => string`;\n\nexport const BatchActionsType = `| HandlerActionKind\n| AbsoluteLinkActionKind\n| RelativeLinkActionKind\n| ActionWithSubactions\n`;\n\nexport const TableConfigType = `{\n  hasSelection: boolean;\n  onSelect: (\n    ids: IdType<D>[],\n    hasExclusiveSelection: boolean,\n  ) => void;\n  defaultSelectedRowIds: IdType<D>[];\n  hasPagination: boolean;\n  hasServerSidePagination: boolean;\n  defaultPageSize: number;\n  hasSorting: boolean;\n  hasServerSideSorting: boolean;\n  defaultSortBy: {\n    id: IdType<D>;\n    desc?: boolean;\n  }[];\n  rowActions: RowAction<D>[];\n  NoMatchingDataComponent: ReactComponentLike;\n  NoDataComponent: ReactComponentLike;\n}`;\n\nexport const ControlsConfigType = `{\n  hasSearch: boolean;\n  searchConfig: Partial<SearchBarProps>;\n  hasFiltering: boolean;\n  filteringConfig: Partial<FiltersProps>;\n  defaultIsFilteringOpen: boolean;\n  defaultIsFilteringApplied: boolean;\n  onControlToggle: (control: Controls, isActive: boolean) => void;\n}`;\n\nexport const OnDataFetchFnType = `({\n  pageSize: number;\n  pageIndex: number;\n  sortBy: SortingRule<D>[];\n  filters: Filter[];\n  query: string;\n}) => void;`;\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { action } from '@storybook/addon-actions';\nimport { Meta, StoryFn } from '@storybook/react';\n\nimport assets from '../_internal/BaseTable/mocks/ipAssets.json';\nimport { Data } from '../_internal/BaseTable/mocks/types';\nimport { simpleColumns } from '../_internal/BaseTable/mocks/columns';\nimport { comparisonTable } from '../_internal/BaseTable/docs';\nimport { controlsConfig } from './mocks/controls';\nimport { datatableBatchActions, datatableRowActions } from './mocks/actions';\nimport { defaultControlsConfig, defaultTableConfig } from './defaultConfigs';\nimport {\n  BatchActionsType,\n  ColumnsType,\n  ControlsConfigType,\n  DataPrimaryKeyType,\n  OnDataFetchFnType,\n  TableConfigType,\n} from './Datatable.storiesTypes';\nimport Datatable from './Datatable';\nimport { DatatableProps } from './Datatable.types';\n\nexport default {\n  title: 'components/Datatable',\n  component: Datatable,\n  parameters: {\n    mockDate: new Date('2021-03-31T00:00:00Z'),\n    screenshot: { skip: true },\n    docs: {\n      source: { type: 'code' },\n      description: {\n        component: `\n\\`\\`\\`jsx\nimport { Datatable } from '@securityscorecard/design-system';\n\nconst MyFancyDatatable = () => <Datatable ...props />\n\\`\\`\\`\n\n  ${comparisonTable}\n      `,\n      },\n    },\n  },\n  decorators: [(storyFn) => <MemoryRouter>{storyFn()}</MemoryRouter>],\n  argTypes: {\n    data: { control: { disable: true } },\n    dataSize: { control: { disable: true } },\n    columns: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary: 'Columns<D>[]',\n          detail: ColumnsType,\n        },\n      },\n    },\n    isDataLoading: { control: { disable: true } },\n    pageButtonsCount: { control: { disable: false }, defaultValue: 5 },\n    dataPrimaryKey: {\n      table: {\n        type: {\n          summary: 'PrimaryKey<D>',\n          detail: DataPrimaryKeyType,\n        },\n      },\n    },\n    batchActions: {\n      table: {\n        type: {\n          summary: 'Action[]',\n          detail: BatchActionsType,\n        },\n      },\n    },\n    controlsConfig: {\n      table: {\n        type: {\n          summary: 'Partial<ControlsConfig>',\n          detail: ControlsConfigType,\n        },\n        defaultValue: {\n          summary: 'defaultControlsConfig',\n          detail: JSON.stringify(defaultControlsConfig, null, 2),\n        },\n      },\n    },\n    tableConfig: {\n      table: {\n        type: {\n          summary: 'Partial<TableConfig<D>>',\n          detail: TableConfigType,\n        },\n        defaultValue: {\n          summary: 'defaultTableConfig',\n          detail: JSON.stringify(defaultTableConfig, null, 2),\n        },\n      },\n    },\n    onDataFetch: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary: 'OnDataFetchFn<D>',\n          detail: OnDataFetchFnType,\n        },\n        defaultValue: {\n          summary: 'noop',\n        },\n      },\n    },\n  },\n  tags: ['deprecated'],\n} as Meta;\n\nexport const ServerSidePlayground: StoryFn<DatatableProps<Data>> = (args) => {\n  const [tableData, setTableData] = useState<Data[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [totalLength, setTotalLength] = useState(0);\n  const timeoutRef = useRef<NodeJS.Timeout | undefined>();\n\n  const dispatchFetchData = useCallback(\n    ({ pageSize, pageIndex }) => {\n      action('onDataFetch')({\n        pageSize,\n        pageIndex,\n      });\n      setIsLoading(true);\n      timeoutRef.current = setTimeout(() => {\n        const startRow = pageSize * pageIndex;\n        const endRow = startRow + pageSize;\n        const fetchedData: Data[] = assets.slice(startRow, endRow);\n        setTableData(fetchedData);\n        setTotalLength(assets.length);\n        setIsLoading(false);\n      }, 500);\n    },\n    [setIsLoading, setTableData],\n  );\n\n  useEffect(() => {\n    dispatchFetchData({ pageSize: 50, pageIndex: 0 });\n  }, [dispatchFetchData]);\n\n  const {\n    batchActions: argsBatchActions = [],\n    controlsConfig: argsControlsConfig = {},\n    dataPrimaryKey: argsDataPrimaryKey,\n    tableConfig: argsTableConfig = {},\n    ...restArgs\n  } = args;\n\n  const onCancelLoading = () => {\n    clearTimeout(timeoutRef.current);\n    setIsLoading(false);\n  };\n\n  return (\n    <Datatable<Data>\n      {...restArgs}\n      batchActions={[...argsBatchActions, ...datatableBatchActions]}\n      columns={simpleColumns}\n      controlsConfig={{ ...argsControlsConfig, ...controlsConfig }}\n      data={tableData}\n      dataPrimaryKey={argsDataPrimaryKey || 'ipAddress'}\n      dataSize={totalLength}\n      isDataLoading={isLoading}\n      tableConfig={{\n        ...argsTableConfig,\n        rowActions: [\n          ...(argsTableConfig?.rowActions || []),\n          ...datatableRowActions,\n        ],\n        onSelect: action('onRowSelect'),\n      }}\n      onCancelLoading={onCancelLoading}\n      onDataFetch={dispatchFetchData}\n    />\n  );\n};\nServerSidePlayground.storyName = 'Playground (Server-Side implementation)';\n\nexport const InBrowserPlayground: StoryFn<DatatableProps<Data>> = (args) => {\n  const [data, setData] = useState(assets);\n\n  const resetFilter = useRef(null);\n\n  const storeResetFn = (resetFn) => {\n    resetFilter.current = resetFn;\n  };\n\n  const handleOnSearch = (query) => {\n    action('onSearch')(query);\n    const result = assets.filter((asset) => asset.ipAddress.includes(query));\n\n    setData(result);\n  };\n  const handleOnClearSearch = () => {\n    action('onClear')();\n    setData(assets);\n  };\n\n  const {\n    batchActions: argsBatchActions = [],\n    controlsConfig: argsControlsConfig = {},\n    dataPrimaryKey: argsDataPrimaryKey,\n    tableConfig: argsTableConfig = {},\n    ...restArgs\n  } = args;\n\n  return (\n    <Datatable<Data>\n      {...restArgs}\n      batchActions={[...argsBatchActions, ...datatableBatchActions]}\n      columns={simpleColumns}\n      controlsConfig={{\n        ...controlsConfig,\n        ...argsControlsConfig,\n        searchConfig: {\n          ...controlsConfig.searchConfig,\n          ...argsControlsConfig.searchConfig,\n          onSearch: handleOnSearch,\n          onClear: handleOnClearSearch,\n        },\n      }}\n      data={data}\n      dataPrimaryKey={argsDataPrimaryKey || 'ipAddress'}\n      dataSize={data.length}\n      resetSelectionFn={storeResetFn}\n      tableConfig={{\n        ...argsTableConfig,\n        rowActions: [\n          ...(argsTableConfig.rowActions || []),\n          ...datatableRowActions,\n        ],\n        onSelect: action('onRowSelect'),\n        hasServerSidePagination: false,\n        hasServerSideSorting: false,\n      }}\n    />\n  );\n};\n\nInBrowserPlayground.storyName = 'Playground (In-Browser implementation)';\n"],"names":["fields","onApply","onChange","onClose","action","onSearch","onClear","searchConfig","onColumnVisibilityChange","cov_1ppi2dds1u","path","hash","global","gcv","coverageData","coverage","actualCoverage","ColumnsType","DataPrimaryKeyType","s","BatchActionsType","TableConfigType","ControlsConfigType","OnDataFetchFnType","Datatable_stories","type","Datatable","description","component","Date","screenshot","skip","docs","source","decorators","data","control","disable","storyFn","MemoryRouter","dataSize","table","columns","summary","detail","dataPrimaryKey","isDataLoading","pageButtonsCount","defaultValue","batchActions","JSON","stringify","defaultControlsConfig","tableConfig","controlsConfig","defaultTableConfig","onDataFetch","args","tableData","setTableData","useState","setIsLoading","setTotalLength","useRef","dispatchFetchData","useCallback","pageSize","pageIndex","current","setTimeout","startRow","ServerSidePlayground","StoryFn","slice","endRow","timeoutRef","argsBatchActions","argsControlsConfig","argsDataPrimaryKey","argsTableConfig","useEffect","jsx","restArgs","datatableBatchActions","totalLength","onCancelLoading","clearTimeout","rowActions","datatableRowActions","onSelect","InBrowserPlayground","storeResetFn","resetFn","assets","resetFilter","filter","handleOnClearSearch","query","result","asset","ipAddress","includes","setData","hasServerSidePagination","hasServerSideSorting"],"mappings":"uhMAAA,EAKEA,MACAC,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAgC,CAChCC,OAAAA,EACAC,QAASC,EAAO,gBAAgB,EAClCF,SAAAE,EAAA,iBAAA,EAEOD,QAAAC,EAAuB,gBAAA,CAAA,GAG1BC,GAAAA,EAAAA,EAAAA,OAA2B,CAC3BC,gBAAAA,EACFC,aAAA,CACAC,SAAAA,EAAAA,YACFF,QAAAF,EAAA,SAAA,0DClB2B,SAAAK,GAAA,CAAA,IAAAC,EAAA,mGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,mGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,MAAA,GAAA,UAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,kGAAA,EAAA,MAAA,CAAA,cAAA,qBAAA,mBAAA,kBAAA,qBAAA,mBAAA,EAAA,SAAA,4XAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,YAAA,CAAA,OAAAO,CAAA,EAAAA,CAAAP,CAAAA,EAApB,EAAA,MAAMQ,GAAAA,EAAAA,EAAAA,EAAc,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBOC,GAAAT,EAAA,EAAAU,EAAA,CAAA,IAAA;AAAA,uEAGFC,GAAAX,EAAA,EAAAU,EAAA,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA,GAMDE,GAAAZ,EAAA,EAAAU,EAAA,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqBGG,GAAAb,EAAA,EAAAU,EAAA,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUDI,GAAAd,EAAA,EAAAU,EAAA,CAAA,IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cC3BnBK,GAAA,CAAEC,MAAAA,iCAAcC,EACxBC,WAAAA,CACEC,SAAWC,IAAAA,KAAA,sBAAA,EACnBC,WAAA,CAAAC,KAAA,EAAA,EACAC,KAAA,CACAC,OAAA,CAAAR,KAAA,MAAA,EACAE,YAAA,CACAC,UAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOEM,CAAqB;AAAA,OAEnBC,CAAQC,CAAWC,EAAcH,WAAA,CAAAI,SAAAC,EAAAD,CAAAA,SAAAA,IAAA,CAAA,WAAG,CACpCE,KAAAA,CAAQJ,QAAE,CAAAC,QAAA,EAAA,CAAA,EAAED,SAAS,CAAAA,QAAA,CAAAC,QAAA,EAAA,CAAA,EAAEA,QAAAA,CAAcD,QAAA,CAAAC,QAAA,EAAA,EAAGI,MAAA,CACxCC,KAAS,CACPN,QAAS,eAAEC,OAASpB,CAAM,CAC1BwB,CACEhB,EACEkB,cAAS,CAAcP,QAAA,CAAAC,QAAA,EAAA,CAAA,EACvBO,iBAAQ3B,CAAAA,QAAAA,CAAAA,QAAAA,EAAAA,EAAAA,aAAAA,CAAAA,EACV4B,eAAA,CACFJ,MAAA,CACDhB,KAAA,CACDqB,QAAe,gBAAEV,OAASlB,CAAEmB,CAAc,CAAE,EAC5CU,aAAAA,CAAoBX,MAAO,CAAIC,KAAAA,CAAgBM,QAAA,WAAEK,OAAY5B,CAAK,CAClEyB,CACEJ,EACEhB,eAAM,CACJkB,MAAAA,CACAC,KAAAA,CACFD,QAAA,0BACFC,OAAAtB,CACD,EACD2B,aAAc,CACZR,QAAO,wBACLhB,OAAMyB,KAAAC,UAAAC,EAAA,KAAA,CAAA,CACJT,CACAC,CACF,EACFS,YAAA,CACDZ,MAAA,CACDa,KAAAA,CACEb,QAAO,0BACLhB,OAAMJ,CACJsB,EACAC,aAAQtB,CACTqB,QAAA,qBACDK,OAAAA,KAAcG,UAAAI,EAAA,KAAA,CAAA,CACZZ,EAEF,EACFa,YAAA,CACDpB,QAAA,CAAAC,QAAA,EAAA,EACDgB,MAAAA,CACEZ,KAAO,CACLhB,QAAM,mBACJkB,QACAC,EACFI,aAAC,CACDA,QAAAA,MACEL,EAEF,CACF,OACD,CAAA,YAAA,CACDa,EACanB,EAASoB,GAAA,MAAM,CAAAC,EAAAC,CAAA,EAAAC,EAAAA,SAAA,CAAA,CAAA,EAC1BnB,CAAAA,EAAOoB,CAAA,EAAAD,WAAA,EAAA,EACLnC,CAAAA,EAAMqC,CAAA,EAAAF,WAAA,CAAA,EACJjB,EAA2BoB,EAAAA,SAE7BC,EAACC,EAAAA,YACDjB,CAAAA,CAAAA,SAAAA,EAAAA,UAAAA,CAAAA,IAAc,CACZL,EAAAA,aAAS,EAAA,CACXuB,SAAAA,EACFC,UAAAA,CAAAA,CACF,EACDN,EAAA,EAAA,EACkBO,EAAAA,QAAAC,WAAA,IAAA,CACZ,MAAAC,EAAAJ,EAAAC,EAEII,EAAAA,EAAsBC,EAC1Bd,EAA2BE,EAAQa,MAAKH,EAAOI,CAAA,EAChDf,EAAYE,CAAY,EACxBC,EAAcA,EAAAA,MAAc,EAC5Ba,EAAaZ,EAAAA,GAEI,GAAA,CAAA,EACRI,CAAAA,EAAAA,CAAAA,CAAU,cAEX,IAAA,CACRA,EAAAA,CAAAA,SAAAA,GAAAA,UAAAA,CAAAA,CAAAA,CAAAA,EACD,CAACH,CAAA,CAAA,EAEFW,KAAAA,CACE1B,aAAc2B,EAAuB,CAAA,EACrCtB,eAAYuB,EAAsB,CAAA,EAClChC,eAAiBiC,cACLC,EAAa,CAAA,EACzBjB,GAAAA,CACAD,EAAAA,EAGHA,EAAcF,IAAY,CAG7BqB,aAAgBL,EAAAP,OAAA,EACdJ,EAAAA,EAAkB,CAAA,EAA6B,OAC9CiB,EAAA,IAAAvD,EAAA,CAEGwD,GAAAA,EACQ,aAAkB,CAAA,GAAAN,EAAK,GAAAO,CAAA,EACnC7B,QAAAA,EACAT,eAAkC,CAAA,GAAAgC,EAAA,GAAAvB,CAAA,EAClCD,KAAAA,EACG6B,eAAAA,GAAAA,YACDzB,SAAI2B,EAEFC,cAAAA,EACJC,YAAaX,CACD,GAAAI,EACbQ,WAAA,CAGE,IAAAR,GAAAA,YAAAA,EACKG,aACQ,CAAA,EAE2B,GAAAM,CAAA,EACnCC,SAAE/B,EACQ,aAAEoB,CAId,EACAS,gBAAAA,EAIQ,YAAQvB,CAEH,CAAA,CAKrBO,EAEAA,EAAamB,UAAqBlB,0CAGfkB,MAAAA,EAAejC,GAAA,CAEhC,KAAMkC,CAAAA,EAAAA,CAAgBC,EAAAA,WAAYC,CAAA,EAEjCC,EAAA/B,SAAA,IAAA,EAGC3D,EAAyBwF,GAAA,CACzBE,EAAY1B,QAAU2B,CAAAA,EAIlBC,EAA4BC,GAAA,CACzB7F,EAAA,UAAU,EAAE6F,CAAA,EACZC,MAAAA,EAAQL,EAAAE,OAAAI,GAAAA,EAAAC,UAAAC,SAAAJ,CAAA,CAAA,EAGXK,EAAAJ,CAAA,CAAA,EAEJ5C,EAAgBuB,IAAAA,CAChBhC,EAAAA,SAAgBiC,IAChBzB,EAAAA,CAAa0B,CAAAA,EAIf,CAMM9B,aAAiB2B,EAAA,CAAA,EACjBtB,eAAqBuB,EAAA,CAAA,EACrBtE,eAAcuE,cACTxB,EAA2B,CAAA,KAC3BuB,CACHxE,EAAAA,EAEF,OAEF4E,EAAA,IAAAvD,EAAA,CAKoBwD,GAAAA,EAClBK,aACMR,CAAAA,GAAAA,EAAgBQ,GAAAA,CACjBC,EAELC,QAAUrF,EACVmG,eAAAA,CACAC,GAAAA,EAEF,GAAA3B,EAELtE,aAAA,CAEkB,GAAA+C,EAAU/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}