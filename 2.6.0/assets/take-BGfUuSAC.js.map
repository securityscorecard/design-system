{"version":3,"file":"take-BGfUuSAC.js","sources":["../../../node_modules/ramda/es/internal/_xtake.js","../../../node_modules/ramda/es/take.js"],"sourcesContent":["import _curry2 from \"./_curry2.js\";\nimport _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\n\nvar XTake =\n/*#__PURE__*/\nfunction () {\n  function XTake(n, xf) {\n    this.xf = xf;\n    this.n = n;\n    this.i = 0;\n  }\n\n  XTake.prototype['@@transducer/init'] = _xfBase.init;\n  XTake.prototype['@@transducer/result'] = _xfBase.result;\n\n  XTake.prototype['@@transducer/step'] = function (result, input) {\n    this.i += 1;\n    var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n    return this.n >= 0 && this.i >= this.n ? _reduced(ret) : ret;\n  };\n\n  return XTake;\n}();\n\nvar _xtake =\n/*#__PURE__*/\n_curry2(function _xtake(n, xf) {\n  return new XTake(n, xf);\n});\n\nexport default _xtake;","import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xtake from \"./internal/_xtake.js\";\nimport slice from \"./slice.js\";\n/**\n * Returns the first `n` elements of the given list, string, or\n * transducer/transformer (or object with a `take` method).\n *\n * Dispatches to the `take` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> [a]\n * @sig Number -> String -> String\n * @param {Number} n\n * @param {*} list\n * @return {*}\n * @see R.drop\n * @example\n *\n *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n *      R.take(3, 'ramda');               //=> 'ram'\n *\n *      const personnel = [\n *        'Dave Brubeck',\n *        'Paul Desmond',\n *        'Eugene Wright',\n *        'Joe Morello',\n *        'Gerry Mulligan',\n *        'Bob Bates',\n *        'Joe Dodge',\n *        'Ron Crotty'\n *      ];\n *\n *      const takeFive = R.take(5);\n *      takeFive(personnel);\n *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n * @symb R.take(-1, [a, b]) = [a, b]\n * @symb R.take(0, [a, b]) = []\n * @symb R.take(1, [a, b]) = [a]\n * @symb R.take(2, [a, b]) = [a, b]\n */\n\nvar take =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['take'], _xtake, function take(n, xs) {\n  return slice(0, n < 0 ? Infinity : n, xs);\n}));\n\nexport default take;"],"names":["XTake","n","xf","_xfBase","result","input","ret","_reduced","_xtake","_curry2","take","_dispatchable","xs","slice"],"mappings":"oEAIA,IAAIA,EAEJ,UAAY,CACV,SAASA,EAAMC,EAAGC,EAAI,CACpB,KAAK,GAAKA,EACV,KAAK,EAAID,EACT,KAAK,EAAI,CACV,CAED,OAAAD,EAAM,UAAU,mBAAmB,EAAIG,EAAQ,KAC/CH,EAAM,UAAU,qBAAqB,EAAIG,EAAQ,OAEjDH,EAAM,UAAU,mBAAmB,EAAI,SAAUI,EAAQC,EAAO,CAC9D,KAAK,GAAK,EACV,IAAIC,EAAM,KAAK,IAAM,EAAIF,EAAS,KAAK,GAAG,mBAAmB,EAAEA,EAAQC,CAAK,EAC5E,OAAO,KAAK,GAAK,GAAK,KAAK,GAAK,KAAK,EAAIE,EAASD,CAAG,EAAIA,CAC7D,EAESN,CACT,IAEIQ,EAEJC,EAAQ,SAAgBR,EAAGC,EAAI,CAC7B,OAAO,IAAIF,EAAMC,EAAGC,CAAE,CACxB,CAAC,ECmBGQ,EAEJD,EAEAE,EAAc,CAAC,MAAM,EAAGH,EAAQ,SAAcP,EAAGW,EAAI,CACnD,OAAOC,EAAM,EAAGZ,EAAI,EAAI,IAAWA,EAAGW,CAAE,CAC1C,CAAC,CAAC","x_google_ignoreList":[0,1]}