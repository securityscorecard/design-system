{"version":3,"file":"Step-DVCIU63Y.js","sources":["../../../node_modules/ramda/es/pathEq.js","../../../src/components/Stepper/Stepper.enums.ts","../../../src/components/Stepper/Stepper.context.ts","../../../src/components/Stepper/Stepper.tsx","../../../src/components/Stepper/StepBullet.tsx","../../../src/components/Stepper/Step.tsx"],"sourcesContent":["import _curry3 from \"./internal/_curry3.js\";\nimport equals from \"./equals.js\";\nimport path from \"./path.js\";\n/**\n * Determines whether a nested path on an object has a specific value, in\n * [`R.equals`](#equals) terms. Most likely used to filter a list.\n *\n * @func\n * @memberOf R\n * @since v0.7.0\n * @category Relation\n * @typedefn Idx = String | Int | Symbol\n * @sig [Idx] -> a -> {a} -> Boolean\n * @param {Array} path The path of the nested property to use\n * @param {*} val The value to compare the nested property with\n * @param {Object} obj The object to check the nested property in\n * @return {Boolean} `true` if the value equals the nested object property,\n *         `false` otherwise.\n * @example\n *\n *      const user1 = { address: { zipCode: 90210 } };\n *      const user2 = { address: { zipCode: 55555 } };\n *      const user3 = { name: 'Bob' };\n *      const users = [ user1, user2, user3 ];\n *      const isFamous = R.pathEq(['address', 'zipCode'], 90210);\n *      R.filter(isFamous, users); //=> [ user1 ]\n */\n\nvar pathEq =\n/*#__PURE__*/\n_curry3(function pathEq(_path, val, obj) {\n  return equals(path(_path, obj), val);\n});\n\nexport default pathEq;","export const StepperOrientations = {\n  horizontal: 'horizontal',\n  vertical: 'vertical',\n} as const;\n","import { createContext } from 'react';\n\nimport { StepperContextValue } from './Stepper.types';\n\nexport const StepperContext = createContext<StepperContextValue>({});\n","import React, { forwardRef, useMemo } from 'react';\nimport { pathEq } from 'ramda';\nimport cls from 'classnames';\n\nimport { SpaceSizes } from '../../theme';\nimport { Inline, Stack } from '../layout';\nimport { StepperProps } from './Stepper.types';\nimport { mergeRefs } from '../../utils/mergeRefs';\nimport { StepperContext } from './Stepper.context';\nimport { StepperOrientations } from './Stepper.enums';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useContainerQuery } from '../../hooks/useContainerQuery';\n\nconst SHOW_TEXT_BREAKPOINT = 'show-step-text';\n\nconst Stepper = forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<StepperProps>\n>(\n  (\n    {\n      children,\n      activeStep = 0,\n      showTextBreakpoint = 600,\n      orientation = StepperOrientations.horizontal,\n      areStepsExpanded = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const showTextQuery = useMemo(\n      () => ({\n        [SHOW_TEXT_BREAKPOINT]: { minWidth: showTextBreakpoint },\n      }),\n      [showTextBreakpoint],\n    );\n    const [query, containerRef] = useContainerQuery(showTextQuery);\n\n    const stepsArr: React.ReactElement[] = React.Children.toArray(\n      children,\n    ).filter(pathEq(['type', 'displayName'], 'Step'));\n    const steps = stepsArr.map((step, index) =>\n      React.cloneElement(step, {\n        ...step.props,\n        index,\n        shouldShowText:\n          activeStep === index ||\n          query[SHOW_TEXT_BREAKPOINT] ||\n          orientation === StepperOrientations.vertical,\n        isLast: index + 1 === stepsArr.length,\n      }),\n    );\n\n    const mergedRef = mergeRefs(ref, containerRef);\n\n    const context = useMemo(\n      () => ({\n        activeStep,\n        orientation,\n        areStepsExpanded,\n      }),\n      [activeStep, orientation, areStepsExpanded],\n    );\n\n    return (\n      <StepperContext.Provider value={context}>\n        {orientation === StepperOrientations.vertical ? (\n          <Stack\n            ref={mergedRef}\n            className={cls(CLX_COMPONENT, className)}\n            gap={SpaceSizes.sm}\n            {...props}\n          >\n            {steps}\n          </Stack>\n        ) : (\n          <Inline\n            ref={mergedRef}\n            align=\"flex-start\"\n            className={cls(CLX_COMPONENT, className)}\n            gap={SpaceSizes.sm}\n            {...props}\n          >\n            {steps}\n          </Inline>\n        )}\n      </StepperContext.Provider>\n    );\n  },\n);\n\nexport default Stepper;\n","import styled, { css } from 'styled-components';\n\nimport { getColor, pxToRem } from '../../utils';\nimport { width as checkWidth, svgPathData } from '../../theme/icons/check';\nimport { BulletCircleProps, StepBulletProps } from './Stepper.types';\n\nexport const bulletSize = 20;\n\nconst BulletWrapper = styled.span`\n  flex-shrink: 0;\n`;\n\nconst Bullet = styled.svg`\n  width: ${pxToRem(bulletSize)};\n  height: ${pxToRem(bulletSize)};\n  display: block;\n`;\n\nexport const BulletCircle = styled.circle<BulletCircleProps>`\n  stroke: ${getColor('primary.500')};\n  stroke-width: 2px;\n  fill: ${getColor('neutral.0')};\n\n  ${({ $isPending }) =>\n    $isPending &&\n    css`\n      stroke: ${getColor('neutral.600')};\n    `}\n  ${({ $isActive }) =>\n    $isActive &&\n    css`\n      fill: ${getColor('primary.500')};\n    `}\n`;\n\nconst BulletText = styled.text`\n  fill: ${getColor('neutral.0')};\n  font-family: var(--sscds-font-family-body);\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n`;\n\nconst BulletCheck = styled.path`\n  fill: ${getColor('primary.500')};\n`;\n\nconst BULLET_VIEWBOX_SIZE = 20;\n/**\n * calculate ratio between check icon and step bullet\n * according to design width of the check icon is half of the bullet width\n * == BULLET_VIEWBOX_SIZE / WIDTH_OF_CHECK_ICON / 2\n */\nconst checkIconRatio = BULLET_VIEWBOX_SIZE / checkWidth / 2;\nconst translateX = checkWidth / 2;\n\nconst StepBullet = ({\n  stepNumber,\n  isActive,\n  isPending,\n  isDone,\n}: StepBulletProps) => (\n  <BulletWrapper>\n    <Bullet viewBox={`0 0 ${BULLET_VIEWBOX_SIZE} ${BULLET_VIEWBOX_SIZE}`}>\n      <BulletCircle\n        $isActive={isActive}\n        $isPending={isPending}\n        cx=\"10\"\n        cy=\"10\"\n        r=\"9\"\n      />\n      {isActive && (\n        <BulletText textAnchor=\"middle\" x=\"10\" y=\"15\">\n          {stepNumber}\n        </BulletText>\n      )}\n      {isDone && (\n        <BulletCheck\n          d={svgPathData}\n          style={{\n            transform: `scale(${checkIconRatio}) matrix(1, 0, 0, 1, ${translateX}, ${translateX})`,\n          }}\n        />\n      )}\n    </Bullet>\n  </BulletWrapper>\n);\n\nexport default StepBullet;\n","import React, { forwardRef, useContext } from 'react';\nimport styled, { css } from 'styled-components';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { getColor, getRadii, getSpace, pxToRem } from '../../utils';\nimport { SpaceSizes } from '../../theme';\nimport { Text } from '../Text';\nimport { TextSizes, TextVariants } from '../Text/Text.enums';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { StepProps } from './Stepper.types';\nimport { StepperContext } from './Stepper.context';\nimport { StepperOrientations } from './Stepper.enums';\nimport StepBullet, { BulletCircle, bulletSize } from './StepBullet';\n\nconst StepLabel = styled(Text)`\n  max-width: 26ch;\n  line-height: ${pxToRem(bulletSize)};\n`;\n\nconst StepSummary = styled(Text)`\n  max-width: 30ch;\n`;\n\nconst StepButton = styled.button`\n  border: 0 none;\n  background: transparent none;\n  border-radius: ${getRadii('default')};\n\n  &:hover {\n    cursor: pointer;\n\n    ${/* sc-selector */ BulletCircle} {\n      fill: ${getColor('primary.50')};\n    }\n  }\n`;\n\nconst connectorSize = 2;\nconst connectorIndentation = pxToRem(bulletSize / 2 - connectorSize / 2);\nconst connectorStyled = css`\n  content: '';\n  display: block;\n  background-color: ${getColor('neutral.500')};\n`;\n\nconst StepConnector = styled.div`\n  flex: 1 1 1rem;\n\n  &::before {\n    ${connectorStyled};\n    height: ${`${connectorSize}px`};\n    margin-top: ${connectorIndentation};\n  }\n`;\n\nconst StepContent = styled.div<{ $isLast?: StepProps['isLast'] }>`\n  display: flex;\n  align-items: stretch;\n  min-height: 1rem;\n  margin-top: ${getSpace(SpaceSizes.sm)};\n  margin-bottom: ${getSpace(SpaceSizes.sm)};\n\n  &::before {\n    ${connectorStyled};\n    width: ${`${connectorSize}px`};\n    margin-left: ${connectorIndentation};\n    margin-right: ${connectorIndentation};\n  }\n\n  ${({ $isLast }) =>\n    $isLast &&\n    `\n    &::before {\n      background-color: transparent;\n    }\n  `};\n`;\n\nconst Step = forwardRef<HTMLDivElement, React.PropsWithChildren<StepProps>>(\n  (\n    { children, label, summary, index, isLast, shouldShowText, onStepClick },\n    ref,\n  ) => {\n    const { orientation, activeStep, areStepsExpanded } =\n      useContext(StepperContext);\n    const stepNumber = index + 1;\n    const isActive = activeStep === index;\n    const isDone = activeStep > index;\n    const isPending = activeStep < index;\n\n    const isStepClickable = isDone && isNotUndefined(onStepClick);\n\n    const handleStepClick = () => {\n      onStepClick(index);\n    };\n\n    const stepLabel = (\n      <Inline gap=\"sm\">\n        <StepBullet\n          isActive={isActive}\n          isDone={isDone}\n          isPending={isPending}\n          stepNumber={stepNumber}\n        />\n        {shouldShowText && (\n          <Stack gap={SpaceSizes.xs}>\n            <StepLabel isBold={isActive}>{label}</StepLabel>\n            {isNotUndefined(summary) && (\n              <StepSummary size={TextSizes.md} variant={TextVariants.secondary}>\n                {summary}\n              </StepSummary>\n            )}\n          </Stack>\n        )}\n      </Inline>\n    );\n\n    return (\n      <>\n        <div ref={ref}>\n          {isStepClickable ? (\n            <StepButton onClick={handleStepClick}>{stepLabel}</StepButton>\n          ) : (\n            stepLabel\n          )}\n          {orientation === StepperOrientations.vertical && (\n            <StepContent $isLast={isLast} data-testid=\"step-content\">\n              {(isActive || areStepsExpanded) && (\n                <Padbox paddingSize={SpaceSizes.sm}>{children}</Padbox>\n              )}\n            </StepContent>\n          )}\n        </div>\n        {!isLast && orientation === StepperOrientations.horizontal && (\n          <StepConnector />\n        )}\n      </>\n    );\n  },\n);\n\nStep.displayName = 'Step';\n\nexport default Step;\n"],"names":["pathEq","_curry3","_path","val","obj","equals","path","cov_2m8a1eiq13","actualCoverage","StepperOrientations","horizontal","vertical","cov_1bfnld4h7m","cov_1f2p2o54ua","hash","global","gcv","coverageData","coverage","SHOW_TEXT_BREAKPOINT","s","Stepper","forwardRef","children","activeStep","b","showTextBreakpoint","orientation","className","props","ref","f","index","length","areStepsExpanded","step","cov_smx62vg1c","bulletSize","BulletWrapper","styled","span","withConfig","displayName","componentId","Bullet","svg","pxToRem","BulletCircle","circle","getColor","$isPending","css","$isActive","isActive","BulletCheck","cov_241532dvjc","StepLabel","Text","StepSummary","StepButton","button","getRadii","connectorSize","connectorIndentation","connectorStyled","StepConnector","div","StepContent","getSpace","SpaceSizes","sm","$isLast","isStepClickable","label","summary","isLast","shouldShowText","onStepClick","useContext","StepperContext","Step"],"mappings":"4pBA4BA,IAAIA,GAEJC,GAAQ,SAAgBC,EAAOC,EAAKC,EAAK,CACvC,OAAOC,GAAOC,GAAKJ,EAAOE,CAAG,EAAGD,CAAG,CACrC,CAAC,yyBChCM,OAAAI,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,EAAME,MAAAA,GAAAA,IAAAA,EAAsB,CAAA,IAAA,CACjCC,WAAY,aACZC,SAAU,UACZ,kyBCHA,OAAAC,EAAA,UAAA,CAAA,OAAAJ,CAAA,EAAAA,CAAA,CAAAI,EAAA,2CCgCa,SAAAC,GAAA,CAAA,IAAAP,EAAA,mFAAAQ,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,mFAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA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AAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAA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AA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAA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","x_google_ignoreList":[0]}