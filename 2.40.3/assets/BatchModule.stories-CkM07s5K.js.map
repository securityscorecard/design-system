{"version":3,"file":"BatchModule.stories-CkM07s5K.js","sources":["../../../src/components/Datatable/BatchModule/BatchModule.stories.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { MemoryRouter } from 'react-router-dom';\n\nimport { actionsMock } from '../mocks/actions';\nimport BatchModule from './BatchModule';\nimport { BatchModuleProps } from './BatchModule.types';\nimport { DatatableStore } from '../Datatable.store';\nimport { defaultTableConfig } from '../defaultConfigs';\n\nexport default {\n  title: 'tests/Datatable/BatchModule',\n  component: BatchModule,\n  decorators: [(storyFn) => <MemoryRouter>{storyFn()}</MemoryRouter>],\n  parameters: {\n    viewMode: 'story',\n  },\n  argTypes: {\n    actions: {\n      table: {\n        defaultValue: { summary: '[]' },\n        type: {\n          summary: 'Action[]',\n          detail: `| {\n    label: string;\n    name: string;\n    onClick: () => void;\n  }\n| {\n    label: string;\n    name: string;\n    to: To;\n    onClick?: () => void;\n    href?: never;\n    subActions?: never;\n  }\n| {\n    label: string;\n    name: string;\n    href: string;\n    onClick?: () => void;\n    to?: never;\n    subActions?: never;\n  }\n| {\n    label: string;\n    name: string;\n    subActions: ActionKinds[];\n    onClick?: () => void;\n    href?: never;\n    to?: never;\n  }`,\n        },\n      },\n    },\n    shouldShowSelectionDropdown: {\n      control: { type: 'boolean' },\n      table: {\n        defaultValue: { summary: defaultTableConfig.hasSelection.toString() },\n      },\n    },\n  },\n} as Meta;\n\ntype Story = StoryFn<BatchModuleProps>;\n\nexport const Playground: Story = (args) => <BatchModule {...args} />;\nPlayground.args = {\n  actions: [],\n  dataSize: 1070000,\n  hasSelection: defaultTableConfig.hasSelection,\n  hasOnlyPerPageSelection: defaultTableConfig.hasOnlyPerPageSelection,\n  columns: { isButtonDisplayed: false },\n};\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\n\nexport const WithSelectedRows: Story = (args) => {\n  useEffect(() => {\n    DatatableStore.update((s) => {\n      s.selectedIds = ['a', 'b', 'c', 'd', 'e', 'f'];\n    });\n\n    return () => {\n      DatatableStore.update((s) => {\n        s.selectedIds = [];\n      });\n    };\n  }, []);\n  return <BatchModule {...args} />;\n};\nWithSelectedRows.args = Playground.args;\n\nexport const WithSelectedRowsAndExclusionLogic: Story = (args) => {\n  useEffect(() => {\n    DatatableStore.update((s) => {\n      s.selectedIds = ['a', 'b', 'c', 'd', 'e', 'f'];\n    });\n\n    return () => {\n      DatatableStore.update((s) => {\n        s.selectedIds = [];\n      });\n    };\n  }, []);\n  return <BatchModule {...args} />;\n};\nWithSelectedRowsAndExclusionLogic.args = {\n  ...Playground.args,\n  hasOnlyPerPageSelection: false,\n};\n\nexport const WithBatchActions: Story = (args) => <BatchModule {...args} />;\nWithBatchActions.args = {\n  ...Playground.args,\n  actions: actionsMock,\n};\n\nexport const WithColumns: Story = (args) => <BatchModule {...args} />;\nWithColumns.args = {\n  ...Playground.args,\n  columns: { isButtonDisplayed: true },\n};\n"],"names":["component","BatchModule_stories","decorators","parameters","BatchModule","viewMode","storyFn","MemoryRouter","argTypes","actions","table","defaultValue","summary","type","detail","shouldShowSelectionDropdown","control","defaultTableConfig","hasSelection","toString","Playground","args","jsx","dataSize","hasOnlyPerPageSelection","isButtonDisplayed","columns","screenshot","skip","update","s","selectedIds","DatatableStore","WithSelectedRowsAndExclusionLogic","useEffect","WithSelectedRows","Story","WithBatchActions","WithColumns"],"mappings":"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"}