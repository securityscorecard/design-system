{"version":3,"file":"Inline.enums-Cb7IYB12.js","sources":["../../src/components/layout/Inline/Inline.tsx","../../src/components/layout/Inline/Inline.enums.ts"],"sourcesContent":["import styled from 'styled-components';\nimport { prop } from 'ramda';\nimport { isNotUndefined, isNumber } from 'ramda-adjunct';\nimport { Property } from 'csstype';\nimport cls from 'classnames';\n\nimport { SpaceSize } from '../../../theme/space.types';\nimport { getSpace } from '../../../utils';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { StretchEnum } from './Inline.enums';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\ntype Stretch = (typeof StretchEnum)[keyof typeof StretchEnum];\n\nexport interface InlineProps {\n  /**\n   * Whitespace between each child of the Inline\n   */\n  gap?: SpaceSize;\n  /**\n   * Horizontal alignment of elements inside Inline\n   *\n   */\n  justify?: Property.JustifyContent;\n  /**\n   * Vertical alignment of elements inside Inline\n   */\n  align?: Property.AlignItems;\n  /**\n   * Child or children to fill available space\n   */\n  stretch?: number | Stretch;\n  className?: string;\n}\n\nconst getStretchStyle = (\n  stretch: Required<InlineProps['stretch']>,\n): string | null => {\n  if (isNumber(stretch)) {\n    return `\n      > :nth-child(${stretch}) { flex: 1 1 0%; }\n    `;\n  }\n\n  switch (stretch) {\n    case 'start':\n      return `\n        > :first-child { flex: 1 1 0%; }\n      `;\n    case 'end':\n      return `\n        > :last-child { flex: 1 1 0%; }\n      `;\n    case 'all':\n      return `\n        > * { flex: 1 1 0%; }\n      `;\n    default:\n      return null;\n  }\n};\n\nconst Inline = styled.div.attrs<InlineProps>((props) => ({\n  className: cls(CLX_LAYOUT, props?.className),\n  gap: props.gap ?? SpaceSizes.none,\n}))<InlineProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: ${prop('justify')};\n  align-items: ${prop('align')};\n\n  ${({ stretch }) => isNotUndefined(stretch) && getStretchStyle(stretch)}\n\n  /* FIXME: Until we remove 'margin' property from other components we need to\n    increase specificity of those nesting , since it can be overridden by inner\n    elements with the same specificity. This can lead to inconsistent output\n    of visual tests if styled-components puts CSS in a different order into the Head. */\n  && > * {\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  && > * + * {\n    margin-left: ${({ gap, theme }) => getSpace(gap, { theme })};\n  }\n`;\n\nexport default Inline;\n","export const StretchEnum = {\n  start: 'start',\n  end: 'end',\n  all: 'all',\n} as const;\n"],"names":["cov_2jirl9l77z","s","getStretchStyle","prop","stretch","isNotUndefined","b","gap","theme","Inline","cov_1mdbrli1yx","actualCoverage","StretchEnum","start","end","all"],"mappings":"6mIAwC4BA,EAAA,EAAAC,EAyBzB,CAAA,IAAA,MAAAC,EAIkBC,GAGdC,CAAQ,GAARA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAQ,CAAA,IAAMC,GAAsB,EAAAL,OAAAA,EAAA,EAAAM,EAAAN,CAAAA,EAAAA,CAAAA,IAAAA,EAAAC,EAAAA,OAYrBM;AAAAA,qBAAKC,CAAAA;AAAAA,MAIZC,OAJwCD,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAIxCC,EAAAA;;;;;;+3CCxFR,OAAAC,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,IAAME,MAAAA,GAAAA,EAAAA,EAAAA,EAAc,CAAA,IAAA,CACzBC,MAAO,QACPC,IAAK,MACLC,IAAK,KACP"}