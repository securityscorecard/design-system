{"version":3,"file":"UserAvatar-CcKOdpGg.js","sources":["../../node_modules/ramda/es/toUpper.js","../../src/components/UserAvatar/UserAvatar.enums.ts","../../src/components/UserAvatar/UserAvatar.tsx"],"sourcesContent":["import invoker from \"./invoker.js\";\n/**\n * The upper case version of a string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category String\n * @sig String -> String\n * @param {String} str The string to upper case.\n * @return {String} The upper case version of `str`.\n * @see R.toLower\n * @example\n *\n *      R.toUpper('abc'); //=> 'ABC'\n */\n\nvar toUpper =\n/*#__PURE__*/\ninvoker(0, 'toUpperCase');\nexport default toUpper;","export const UserAvatarSizes = {\n  md: 'md',\n  sm: 'sm',\n} as const;\n","import styled, { css } from 'styled-components';\nimport { any, pipe, take, toUpper, trim } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport { ButtonColors, ButtonVariants } from '../Button/Button.enums';\nimport type { UserAvatarProps, UserAvatarRootProps } from './UserAvatar.types';\nimport { getRadii, getToken, pxToRem } from '../../utils/helpers';\nimport { UserAvatarSizes } from './UserAvatar.enums';\nimport { BaseButton } from '../_internal/BaseButton';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { Text } from '../Text';\n\nconst smallAvatar = css`\n  width: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n  height: ${pipe(getToken('size-action-size-sm'), pxToRem)};\n`;\nconst mediumAvatar = css`\n  width: ${pipe(getToken('size-action-size'), pxToRem)};\n  height: ${pipe(getToken('size-action-size'), pxToRem)};\n`;\n\nconst avatar = css`\n  background-color: var(--sscds-color-primary-9);\n`;\n\nconst invertedAvatar = css`\n  background-color: var(--sscds-color-neutral-0);\n  &:hover {\n    background-color: var(--sscds-color-primary-3);\n  }\n  &:active {\n    background-color: var(--sscds-color-primary-6);\n  }\n`;\n\nconst avatarSizes = {\n  [UserAvatarSizes.sm]: smallAvatar,\n  [UserAvatarSizes.md]: mediumAvatar,\n};\nconst userAvatarStyle = css<UserAvatarRootProps>`\n  border-radius: ${getRadii('round')};\n  ${({ $size }) => avatarSizes[$size]};\n  ${({ $isInverted }) => ($isInverted ? invertedAvatar : avatar)};\n`;\n\nconst RootUserAvatar = styled.div<UserAvatarRootProps>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  ${userAvatarStyle};\n`;\nconst normalizeString = pipe(trim, take(2), toUpper);\n\nconst UserAvatar = ({\n  label,\n  size = UserAvatarSizes.md,\n  className,\n  href,\n  to,\n  onClick,\n  isInverted = false,\n  ...props\n}: UserAvatarProps) =>\n  any(isNotUndefined, [href, to, onClick]) ? (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      aria-label=\"User avatar\"\n      as={BaseButton}\n      className={cls(CLX_COMPONENT, className)}\n      color={ButtonColors.primary}\n      href={href}\n      paddingSize={SpaceSizes.none}\n      to={to}\n      variant={ButtonVariants.solid}\n      onClick={onClick}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  ) : (\n    <RootUserAvatar\n      $isInverted={isInverted}\n      $size={size}\n      className={cls(CLX_COMPONENT, className)}\n      {...props}\n    >\n      <Text variant={isInverted ? 'default' : 'white'}>\n        {normalizeString(label)}\n      </Text>\n    </RootUserAvatar>\n  );\n\nexport default UserAvatar;\n"],"names":["toUpper","invoker","cov_bhcxuhoso","actualCoverage","UserAvatarSizes","md","sm","cov_1uucwocc6l","path","hash","global","gcv","coverageData","coverage","avatar","css","pxToRem","pipe","getToken","mediumAvatar","userAvatarStyle","$isInverted","RootUserAvatar","invertedAvatar","s","to","avatarSizes","props","isNotUndefined"],"mappings":"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","x_google_ignoreList":[0]}