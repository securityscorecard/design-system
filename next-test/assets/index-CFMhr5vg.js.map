{"version":3,"file":"index-CFMhr5vg.js","sources":["../../src/components/_internal/BaseDateRangePicker/styles.ts","../../src/components/_internal/BaseDateRangePicker/BaseDateRangePicker.tsx","../../src/components/_internal/BaseDateRangePicker/index.ts"],"sourcesContent":["import { css } from 'styled-components';\n\nexport const dateRangePickerStyles = css`\n  .react-datepicker__day--in-selecting-range {\n    background-color: var(--sscds-color-neutral-0);\n    color: var(--sscds-color-text-default);\n  }\n  .react-datepicker__day--in-range {\n    background-color: var(--sscds-color-background-selectable-active);\n    color: var(--sscds-color-text-default);\n    border-radius: 0;\n  }\n  .react-datepicker__day--selected,\n  .react-datepicker__day--range-start,\n  .react-datepicker__day--range-end,\n  .react-datepicker__day--selecting-range-start {\n    background-color: var(--sscds-color-primary-9);\n    font-weight: var(--sscds-font-weight-elementlabel-strong);\n    color: var(--sscds-color-text-white);\n  }\n  .react-datepicker__day--selected,\n  .react-datepicker__day--selecting-range-start {\n    border-radius: var(--sscds-radii-default);\n  }\n  .react-datepicker__day--range-start {\n    border-radius: var(--sscds-radii-rounded) 0 0 var(--sscds-radii-rounded);\n  }\n  .react-datepicker__day--range-end {\n    border-radius: 0 var(--sscds-radii-rounded) var(--sscds-radii-rounded) 0;\n  }\n\n  .react-datepicker__day--in-range:not(\n      .react-datepicker__day--range-start,\n      .react-datepicker__day--range-end\n    ):hover {\n    border-radius: 0;\n  }\n`;\n","import styled from 'styled-components';\nimport { any, prop } from 'ramda';\nimport { isNotNull } from 'ramda-adjunct';\n\nimport { dateRangePickerStyles } from './styles';\nimport { BaseDateRangePickerProps } from './BaseDateRangePicker.types';\nimport { BaseSingleDatePicker } from '../BaseSingleDatePicker';\nimport { Inline } from '../../layout/Inline';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { StretchEnum } from '../../layout/Inline/Inline.enums';\nimport { CLX_COMPONENT } from '../../../theme/constants';\n\nconst StyledDatePicker = styled.div`\n  ${dateRangePickerStyles}\n  width: 100%;\n`;\n\nconst isRangeDefined = any(isNotNull);\n\nconst BaseDateRangePicker = ({\n  value = { startDate: null, endDate: null },\n  onChange,\n  minDate,\n  maxDate,\n  placeholder,\n}: BaseDateRangePickerProps) => {\n  const { startDate, endDate } = value;\n  const startDatePlaceholder = prop('startDate', placeholder);\n  const endDatePlaceholder = prop('endDate', placeholder);\n\n  const handleStartDateChange = (newStartDate) => {\n    onChange(\n      isRangeDefined([newStartDate, endDate])\n        ? { startDate: newStartDate, endDate }\n        : undefined,\n    );\n  };\n\n  const handleEndDateChange = (newEndDate) => {\n    onChange(\n      isRangeDefined([startDate, newEndDate])\n        ? { startDate, endDate: newEndDate }\n        : undefined,\n    );\n  };\n\n  return (\n    <StyledDatePicker className={CLX_COMPONENT}>\n      <Inline gap={SpaceSizes.sm} stretch={StretchEnum.all}>\n        <BaseSingleDatePicker\n          endDate={endDate}\n          maxDate={maxDate}\n          minDate={minDate}\n          placeholder={startDatePlaceholder || 'Start date'}\n          startDate={startDate}\n          value={startDate}\n          onChange={handleStartDateChange}\n        />\n        <BaseSingleDatePicker\n          endDate={endDate}\n          maxDate={maxDate}\n          minDate={startDate || minDate}\n          placeholder={endDatePlaceholder || 'End date'}\n          startDate={startDate}\n          value={endDate}\n          onChange={handleEndDateChange}\n        />\n      </Inline>\n    </StyledDatePicker>\n  );\n};\n\nexport default BaseDateRangePicker;\n","export { default as BaseDateRangePicker } from './BaseDateRangePicker';\nexport * from './BaseDateRangePicker.types';\n"],"names":["cov_1ykvzq15l1","actualCoverage","cov_1w1ldfnoi6","path","hash","global","gcv","coverageData","coverage","StyledDatePicker","s","styled","div","withConfig","displayName","componentId","dateRangePickerStyles","isRangeDefined","any","isNotNull","BaseDateRangePicker","onChange","minDate","maxDate","placeholder","f","startDate","endDate","value","endDatePlaceholder","newStartDate","newEndDate","b","jsx","className","CLX_COMPONENT","cov_1zhpx363t6"],"mappings":"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"}