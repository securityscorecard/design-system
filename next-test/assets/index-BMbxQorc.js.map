{"version":3,"file":"index-BMbxQorc.js","sources":["../../src/components/_internal/BaseTabs/BaseTabs.enums.ts","../../src/components/_internal/BaseTabs/BaseTabsWrapper.tsx","../../src/components/Tabs/Tabs.tsx","../../src/components/_internal/BaseTabs/BaseTabLabel.tsx","../../src/components/Tabs/Tab.tsx","../../src/components/Tabs/index.ts"],"sourcesContent":["export const BaseTabVariants = {\n  text: 'text',\n  underline: 'underline',\n  segmented: 'segmented',\n} as const;\n","import styled, { css } from 'styled-components';\n\nimport { Padbox } from '../../layout';\nimport { getColor, getFormStyle, getRadii } from '../../../utils';\nimport { Variants } from './BaseTabLabel.types';\nimport { BaseTabVariants } from './BaseTabs.enums';\n\nexport const BaseTabsWrapper = styled(Padbox)<{\n  $variant: Variants;\n  $isExpanded: boolean;\n}>`\n  display: inline-block;\n\n  ${({ $variant, $isExpanded }) =>\n    $variant === BaseTabVariants.segmented &&\n    $isExpanded &&\n    css`\n      width: 100%;\n      flex-grow: 1;\n    `};\n\n  ${({ $variant }) =>\n    $variant === BaseTabVariants.segmented &&\n    css`\n      background: ${getColor('neutral.0')};\n      box-shadow: inset 0 0 0 1px ${getFormStyle('borderColor')};\n      border-radius: ${getRadii('default')};\n    `};\n`;\n","import { Children, cloneElement, isValidElement } from 'react';\nimport { equals } from 'ramda';\n\nimport { Inline } from '../layout';\nimport { TabProps, TabsProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { BaseTabsWrapper } from '../_internal/BaseTabs/BaseTabsWrapper';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Tabs = ({\n  selectedValue,\n  selectedPatternMatcher = equals,\n  children,\n  onSelectTab,\n  variant = TabVariants.underline,\n  isExpanded = false,\n}: TabsProps) => (\n  <BaseTabsWrapper\n    $isExpanded={isExpanded}\n    $variant={variant}\n    className={CLX_COMPONENT}\n    paddingSize={\n      variant === TabVariants.segmented ? SpaceSizes.xs : SpaceSizes.none\n    }\n  >\n    <Inline\n      gap={\n        variant === TabVariants.segmented\n          ? SpaceSizes.sm\n          : variant === TabVariants.underline\n          ? SpaceSizes.none\n          : SpaceSizes.lg\n      }\n      role=\"tablist\"\n      stretch={isExpanded ? 'all' : 0}\n    >\n      {Children.map(children, (tab) => {\n        if (!isValidElement(tab)) {\n          return null;\n        }\n\n        return cloneElement<Partial<TabProps>>(tab, {\n          key: tab.props.value,\n          __variant: variant,\n          __isExpanded: isExpanded,\n          __isSelected: selectedPatternMatcher(tab.props.value, selectedValue),\n          __onSelectTab: onSelectTab,\n        });\n      })}\n    </Inline>\n  </BaseTabsWrapper>\n);\n\nexport default Tabs;\n","import styled, { css } from 'styled-components';\nimport { __, includes, pipe, subtract } from 'ramda';\n\nimport { getColor, getRadii, getToken, pxToRem } from '../../../utils';\nimport { BaseLabelProps } from './BaseTabLabel.types';\nimport { BaseTabVariants } from './BaseTabs.enums';\nimport { Padbox } from '../../layout/Padbox';\n\nconst underlineTab = css<BaseLabelProps>`\n  font-weight: ${({ $isSelected }) =>\n    $isSelected\n      ? 'var(--sscds-font-weight-body-strong)'\n      : 'var(--sscds-font-weight-body-default)'};\n  line-height: 1.5rem;\n  color: ${getColor('neutral.900')};\n  border-bottom: 2px solid\n    ${({ $isSelected }) =>\n      $isSelected ? getToken('color-action-primary') : getColor('neutral.300')};\n\n  &:hover {\n    color: ${getColor('neutral.900')};\n    border-bottom-color: ${getToken('color-action-primary-focus')};\n  }\n`;\n\nconst textTab = css<BaseLabelProps>`\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n  color: ${({ $isSelected }) =>\n    $isSelected\n      ? getColor('neutral.900')\n      : getToken('color-action-link-primary')};\n\n  &:hover {\n    color: ${getToken('color-action-link-primary-hover')};\n  }\n`;\n\nexport const segmentedTabSelected = css`\n  background: ${getColor('primary.50')};\n  border: 1px solid ${getColor('primary.200')};\n`;\n\nconst segmentedTab = css<BaseLabelProps>`\n  line-height: var(--sscds-font-lineheight-elementlabel);\n\n  height: ${({ theme }) =>\n    pipe(\n      getToken('size-action-size'),\n      subtract(__, 2 * theme.space.xs),\n      pxToRem,\n    )({ theme })};\n  border: 1px solid transparent;\n  ${({ $isSelected }) => $isSelected && segmentedTabSelected};\n\n  border-radius: ${getRadii('half')};\n  color: ${getColor('neutral.900')};\n\n  &:hover {\n    color: ${getToken('color-action-primary-hover')};\n  }\n\n  &:active {\n    color: ${getToken('color-action-primary-active')};\n  }\n`;\n\nconst tabVariants = {\n  [BaseTabVariants.text]: textTab,\n  [BaseTabVariants.underline]: underlineTab,\n  [BaseTabVariants.segmented]: segmentedTab,\n};\n\nconst BaseTabLabel = styled(Padbox).withConfig({\n  shouldForwardProp: (property) =>\n    !includes(property, ['paddingType', 'paddingSize', 'theme']),\n})<BaseLabelProps>`\n  display: flex;\n  align-items: center;\n  outline: none;\n  text-decoration: none;\n  cursor: pointer;\n\n  font-size: ${getToken('font-action-size')};\n\n  ${({ $isExpanded }) =>\n    $isExpanded &&\n    css`\n      justify-content: center;\n    `};\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  ${({ $variant }) => tabVariants[$variant]};\n`;\n\nexport default BaseTabLabel;\n","import { KeyboardEvent, MouseEvent } from 'react';\n\nimport { TabProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { requireRouterLink } from '../../utils/require-router-link';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { PaddingTypes } from '../layout/Padbox/Padbox.enums';\nimport BaseTabLabel from '../_internal/BaseTabs/BaseTabLabel';\n\nconst Tab = ({\n  children,\n  onClick,\n  value,\n  __variant,\n  __isExpanded,\n  __isSelected,\n  __onSelectTab,\n}: TabProps) => {\n  const isLink = value?.toString()?.startsWith('/');\n  const handleKeyDown = (e: KeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      __onSelectTab(value);\n    }\n  };\n  const handler = isLink\n    ? { to: value, onClick }\n    : {\n        onClick: (e: MouseEvent<HTMLAnchorElement>) => {\n          __onSelectTab(value);\n          onClick?.(e);\n        },\n        onKeyDown: (e: KeyboardEvent<HTMLAnchorElement>) => {\n          handleKeyDown(e);\n        },\n      };\n  let RouterLink = null;\n\n  if (isLink) {\n    RouterLink = requireRouterLink();\n  }\n\n  const paddingSize =\n    __variant === TabVariants.segmented\n      ? SpaceSizes.sm\n      : __variant === TabVariants.underline\n      ? SpaceSizes.md\n      : SpaceSizes.none;\n\n  return (\n    <BaseTabLabel\n      $isExpanded={__isExpanded}\n      $isSelected={__isSelected}\n      $variant={__variant}\n      aria-selected={__isSelected}\n      as={isLink ? RouterLink : 'a'}\n      paddingSize={paddingSize}\n      paddingType={PaddingTypes.squish}\n      role=\"tab\"\n      tabIndex={0}\n      {...handler}\n    >\n      {children}\n    </BaseTabLabel>\n  );\n};\n\nexport default Tab;\n","export * as TabsEnums from './Tabs.enums';\nexport { default as Tabs } from './Tabs';\nexport { default as Tab } from './Tab';\nexport * from './Tabs.types';\n"],"names":["cov_1sl380hdhr","actualCoverage","BaseTabVariants","text","underline","segmented","BaseTabsWrapper","cov_2rc4gkn0eq","s","styled","withConfig","displayName","componentId","cov_1oe7yg7xsi","path","hash","global","gcv","coverageData","coverage","equals","children","onSelectTab","variant","isExpanded","b","tab","f","jsx","$isExpanded","key","value","__variant","__isExpanded","selectedPatternMatcher","props","selectedValue","none","Inline","Tabs","$isSelected","getToken","cov_vmogpxacq","segmentedTab","pipe","theme","segmentedTabSelected","textTab","css","getColor","$variant","__onSelectTab","__isSelected","handleKeyDown","toString","startsWith","cov_19a0gkj3rw","e","to","onClick","handler","isLink","onKeyDown","RouterLink","paddingSize","requireRouterLink","cov_ob2thfvid"],"mappings":"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OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,KAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,OAAA,OAAA,MAAA,EAAA,IAAA,CAAA,KAAA,OAAA,OAAA,MAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,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,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA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"}