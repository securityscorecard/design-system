import{j as i}from"./jsx-runtime-Nms4Y4qS.js";import{q as o}from"./styled-components.browser.esm-Dp0SDG1F.js";function e(){var n="/home/runner/work/design-system/design-system/src/components/Badge/Badge.tsx",c="bb6743ed49a305b71506676414611babcc43f702",a=window,s="__coverage__",u={path:"/home/runner/work/design-system/design-system/src/components/Badge/Badge.tsx",statementMap:{0:{start:{line:3,column:18},end:{line:6,column:68}},1:{start:{line:7,column:17},end:{line:10,column:198}},2:{start:{line:11,column:19},end:{line:14,column:407}},3:{start:{line:15,column:23},end:{line:20,column:1}},4:{start:{line:16,column:2},end:{line:18,column:3}},5:{start:{line:17,column:4},end:{line:17,column:17}},6:{start:{line:19,column:2},end:{line:19,column:15}},7:{start:{line:22,column:2},end:{line:27,column:3}},8:{start:{line:23,column:4},end:{line:26,column:9}},9:{start:{line:28,column:2},end:{line:33,column:7}},10:{start:{line:35,column:0},end:{line:35,column:28}},11:{start:{line:37,column:0},end:{line:43,column:50}},12:{start:{line:39,column:4},end:{line:39,column:32}},13:{start:{line:41,column:4},end:{line:41,column:1191}}},fnMap:{0:{name:"(anonymous_0)",decl:{start:{line:15,column:23},end:{line:15,column:24}},loc:{start:{line:15,column:34},end:{line:20,column:1}},line:15},1:{name:"Badge",decl:{start:{line:21,column:9},end:{line:21,column:14}},loc:{start:{line:21,column:22},end:{line:34,column:1}},line:21}},branchMap:{0:{loc:{start:{line:16,column:2},end:{line:18,column:3}},type:"if",locations:[{start:{line:16,column:2},end:{line:18,column:3}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:16},1:{loc:{start:{line:22,column:2},end:{line:27,column:3}},type:"if",locations:[{start:{line:22,column:2},end:{line:27,column:3}},{start:{line:void 0,column:void 0},end:{line:void 0,column:void 0}}],line:22},2:{loc:{start:{line:25,column:6},end:{line:25,column:58}},type:"binary-expr",locations:[{start:{line:25,column:6},end:{line:25,column:21}},{start:{line:25,column:41},end:{line:25,column:58}}],line:25},3:{loc:{start:{line:30,column:4},end:{line:32,column:47}},type:"binary-expr",locations:[{start:{line:30,column:4},end:{line:30,column:19}},{start:{line:30,column:39},end:{line:32,column:47}}],line:30},4:{loc:{start:{line:31,column:46},end:{line:31,column:81}},type:"binary-expr",locations:[{start:{line:31,column:46},end:{line:31,column:66}},{start:{line:31,column:70},end:{line:31,column:81}}],line:31}},s:{0:0,1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0,13:0},f:{0:0,1:0},b:{0:[0,0],1:[0,0],2:[0,0],3:[0,0],4:[0,0]},inputSourceMap:{version:3,file:null,sources:["/home/runner/work/design-system/design-system/src/components/Badge/Badge.tsx"],names:["props","children","Badge"],mappings:"AAkFM;AAjFN;AA2BA;AAA6B;AAAA;AAAA;AAM7B;AAA4B;AAAA;AAAA;AAY5B;AAA8B;AAAA;AAAA;AAqB9B;AACE;AACE;AAAO;AAET;AACF;AAOA;AACE;AACE;AAEKA;AAAMC;AACyB;AAClC;AAIJ;AAEKD;AAAMC;AAGI;AAEgC;AAKzC;AAIR;AAGAC;AAEA;"},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"bb6743ed49a305b71506676414611babcc43f702"},t=a[s]||(a[s]={});(!t[n]||t[n].hash!==c)&&(t[n]=u);var r=t[n];return e=function(){return r},r}e();const d=(e().s[0]++,o.span.withConfig({displayName:"Badge__BadgeRoot",componentId:"sc-i5g4jp-0"})(["position:relative;display:inline-flex;vertical-align:middle;"])),m=(e().s[1]++,o.span.withConfig({displayName:"Badge__BadgeDot",componentId:"sc-i5g4jp-1"})(["display:block;width:0.5rem;height:0.5rem;background-color:var(--sscds-color-danger-500);border-radius:var(--sscds-radii-circle);position:absolute;top:0;right:0;transform:translate(30%,-30%);"])),A=(e().s[2]++,o.span.withConfig({displayName:"Badge__BadgeCount",componentId:"sc-i5g4jp-2"})(["display:grid;place-content:center;min-width:1rem;height:1rem;background-color:var(--sscds-color-danger-600);border-radius:var(--sscds-radii-rounded);position:absolute;top:0;right:0;transform:var(--sscds-badge-translate);padding-inline:var(--sscds-space-1x);color:var(--sscds-color-text-inverse);font-size:var(--sscds-font-size-body-sm);font-weight:var(--sscds-font-weight-body-strong);line-height:1;"]));e().s[3]++;const p=n=>(e().f[0]++,e().s[4]++,n>=100?(e().b[0][0]++,e().s[5]++,"99+"):(e().b[0][1]++,e().s[6]++,n));function l(n){return e().f[1]++,e().s[7]++,n.variant==="dot"?(e().b[1][0]++,e().s[8]++,i.jsxs(d,{children:[n.children,(e().b[2][0]++,n.isVisible&&(e().b[2][1]++,i.jsx(m,{})))]})):(e().b[1][1]++,e().s[9]++,i.jsxs(d,{children:[n.children,(e().b[3][0]++,n.count>0&&(e().b[3][1]++,i.jsx(A,{style:{"--sscds-badge-translate":`translate(${e().b[4][0]++,n.positionOffset??(e().b[4][1]++,"50%, -50%")})`},children:p(n.count)})))]}))}e().s[10]++;l.displayName="Badge";e().s[11]++;try{e().s[12]++,l.displayName="Badge",e().s[13]++,l.__docgenInfo={description:"Discriminated unions doesn't work on destructured props. We need to disable the rule to make\nTypeScript correctly narrow type based on the `variant` property.",displayName:"Badge",props:{variant:{defaultValue:null,description:"Badge visual variant. If set to `standard` the `count` property is required.\nIf set to `dot` the `isVisible` property is required.",name:"variant",required:!1,type:{name:"enum",value:[{value:'"dot"'},{value:'"standard"'}]}},isVisible:{defaultValue:null,description:"Controls visibility of Badge in `dot` variant.",name:"isVisible",required:!0,type:{name:"boolean"}},count:{defaultValue:null,description:"Set the badge count in the `standard` variant",name:"count",required:!0,type:{name:"number"}},positionOffset:{defaultValue:null,description:`Set the position offset to fix potentional issues where the badge doesn't fit to base position.
The value will be set to transform-translate CSS property.`,name:"positionOffset",required:!1,type:{name:"string"}}}}}catch{}export{l as B};
//# sourceMappingURL=Badge-rB8-2_qW.js.map
