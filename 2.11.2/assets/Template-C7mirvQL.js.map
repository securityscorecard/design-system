{"version":3,"file":"Template-C7mirvQL.js","sources":["../../src/components/DatatableV2/mocks/data.ts","../../src/components/DatatableV2/stories/Template.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\n\ntype DetectionMethod =\n  | 'WHOIS'\n  | 'DNS'\n  | 'SSL'\n  | '3rd party'\n  | 'SSC Res.'\n  | 'Pub. Data'\n  | 'Cloud';\ntype Grade = 'A' | 'B' | 'C' | 'D' | 'F';\ntype Status = 'Claimed' | 'Attributed' | 'Disputed' | 'Removed' | 'Dynamic';\ninterface Organization {\n  name: string;\n  domain: string;\n  score: number;\n  grade: Grade;\n}\n\nexport interface DataSource {\n  id: string;\n  ipAddress: string;\n  status: Status;\n  country: string;\n  findingsCount: number;\n  observationDate: Date;\n  organization: Organization;\n  detectionMethod: DetectionMethod[] | undefined;\n}\n\nfaker.seed(42);\nfaker.setDefaultRefDate('2023-10-16T00:00:00.000Z');\n\nconst createItem = (): DataSource => ({\n  id: faker.string.uuid(),\n  country: faker.location.country(),\n  detectionMethod: faker.helpers.arrayElements<DetectionMethod>([\n    'WHOIS',\n    'DNS',\n    'SSL',\n    '3rd party',\n    'SSC Res.',\n    'Pub. Data',\n    'Cloud',\n  ]),\n  findingsCount: faker.number.int(2000),\n  ipAddress: faker.internet.ipv4(),\n  observationDate: faker.date.past({ years: 3 }),\n  organization: {\n    domain: faker.internet.domainName(),\n    name: faker.company.name(),\n    score: faker.number.int({ min: 40, max: 100 }),\n    grade: faker.helpers.arrayElement<Grade>(['A', 'B', 'C', 'D', 'F']),\n  },\n  status: faker.helpers.arrayElement<Status>([\n    'Claimed',\n    'Attributed',\n    'Disputed',\n    'Removed',\n    'Dynamic',\n  ]),\n});\n\nexport const generateData = (items: number): DataSource[] => {\n  const data: DataSource[] = [];\n\n  for (let i = 0; i < items; i += 1) {\n    data.push(createItem());\n  }\n\n  return data;\n};\n","import { StoryFn } from '@storybook/react';\n\nimport Datatable from '../Datatable';\nimport { DataSource, generateData } from '../mocks/data';\nimport { DatatableColumnDef } from '../Datatable.types';\nimport { Pill } from '../../Pill';\nimport { Cluster } from '../../layout';\n\nexport const columns: DatatableColumnDef<DataSource>[] = [\n  { accessorKey: 'organization.name', header: 'Name', enableHiding: true },\n  {\n    accessorKey: 'organization.domain',\n    header: 'Domain',\n    headerComponent: (props) => {\n      return <span>ðŸ”— {props.column.columnDef.header}</span>;\n    },\n  },\n  {\n    accessorFn: (row) => `${row.organization.grade} ${row.organization.score}`,\n    header: 'Score and grade',\n    id: 'score',\n  },\n  {\n    accessorKey: 'detectionMethod',\n    header: 'Detection method',\n    cell: (props) => {\n      return (\n        <Cluster gap=\"xs\">\n          {props.cell.getValue<DataSource['detectionMethod']>()?.map((val) => (\n            <Pill key={val} label={val} />\n          ))}\n        </Cluster>\n      );\n    },\n  },\n];\n\nexport type Story = StoryFn<typeof Datatable<DataSource>>;\nconst Template: Story = (args) => <Datatable {...args} />;\nTemplate.args = {\n  columns,\n  data: generateData(25),\n  enablePersistentState: false,\n  id: 'datatable_template',\n  initialState: {\n    pagination: { pageSize: 5 },\n  },\n  rowsPerPageOptions: [5, 10, 25, 50, 100],\n  getRowId: (row) => row.id,\n};\n\nexport default Template;\n"],"names":["cov_1tmnzzczri","s","cov_u2p87w4bl","path","hash","global","gcv","coverageData","coverage","actualCoverage","columns","accessorKey","header","enableHiding","headerComponent","f","jsxs","children","props","column","columnDef","accessorFn","row","organization","grade","score","id","jsx","Cluster","gap","cell","getValue","map","val","args","label","Template","Datatable","rowsPerPageOptions","getRowId","enablePersistentState"],"mappings":"4/FAAsBA,IAAAC,kwBCcH,SAAAC,GAAA,CAAA,IAAAC,EAAA,8FAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,8FAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,6FAAA,EAAA,MAAA,CAAA,YAAA,eAAA,OAAA,UAAA,UAAA,cAAA,SAAA,eAAA,kBAAA,QAAA,SAAA,YAAA,aAAA,MAAA,eAAA,QAAA,QAAA,KAAA,OAAA,WAAA,MAAA,MAAA,WAAA,OAAA,OAAA,wBAAA,eAAA,aAAA,WAAA,qBAAA,UAAA,EAAA,SAAA,m5BAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,EAAAA,UAAAO,CAAAA,OAAAA,CAAAA,EAAAA,CAAAP,CAAAA,EAAA,EALiD,MAAAQ,GAAAR,EAAA,EAAAD,EAAA,CAAA,IAAA,CAClE,CAAAU,YAAA,oBAAAC,OAAA,OAAAC,aAAA,EAAA,EACEF,CACQA,YAAA,sCAENG,oBAAQZ,EAAAa,EAAAA,OAAAb,EAAA,EAAAD,EAAA,CAAA,IAAKe,EAAA,KAAA,OAAAC,CAAAA,SAAAC,CAAAA,MAAAA,EAAAC,OAAAC,UAAAR,MAAA,CAAA,CAAA,EAAkC,EACjD,CAEFS,WAAAC,IAAApB,IAAAa,EAAA,CAAA,IAAAb,IAAAD,EAAAqB,CAAAA,IAAAA,GAAAA,EAAAC,aAAAC,KAAA,IAAAF,EAAAC,aAAAE,KAAA,IACEJ,OAAAA,kBACQK,GAAA,OACRA,EAEF,CACef,YAAA,kBACLC,OAAA,wBACSM,GAAA,OAAAhB,OAAAA,EAAAa,EAAAA,OAAAb,IAAAD,EAAA,CAAA,IAQjB0B,EAAA,IAAAC,EAAA,CAAAC,IAAA,KACDZ,UAAAC,EAAAA,EAAAY,KAAAC,SAAA,IAAAb,YAAAA,EAAAc,IAAAC,IAIsBC,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAAAA,MAAAA,EAAAA,CAAUC,MAAAF,CAAA,EAAVC,CAAAA,GACT,CACdxB,CAEuB,CACvBgB,CAAI,GAAAxB,EAAA,EAAAD,EAEsB,CAAA,IAAE,MAAAmC,EAAAF,IAAAhC,EAAA,EAAAa,EAAAb,CAAAA,IAAAA,EAAA,EAAAD,OAAA0B,EAAA,IAAAU,EAAA,CAAA,GAAAH,CAAA,CAAA,GAAAhC,IAAAD,EAAAmC,CAAAA,IAAAA,EAC5BF,KAAA,CACAI,QAAAA,EACAC,KAAAA,EAAmBjB,EAAII,EACzBc,sBAAA,GAEeJ,GAAAA"}