{"version":3,"file":"Footer-Buc45DsV.js","sources":["../../node_modules/ramda/es/unfold.js","../../src/components/_internal/BaseTable/Footer/GoToPage.tsx","../../src/components/Pagination/PaginationItem.tsx","../../src/components/Pagination/PageButtons.tsx","../../src/components/Pagination/Pagination.tsx","../../src/components/_internal/BaseTable/Footer/Footer.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\n\nvar unfold =\n/*#__PURE__*/\n_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n\n  return result;\n});\n\nexport default unfold;","import { type KeyboardEvent, useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { pxToRem } from '../../../../utils';\nimport { Inline } from '../../../layout';\nimport { Input } from '../../../forms';\nimport { GoToPageProps } from './GoToPage.types';\nimport { SpaceSizes } from '../../../../theme';\nimport { Text } from '../../../Text';\n\nconst SmallInput = styled(Input)`\n  padding: ${pxToRem(8, 16)};\n  width: ${pxToRem(72)};\n  height: ${pxToRem(32)};\n  appearance: textfield;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    appearance: none;\n    margin: 0;\n  }\n\n  &:focus {\n    padding: ${pxToRem(7, 15)};\n  }\n`;\n\nconst GoToPage = ({ pageCount, onPageChange }: GoToPageProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handlePageChange = (e: KeyboardEvent<HTMLInputElement>) => {\n    const { target, key } = e;\n    const { value } = target as HTMLInputElement;\n    const parsedValue = parseInt(value, 10);\n\n    if (key !== 'Enter') return;\n\n    if (parsedValue <= 0) {\n      onPageChange(1);\n      inputRef.current.value = '1';\n    } else if (parsedValue > pageCount) {\n      onPageChange(pageCount);\n      inputRef.current.value = pageCount.toString();\n    } else {\n      onPageChange(parsedValue);\n    }\n  };\n\n  return (\n    <Inline align=\"center\" gap={SpaceSizes.md}>\n      <Text as=\"label\" htmlFor=\"goToPageInput\" variant=\"subtle\">\n        Go to page:\n      </Text>\n      <SmallInput\n        ref={inputRef}\n        id=\"goToPageInput\"\n        placeholder=\"#\"\n        type=\"number\"\n        onKeyDown={handlePageChange}\n      />\n    </Inline>\n  );\n};\n\nexport default GoToPage;\n","import styled, { css } from 'styled-components';\n\nimport { getColor, getRadii, pxToRem } from '../../utils';\nimport { Padbox } from '../layout';\nimport { PaginationItemProps } from './Pagination.types';\n\nconst StyledPaginationComponent = styled.button<{\n  $isShrinked: boolean;\n  $isCurrent: boolean;\n}>`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  min-width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  padding: ${pxToRem(5, 6)};\n  margin: ${pxToRem(0, 4)};\n  background: none;\n  border: 1px solid transparent;\n  border-radius: ${getRadii('default')};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: ${getColor('neutral.900')};\n  cursor: pointer;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n  &:last-of-type {\n    margin-right: 0;\n  }\n  &:disabled {\n    color: ${getColor('neutral.600')};\n    cursor: default;\n  }\n\n  ${({ $isShrinked }) =>\n    $isShrinked &&\n    css`\n      min-width: ${pxToRem(32)};\n    `};\n\n  ${({ $isCurrent }) =>\n    $isCurrent\n      ? css`\n          border-color: ${getColor('neutral.400')};\n          background-color: ${getColor('neutral.300')};\n          font-size: var(--sscds-font-size-elementlabel-md);\n          font-weight: var(--sscds-font-weight-elementlabel-strong);\n          cursor: default;\n        `\n      : css`\n          &:hover {\n            border-color: ${getColor('neutral.400')};\n            background-color: ${getColor('neutral.0')};\n          }\n        `};\n`;\n\nexport const PaginationItem = ({\n  children,\n  isDisabled,\n  isCurrent,\n  isShrinked,\n  onClick,\n  ...props\n}: PaginationItemProps) => {\n  const handleOnClick = () => {\n    if (isCurrent) {\n      return;\n    }\n\n    onClick();\n  };\n  return (\n    <StyledPaginationComponent\n      $isCurrent={isCurrent}\n      $isShrinked={isShrinked}\n      data-testid=\"pagination-item\"\n      disabled={isDisabled}\n      type=\"button\"\n      onClick={handleOnClick}\n      {...props}\n    >\n      {children}\n    </StyledPaginationComponent>\n  );\n};\n\nexport const PaginationItemElipsis = styled(Padbox).attrs(() => ({\n  children: '...',\n}))`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: ${getColor('neutral.600')};\n  margin: ${pxToRem(0, 4)};\n`;\n","import { useMemo } from 'react';\nimport { unfold } from 'ramda';\n\nimport { PaginationItem, PaginationItemElipsis } from './PaginationItem';\nimport { PageButtonsProps } from './Pagination.types';\n\nconst generatePages = (start: number, end: number): number[] =>\n  unfold((p) => (p > end ? false : [p, p + 1]), start);\n\nexport const calculatePagePositions: (\n  currentPage: number,\n  pageCount: number,\n  positionsCount: number,\n) => {\n  showRightEllipsis: boolean;\n  showLeftEllipsis: boolean;\n  pages: number[];\n} = (currentPage, pageCount, positionsCount) => {\n  // number of fixed positions for edge sections\n  // [POSITIONS - 3 (first+last + elipsis)]\n  const threshold = positionsCount - 3;\n\n  const startPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? 2 // fixed, second page\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - threshold\n      : // this will count positions before current page in middle section\n        // [current page - round up(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage - Math.ceil((positionsCount - 4 - 1) / 2);\n  const endPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? positionsCount - 2\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - 1 // fixed, second last page\n      : // this will count positions after current page in middle section\n        // [current page - round down(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage + Math.floor((positionsCount - 4 - 1) / 2);\n\n  const pages = generatePages(startPage, endPage);\n\n  return {\n    showLeftEllipsis: startPage > 2,\n    showRightEllipsis: endPage < pageCount - 1,\n    pages,\n  };\n};\n\nconst formatNumber = (val: number) =>\n  new Intl.NumberFormat('en-US').format(val);\n\nconst PageButtons = ({\n  currentPage,\n  pageCount,\n  onChange,\n  positions,\n  renderItem = PaginationItem,\n}: PageButtonsProps) => {\n  const { pages, showLeftEllipsis, showRightEllipsis } = useMemo(\n    () => calculatePagePositions(currentPage, pageCount, positions),\n    [currentPage, pageCount, positions],\n  );\n\n  if (pageCount <= positions) {\n    return (\n      <>\n        {generatePages(1, pageCount).map((page) =>\n          renderItem({\n            key: `page-${page}`,\n            page,\n            isCurrent: page === currentPage,\n            onClick: () => onChange(page),\n            children: formatNumber(page),\n          }),\n        )}\n      </>\n    );\n  }\n\n  return positions !== 1 ? (\n    <>\n      {renderItem({\n        page: 1,\n        isCurrent: currentPage === 1,\n        onClick: () => onChange(1),\n        children: <>1</>,\n      })}\n      {showLeftEllipsis && <PaginationItemElipsis />}\n      {pages.map((page) =>\n        renderItem({\n          key: page,\n          page,\n          isCurrent: currentPage === page,\n          onClick: () => onChange(page),\n          children: formatNumber(page),\n        }),\n      )}\n      {showRightEllipsis && <PaginationItemElipsis />}\n      {renderItem({\n        page: pageCount,\n        isCurrent: currentPage === pageCount,\n        onClick: () => onChange(pageCount),\n        children: formatNumber(pageCount),\n      })}\n    </>\n  ) : (\n    <>\n      {renderItem({\n        key: currentPage,\n        page: currentPage,\n        isCurrent: true,\n        onClick: () => onChange(currentPage),\n        children: formatNumber(currentPage),\n      })}\n    </>\n  );\n};\n\nexport default PageButtons;\n","import { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { PaginationItem } from './PaginationItem';\nimport PageButtons from './PageButtons';\nimport { Inline } from '../layout';\nimport { PaginationProps } from './Pagination.types';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Pagination = ({\n  pageCount,\n  currentPage,\n  onPageChange,\n  pageButtonsCount = 8,\n  renderItem = PaginationItem,\n}: PaginationProps) => (\n  <Inline className={CLX_COMPONENT} gap={SpaceSizes.sm} justify=\"center\">\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Previous page',\n        page: currentPage - 1,\n        isDisabled: currentPage - 1 === 0,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage - 1),\n        children: <Icon name={SSCIconNames.longArrowLeft} />,\n      })}\n    {pageButtonsCount !== 0 && (\n      <PageButtons\n        currentPage={currentPage}\n        pageCount={pageCount}\n        positions={pageButtonsCount}\n        renderItem={renderItem}\n        onChange={onPageChange}\n      />\n    )}\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Next page',\n        page: currentPage + 1,\n        isDisabled: currentPage + 1 > pageCount,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage + 1),\n        children: <Icon name={SSCIconNames.longArrowRight} />,\n      })}\n  </Inline>\n);\n\nexport default Pagination;\n","import styled from 'styled-components';\n\nimport { getColor, pxToRem } from '../../../../utils';\nimport { Padbox } from '../../../layout';\nimport { Spinner } from '../../../Spinner';\nimport { FooterProps } from './Footer.types';\nimport GoToPage from './GoToPage';\nimport { Pagination } from '../../../Pagination';\nimport { SpaceSizes } from '../../../../theme';\nimport { PaddingTypes } from '../../../layout/Padbox/Padbox.enums';\n\nconst StyledFooter = styled(Padbox)`\n  display: flex;\n  align-items: center;\n  border-top: 1px solid ${getColor('neutral.300')};\n`;\nconst LoadingContainer = styled.div`\n  padding: ${pxToRem(8, 24, 8, 8)};\n`;\nconst PaginationContainer = styled.div`\n  flex: 1 0 auto;\n`;\n\nconst Footer = ({\n  pageCount,\n  pageButtonsCount,\n  pageIndex,\n  onGotoPage,\n  isDataLoading = false,\n  hasPagination = true,\n}: FooterProps) => {\n  const handlePageChange = (page) => onGotoPage(page - 1);\n\n  return (\n    <StyledFooter\n      as=\"footer\"\n      data-testid=\"footer\"\n      flexDirection=\"row\"\n      paddingSize={SpaceSizes.md}\n      paddingType={PaddingTypes.squish}\n    >\n      <LoadingContainer>\n        {isDataLoading && (\n          <Spinner\n            borderWidth={2}\n            height={16}\n            horizontalMargin={0}\n            verticalMargin={0}\n            width={16}\n            dark\n          />\n        )}\n      </LoadingContainer>\n      {hasPagination && (\n        <>\n          <PaginationContainer>\n            <Pagination\n              currentPage={pageIndex + 1}\n              pageButtonsCount={pageButtonsCount}\n              pageCount={pageCount}\n              onPageChange={handlePageChange}\n            />\n          </PaginationContainer>\n          <GoToPage pageCount={pageCount} onPageChange={handlePageChange} />\n        </>\n      )}\n    </StyledFooter>\n  );\n};\n\nexport default Footer;\n"],"names":["unfold","_curry2","fn","seed","pair","result","cov_2bvsxwm574","path","hash","global","gcv","coverageData","coverage","actualCoverage","SmallInput","s","styled","Input","withConfig","displayName","componentId","pxToRem","pageCount","value","GoToPage","onPageChange","f","useRef","inputRef","e","target","current","b","parsedValue","toString","StyledPaginationComponent","cov_238luiekfu","button","isDisabled","isCurrent","isShrinked","onClick","getColor","cov_ywc797p02","generatePages","start","end","startPage","calculatePagePositions","currentPage","positionsCount","threshold","ceil","showRightEllipsis","PageButtons","positions","pages","endPage","showLeftEllipsis","useMemo","page","children","renderItem","PaginationItem","onChange","key","map","cov_28n95n1w3c","pageButtonsCount","jsxs","Inline","className","CLX_COMPONENT","gap","SpaceSizes","sm","justify","jsx","Icon","name","SSCIconNames","longArrowLeft","cov_2psdd8anuz","StyledFooter","Padbox","div","PaginationContainer","pageIndex","onGotoPage","isDataLoading","hasPagination","handlePageChange","as","flexDirection","Footer"],"mappings":"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GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA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","x_google_ignoreList":[0]}