{"version":3,"file":"Signal-BoxLEub5.js","sources":["../../src/components/Signal/common.tsx","../../src/components/Signal/BreachRiskSignal.tsx","../../src/components/Signal/BusinessImpactSignal.tsx","../../src/components/Signal/IncidentLikelihoodSignal.tsx","../../src/components/Signal/SeveritySignal.tsx","../../src/components/Signal/Signal.tsx"],"sourcesContent":["import { ComponentProps, PropsWithChildren } from 'react';\nimport cls from 'classnames';\n\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { svgPathData as positiveIcon } from '../../theme/icons/checkCircleSolid';\nimport { svgPathData as infoIcon } from '../../theme/icons/infoCircle';\nimport { svgPathData as criticalIcon } from '../../theme/icons/exclTriangleSolid';\nimport { BaseSvgProps } from './Signal.types';\n\nexport const criticalityLevels = {\n  critical: 4,\n  high: 3,\n  medium: 2,\n  low: 1,\n  none: 0,\n} as const;\n\nconst criticalityColorsSeverity = [\n  undefined,\n  'var(--sscds-color-signal-low)',\n  'var(--sscds-color-signal-medium)',\n  'var(--sscds-color-signal-high)',\n];\n\nfunction Svg({\n  children,\n  className,\n  ...props\n}: PropsWithChildren<ComponentProps<'svg'>>) {\n  return (\n    <svg\n      className={cls(CLX_COMPONENT, className)}\n      data-testid=\"ds-severity-icon\"\n      style={{\n        overflow: 'visible',\n        ...(props.style || {}),\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      {children}\n    </svg>\n  );\n}\n\nfunction VerticalBar({\n  height,\n  xPos,\n  fill = 'var(--sscds-color-signal-inactive)',\n}: {\n  height: number;\n  xPos: number;\n  fill: string;\n}) {\n  return (\n    <rect\n      height={height}\n      rx={1.5}\n      style={{ fill }}\n      width={3}\n      x={xPos}\n      y={16 - height}\n    />\n  );\n}\n\nexport function Vertical3Bars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 }) {\n  return (\n    <Svg\n      height={size}\n      style={{ color: criticalityColorsSeverity[criticality] }}\n      viewBox=\"0 0 16 16\"\n      width={size}\n      {...props}\n    >\n      <title>{title}</title>\n      {[0, 1, 2].map((v) => (\n        <VerticalBar\n          key={v}\n          fill={v < criticality ? 'currentColor' : undefined}\n          height={8 + v * 4}\n          xPos={1.5 + v * 5}\n        />\n      ))}\n    </Svg>\n  );\n}\n\nexport function Vertical4Bars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 | 4 }) {\n  return (\n    <svg\n      height={size}\n      style={{ color: 'var(--sscds-color-signal-business-impact)' }}\n      viewBox=\"0 0 18 16\"\n      width={(size / 16) * 18}\n      {...props}\n    >\n      <title>{title}</title>\n      {[0, 1, 2, 3].map((v) => (\n        <VerticalBar\n          key={v}\n          fill={v < criticality ? 'currentColor' : undefined}\n          height={4 + v * 4}\n          xPos={v * 5}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport function HorizontalBars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 }) {\n  return (\n    <svg\n      height={size}\n      style={{ color: criticalityColorsSeverity[criticality] }}\n      viewBox=\"0 0 16 16\"\n      width={size}\n      {...props}\n    >\n      <title>{title}</title>\n      {[0, 1, 2].map((v) => (\n        <rect\n          key={v}\n          fill={\n            v < criticality\n              ? 'currentColor'\n              : 'var(--sscds-color-signal-inactive)'\n          }\n          height=\"4\"\n          rx=\"2\"\n          width=\"16\"\n          y={12 - v * 6}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport const Icon = ({\n  signal,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { signal: 'info' | 'positive' | 'critical' }) => (\n  <Svg\n    height={size}\n    viewBox=\"0 0 512 512\"\n    width={size}\n    {...props}\n    style={{\n      ...(props.style || {}),\n      color:\n        signal === 'info'\n          ? 'var(--sscds-color-signal-info)'\n          : signal === 'positive'\n          ? 'var(--sscds-color-signal-positive)'\n          : 'var(--sscds-color-signal-high)', // we are using fixed color because it's not defined in DS\n    }}\n  >\n    <title>{title}</title>\n    <path\n      d={\n        signal === 'info'\n          ? infoIcon\n          : signal === 'positive'\n          ? positiveIcon\n          : criticalIcon\n      }\n      fill=\"currentColor\"\n    />\n  </Svg>\n);\n","import { Vertical3Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, BreachRiskSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is BreachRiskSignalKinds {\n  return ['high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function BreachRiskSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: BreachRiskSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  return (\n    <Vertical3Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} breach risk`}\n      {...props}\n    />\n  );\n}\nBreachRiskSignal.displayName = 'BreachRiskSignal';\n","import { Vertical4Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, BusinessImpactSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is BusinessImpactSignalKinds {\n  return ['critical', 'high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function BusinessImpactSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: BusinessImpactSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  return (\n    <Vertical4Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} business impact`}\n      {...props}\n    />\n  );\n}\nBusinessImpactSignal.displayName = 'BusinessImpactSignal';\n","import { Icon, Vertical3Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, IncidentLikelihoodSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is IncidentLikelihoodSignalKinds {\n  return ['critical', 'high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function IncidentLikelihoodSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: IncidentLikelihoodSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  if (kind !== 'critical') {\n    return (\n      <Vertical3Bars\n        criticality={criticalityLevels[kind]}\n        title={title ?? `${kind} incident likelihood`}\n        {...props}\n      />\n    );\n  }\n\n  return (\n    <Icon\n      signal={kind}\n      title={title ?? `${kind} incident likelihood`}\n      {...props}\n    />\n  );\n}\nIncidentLikelihoodSignal.displayName = 'IncidentLikelihoodSignal';\n","import { Icon, Vertical3Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, SeveritySignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is SeveritySignalKinds {\n  return ['high', 'medium', 'low', 'none', 'positive', 'info'].includes(kind);\n}\nexport default function SeveritySignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: SeveritySignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  if (['positive', 'info'].includes(kind)) {\n    return (\n      <Icon\n        signal={kind as 'positive' | 'info'}\n        title={title ?? `${kind} signal`}\n        {...props}\n      />\n    );\n  }\n  return (\n    <Vertical3Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} severity`}\n      {...props}\n    />\n  );\n}\nSeveritySignal.displayName = 'SeveritySignal';\n","import { isNilOrEmpty } from 'ramda-adjunct';\n\nimport {\n  BreachRiskSignalKinds,\n  BusinessImpactSignalKinds,\n  IncidentLikelihoodSignalKinds,\n  SeveritySignalKinds,\n  SignalProps,\n} from './Signal.types';\nimport BreachRiskSignal from './BreachRiskSignal';\nimport BusinessImpactSignal from './BusinessImpactSignal';\nimport IncidentLikelihoodSignal from './IncidentLikelihoodSignal';\nimport SeveritySignal from './SeveritySignal';\n\nexport default function Signal(props: SignalProps) {\n  const { variant, kind, ...rest } = props;\n\n  if (isNilOrEmpty(kind)) return null;\n\n  if (variant === 'breachRisk') {\n    return (\n      <BreachRiskSignal\n        kind={kind.toLowerCase() as BreachRiskSignalKinds}\n        {...rest}\n      />\n    );\n  }\n  if (variant === 'businessImpact') {\n    return (\n      <BusinessImpactSignal\n        kind={kind.toLowerCase() as BusinessImpactSignalKinds}\n        {...rest}\n      />\n    );\n  }\n  if (variant === 'incidentLikelihood') {\n    return (\n      <IncidentLikelihoodSignal\n        kind={kind.toLowerCase() as IncidentLikelihoodSignalKinds}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <SeveritySignal\n      kind={kind.toLowerCase() as SeveritySignalKinds}\n      {...rest}\n    />\n  );\n}\nSignal.displayName = 'Signal';\n"],"names":["height","criticalityLevels","cov_fxqqyl8lu","s","low","none","medium","props","VerticalBar","xPos","fill","f","className","CLX_COMPONENT","style","criticality","b","title","color","size","jsx","rx","width","y","signal","children","map","v","hasValidKind","kind","cov_o0h2zlw21","includes","cov_2pnwiq1h5u","BusinessImpactSignal","displayName","cov_co0au77g9","IncidentLikelihoodSignal","cov_1aycly8lgd","cov_o6yp4a37j","variant","rest","isNilOrEmpty","BreachRiskSignal"],"mappings":"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MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,O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"}