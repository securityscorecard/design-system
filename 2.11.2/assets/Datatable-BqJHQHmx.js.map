{"version":3,"file":"Datatable-BqJHQHmx.js","sources":["../../node_modules/ramda/es/fromPairs.js","../../src/components/Datatable/hooks/useDataFetch.ts","../../src/components/Datatable/hooks/useTableRowSelect.ts","../../src/components/Datatable/ControlsModule/index.ts","../../src/components/Datatable/Table/index.ts","../../src/components/Datatable/Datatable.tsx"],"sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\n\nvar fromPairs =\n/*#__PURE__*/\n_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default fromPairs;","import { useEffect } from 'react';\nimport { pick, propEq, when } from 'ramda';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnDataFetchFn } from '../Datatable.types';\n\nexport const useDataFetch = <D>(onDataFetch: OnDataFetchFn<D>): void => {\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      pick([\n        'pageIndex',\n        'pageSize',\n        'sortBy',\n        'filters',\n        'query',\n        'isCanceled',\n      ]),\n      when(propEq('isCanceled', false), onDataFetch),\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onDataFetch]);\n};\n","import { useEffect } from 'react';\nimport { IdType } from 'react-table';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnSelectFn } from '../Table/Table.types';\n\nexport const useTableRowSelect = <D>(\n  onSelect: OnSelectFn<D>,\n  defaultSelectedRowIds: IdType<D>[],\n): void => {\n  useEffect(\n    () =>\n      DatatableStore.update((s) => {\n        s.selectedIds = defaultSelectedRowIds;\n      }),\n    [defaultSelectedRowIds],\n  );\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => ({\n        ids: s.selectedIds,\n        hasExclusiveSelection: s.hasExclusiveSelection,\n      }),\n      ({ ids, hasExclusiveSelection }) => {\n        onSelect(ids, hasExclusiveSelection);\n      },\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onSelect]);\n};\n","export { default as ControlsModule } from './ControlsModule';\nexport * from './ControlsModule.types';\n","export { default as Table } from './Table';\nexport * from './Table.types';\n","import { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDeepCompareMemo } from 'use-deep-compare';\nimport { assoc, assocPath, fromPairs, map, pipe } from 'ramda';\nimport { isNotUndefined, noop } from 'ramda-adjunct';\nimport { IdType } from 'react-table';\n\nimport { getColor, getRadii } from '../../utils';\nimport { Padbox } from '../layout';\nimport { useDataFetch } from './hooks/useDataFetch';\nimport { useTableRowSelect } from './hooks/useTableRowSelect';\nimport { mergeControlsConfig, mergeTableConfig } from './defaultConfigs';\nimport { ControlsModule } from './ControlsModule';\nimport { BatchModule } from './BatchModule';\nimport { Table } from './Table';\nimport { TableConfig } from './Table/Table.types';\nimport { DatatableProps } from './Datatable.types';\nimport { DatatableStore, datatableInitialState } from './Datatable.store';\nimport { useColumnsControls } from './hooks/useColumnsControls';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useLocalStorageState } from '../../hooks/useLocalStorageState';\n\nconst StyledDatatable = styled(Padbox)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  border: 1px solid ${getColor('neutral.300')};\n  border-radius: ${getRadii('double')};\n  background: ${getColor('neutral.0')};\n`;\n\nconst mapSelectedRows = <D,>(defaultSelectedRowIds: IdType<D>[]) =>\n  pipe(\n    map((id: IdType<D>): [IdType<D>, boolean] => [id, true]),\n    fromPairs,\n  )(defaultSelectedRowIds);\n\nfunction Datatable<D extends Record<string, unknown>>({\n  id,\n  data,\n  dataSize,\n  columns,\n  dataPrimaryKey,\n  onCancelLoading,\n  isDataLoading = false,\n  onDataFetch = noop,\n  batchActions = [],\n  isControlsEnabled = true,\n  isBatchModuleEnabled = true,\n  controlsConfig = {},\n  tableConfig = {},\n  resetSelectionFn,\n}: DatatableProps<D>) {\n  const [persistedState, setPersistedState] = useLocalStorageState<{\n    hiddenColumns: string[];\n    columnOrder: string[];\n  }>(`datatable_${id}`);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => {\n        return { hiddenColumns: s.hiddenColumns, columnOrder: s.columnOrder };\n      },\n      (partial) => {\n        setPersistedState(partial);\n      },\n    );\n    // eslint-disable-next-line\n    return unsubscribe;\n  }, []);\n\n  // Set canceled signal to prevent data fetch when unmounting\n  useEffect(\n    () => () =>\n      DatatableStore.replace(assoc('isCanceled', true, datatableInitialState)),\n    [],\n  );\n\n  const isCancelEnabled = isNotUndefined(onCancelLoading);\n\n  const {\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    ...restControlsConfig\n  } = useDeepCompareMemo(\n    () =>\n      mergeControlsConfig(\n        assocPath(\n          ['filteringConfig', 'isCancelEnabled'],\n          isCancelEnabled,\n        )(controlsConfig),\n      ),\n    [controlsConfig],\n  );\n  const {\n    onSelect,\n    defaultSelectedRowIds,\n    hasOnlyPerPageSelection,\n    ...restTableConfig\n  } = useDeepCompareMemo<TableConfig<D>>(\n    () => mergeTableConfig(tableConfig),\n    [tableConfig],\n  );\n\n  useDataFetch<D>(onDataFetch);\n  useTableRowSelect<D>(onSelect, defaultSelectedRowIds);\n  useColumnsControls(\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    columns,\n    persistedState?.columnOrder || restTableConfig.defaultColumnOrder,\n    persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns,\n  );\n\n  const handleCancelLoading = isCancelEnabled\n    ? () => {\n        DatatableStore.update((s) => {\n          s.isCanceled = true;\n          s.filters = s.filters.map((filter) => ({\n            ...filter,\n\n            // mark loading filters as canceled\n            isCanceled: filter.isLoading,\n            isLoading: false,\n          }));\n\n          onCancelLoading();\n        });\n      }\n    : noop;\n\n  resetSelectionFn?.(() => {\n    DatatableStore.update((s) => {\n      s.shouldResetSelectedRows = true;\n    });\n  });\n\n  return (\n    <StyledDatatable className={CLX_COMPONENT}>\n      {isControlsEnabled && (\n        <ControlsModule<D>\n          {...restControlsConfig}\n          isDataLoading={isDataLoading}\n          onCancelLoading={handleCancelLoading}\n        />\n      )}\n      {isBatchModuleEnabled && (\n        <BatchModule\n          actions={batchActions}\n          columns={{\n            isButtonDisplayed:\n              !isControlsEnabled && restControlsConfig.hasColumnsControls,\n            defaultIsColumnsControlsOpen:\n              restControlsConfig.defaultIsColumnsControlsOpen,\n            defaultIsColumnsControlsApplied:\n              restControlsConfig.defaultIsColumnsControlsApplied,\n          }}\n          dataSize={dataSize}\n          hasOnlyPerPageSelection={hasOnlyPerPageSelection}\n          hasSelection={restTableConfig.hasSelection}\n        />\n      )}\n      <Table<D>\n        columns={columns}\n        data={data}\n        dataPrimaryKey={dataPrimaryKey}\n        dataSize={dataSize}\n        defaultSelectedRows={mapSelectedRows(defaultSelectedRowIds)}\n        {...restTableConfig}\n        defaultColumnOrder={\n          persistedState?.columnOrder || restTableConfig.defaultColumnOrder\n        }\n        defaultHiddenColumns={\n          persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns\n        }\n        isCancelDisabled={!isCancelEnabled}\n        isDataLoading={isDataLoading}\n        onCancelLoading={handleCancelLoading}\n      />\n    </StyledDatatable>\n  );\n}\n\nDatatable.displayName = 'Datatable';\n\nexport default Datatable;\n"],"names":["fromPairs","_curry1","pairs","result","idx","cov_1r9elsyc66","s","useDataFetch","onDataFetch","f","useEffect","unsubscribe","DatatableStore","subscribe","update","useTableRowSelect","defaultSelectedRowIds","hasExclusiveSelection","ids","selectedIds","onSelect","cov_tfrdyw0zx","cov_1vaudfhe8n","actualCoverage","cov_6rmr7mtux","styled","mapSelectedRows","pipe","dataSize","columns","dataPrimaryKey","noop","batchActions","map","id","cov_gkpaw1gr0","controlsConfig","resetSelectionFn","data","onCancelLoading","b","hiddenColumns","columnOrder","isBatchModuleEnabled","setPersistedState","persistedState","useLocalStorageState","onColumnVisibilityChange","restControlsConfig","useDeepCompareMemo","hasOnlyPerPageSelection","partial","onColumnOrderChange","filter","isLoading","replace","assoc","datatableInitialState","isControlsEnabled","mergeControlsConfig","isButtonDisplayed","defaultIsColumnsControlsOpen","Datatable"],"mappings":"ggCAkBA,IAAIA,GAEJC,GAAQ,SAAmBC,EAAO,CAIhC,QAHIC,EAAS,CAAA,EACTC,EAAM,EAEHA,EAAMF,EAAM,QACjBC,EAAOD,EAAME,CAAG,EAAE,CAAC,CAAC,EAAIF,EAAME,CAAG,EAAE,CAAC,EACpCA,GAAO,EAGT,OAAOD,CACT,CAAC,kyDCxBuEE,IAAAC,EAAA,CAAA,IAcvD,MAAAC,GAAAC,GAAA,CAAAH,EAAA,EAAAI,OAAAJ,EAAA,EAAAC,EAAA,CAAA,IACCI,EAAAA,UAAA,IAAA,CAAAL,EAAA,EAAAI,EAAA,CAAA,IACd,MAAAE,GAAAN,EAAA,EAAAC,OAAAM,EAAAC,UACEL,EAAAA,CACN,6+FCZqBM,EAAAA,EAAAA,EAAAA,CAAAA,UAKHC,GAAAA,CACRJ,EACIK,2BAEmBC,EAAAA,UAExBC,KAAKD,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAA4BX,EAAAa,YAAAH,CAClCI,CAAAA,GACF,CACFJ,CAAA,CAEA,EAAAK,IAAAf,EAAA,CAAA,IACcI,EAAAA,UAAA,IAAA,CAAAW,IAAAZ,EAAA,CAAA,IACd,MAAAE,GAAAU,EAAA,EAAAf,EAAA,CAAA,IAAAM,EAAAC,UACEO,IAAQC,EAAA,EAAAZ,EAAA,CAAA,IAAAY,EAAAf,EAAAA,QACdY,IAAAZ,EAAAa,w5BChCA,OAAAG,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,s8CCAA,OAAAE,EAAA,UAAA,CAAA,OAAAD,CAAA,EAAAA,CAAA,CAAAC,EAAA,ECsBwBC,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,qFAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,qFAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,IAAAA,OAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,YAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,KAAAA,iBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,ccAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,ccAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,cAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,GAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,ceAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,oFAAAA,EAAAA,MAAAA,CAAAA,YAAAA,SAAAA,qBAAAA,QAAAA,YAAAA,YAAAA,MAAAA,OAAAA,iBAAAA,OAAAA,WAAAA,WAAAA,SAAAA,eAAAA,oBAAAA,sBAAAA,mBAAAA,iBAAAA,cAAAA,QAAAA,iBAAAA,wBAAAA,qBAAAA,gBAAAA,uBAAAA,kBAAAA,aAAAA,cAAAA,cAAAA,kBAAAA,wBAAAA,KAAAA,YAAAA,OAAAA,WAAAA,UAAAA,iBAAAA,kBAAAA,gBAAAA,cAAAA,eAAAA,oBAAAA,uBAAAA,iBAAAA,cAAAA,mBAAAA,iBAAAA,oBAAAA,cAAAA,YAAAA,IAAAA,gBAAAA,cAAAA,UAAAA,UAAAA,kBAAAA,sBAAAA,2BAAAA,qBAAAA,WAAAA,0BAAAA,kBAAAA,qBAAAA,uBAAAA,sBAAAA,SAAAA,aAAAA,UAAAA,SAAAA,YAAAA,0BAAAA,oBAAAA,qBAAAA,+BAAAA,kCAAAA,cAAAA,EAAAA,SAAAA,w+FAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,EAAAA,UAAAA,CAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAAAA,EASxB,MAAMC,IAAAA,EAAAA,EAAAA,EAAkBD,CAAAA,IAAAA,EACtBE,EAAAA,EAAAA,WAAAA,CAAAA,YAAAA,6BAAAA,YAQAC,aAAAA,CAAAA,EAAAA,CAAAA,yEAAAA,kBAAAA,eAAAA,GAAAA,EAAAA,EAAAA,aAAAA,EACAC,EAAAA,QAAAA,EACAC,EAAAA,WAAAA,CAAAA,GAAAA,EAAAA,EAAAA,OAEgB,MACFC,GAAAA,IACdC,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAAAA,EACoBC,GAAAC,IAAAC,EAAA,EAAA1B,EAAA,CAAA,IAAA0B,EAAA,EAAA7B,EAAA4B,CAAAA,IAAAA,CAAAA,EAAA,EAAA,EAAA,EACGlC,EACvBoC,GAAkB,GACH,SACfC,EAAAA,CACoBH,GAAAA,EACpBI,KAAAA,EAKA5B,SAAAA,EACEmB,QAAAA,EACEC,eAAAA,EACFS,gBAAAA,EACM5B,cAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAEKH,YAAAA,GAAA2B,EAAA,EAAAK,EAAAT,CAAAA,EAAAA,CAAAA,IAAAA,GAAAC,aAAAA,GAAAG,EAAA,EAAAK,EAAA,CAAA,EAAA,CAAA,QAAmBC,kBAAAA,GAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAA8BC,IAAYC,qBAAAA,GAAAR,IAAAK,EAAA,CAAA,EAAA,CAAA,IAAA,IAAAJ,eAAAA,GAAAD,EAAA,EAAAK,EAEzD,CAAA,EAAA,CAAA,IAAA,CAAA,GACXI,YAAAA,GAAAA,EAAAA,EAAAA,UAAAA,CAAAA,GAAyBP,iBAAAA,CAItB1B,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IACT,KAAK,CAAAkC,EAAAD,CAAA,GAAAT,EAAA,EAAA7B,EAAA,CAAA,IAAAwC,GAWC,aAAAZ,CAAA,EAAA,GAAAC,IAAA7B,EAAA,CAAA,IAEJyC,EAAAA,UAAAA,IAAAA,CACA,GADAA,IAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACA,CAAA,IAAGC,EAWCb,EAAAK,EAAAA,cAXDQ,CAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IACDC,MAUE,CACJ7B,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,UACAJ,IAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IACAkC,CAAAA,cAAAA,EAAAA,cAAAA,YAAAA,EAAAA,WAAAA,8BAOF3C,EAA2B4C,CAAA,CAC3BpC,CAEEqC,GAAAA,OAAAA,EAAAA,EAAAA,QASIxC,CACEN,EAAAA,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAEK+C,EAAAA,IAAAA,EAAAA,UAAAA,sBAGgBC,EAAAA,IAAAA,KAAAA,IAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EACRC,QAAAC,GAAA,aAAA,GAAAC,CAAA,CAAA,IAAA,CAAA,CAGG,EAEpB,MACA1B,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,GAGFnB,CACEN,oBAAAA,EACFyC,yBAAAA,EACD,GAAAC,CAGC,GAAAb,EAAA,EAAA7B,EAAA2C,EAAAA,IAAAA,EACGS,KAQCvB,EAAA,EAAA1B,EAAA,CAAA,IAAA0B,IAAA7B,EAAAqD,EAAAA,IAAAA,EAGIC,uCAGqBC,GAIvB,EAAAzB,CAEA,CAGJ,GAiBF,CAAAA,CAAA,CAEJ,GAEA0B,CAEeA,SAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","x_google_ignoreList":[0]}