{"version":3,"file":"ErrorBoundary-CcRNGkfm.js","sources":["../../node_modules/ramda/es/internal/_createPartialApplicator.js","../../node_modules/ramda/es/partialRight.js","../../src/components/ErrorBoundary/ErrorBoundary.tsx"],"sourcesContent":["import _arity from \"./_arity.js\";\nimport _curry2 from \"./_curry2.js\";\nexport default function _createPartialApplicator(concat) {\n  return _curry2(function (fn, args) {\n    return _arity(Math.max(0, fn.length - args.length), function () {\n      return fn.apply(this, concat(args, arguments));\n    });\n  });\n}","import _concat from \"./internal/_concat.js\";\nimport _createPartialApplicator from \"./internal/_createPartialApplicator.js\";\nimport flip from \"./flip.js\";\n/**\n * Takes a function `f` and a list of arguments, and returns a function `g`.\n * When applied, `g` returns the result of applying `f` to the arguments\n * provided to `g` followed by the arguments provided initially.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Function\n * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n * @param {Function} f\n * @param {Array} args\n * @return {Function}\n * @see R.partial\n * @example\n *\n *      const greet = (salutation, title, firstName, lastName) =>\n *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n *\n *      const greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n *\n *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n */\n\nvar partialRight =\n/*#__PURE__*/\n_createPartialApplicator(\n/*#__PURE__*/\nflip(_concat));\n\nexport default partialRight;","import styled from 'styled-components';\nimport { partialRight, pipe, prop } from 'ramda';\n\nimport { ErrorBoundaryProps } from './ErrorBoundary.types';\nimport { Inline, Stack } from '../layout';\nimport { pxToRem } from '../../utils';\nimport { useLogger } from '../../hooks/useLogger';\nimport { Text } from '../Text';\nimport { Link } from '../Link';\n\nconst IllustrationContainerSizes = {\n  sm: 24,\n  md: 48,\n  lg: 64,\n};\n\nconst getIllustrationSize = pipe(\n  prop('size'),\n  partialRight(prop, [IllustrationContainerSizes]),\n  pxToRem,\n);\n\nconst IllustrationContainer = styled.div<{ size: string }>`\n  width: ${getIllustrationSize};\n  height: ${getIllustrationSize};\n`;\n\nexport const DEFAULT_TITLE = 'We cannot show this information now';\nexport const DEFAULT_CONTENT = 'If the problem persists, contact support.';\n\nconst ExtraSmallErrorBoundary = ({\n  content = 'Failed to load.',\n}: ErrorBoundaryProps) => (\n  <Text size=\"md\" variant=\"secondary\">\n    {content}\n  </Text>\n);\n\nconst SmallErrorBoundary = ({\n  title = DEFAULT_TITLE,\n  content = DEFAULT_CONTENT,\n  illustration,\n  onClick,\n  size,\n}: ErrorBoundaryProps) => {\n  return (\n    <Inline align=\"center\" gap=\"md\">\n      {illustration && (\n        <IllustrationContainer size={size}>\n          {illustration}\n        </IllustrationContainer>\n      )}\n      <Text size=\"md\" variant=\"secondary\" isBold>\n        {title}\n      </Text>\n      <Text size=\"md\" variant=\"secondary\">\n        {content}\n      </Text>\n      {onClick && <Link onClick={onClick}>Try Again</Link>}\n    </Inline>\n  );\n};\nconst MediumErrorBoundary = ({\n  illustration,\n  title = DEFAULT_TITLE,\n  content = DEFAULT_CONTENT,\n  justify = 'center',\n  size,\n  onClick,\n}: ErrorBoundaryProps) => {\n  return (\n    <Stack gap=\"sm\" justify={justify}>\n      {illustration && (\n        <IllustrationContainer size={size}>\n          {illustration}\n        </IllustrationContainer>\n      )}\n      <Text size=\"h4\" variant=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"secondary\">{content}</Text>\n      {onClick && <Link onClick={onClick}>Try Again</Link>}\n    </Stack>\n  );\n};\n\nconst ComponentSizeMap = {\n  xs: ExtraSmallErrorBoundary,\n  sm: SmallErrorBoundary,\n  md: MediumErrorBoundary,\n  lg: MediumErrorBoundary,\n};\n\nconst ErrorBoundary = (props: ErrorBoundaryProps) => {\n  const { size } = props;\n  const { error } = useLogger('ErrorBoundary');\n  const Component = ComponentSizeMap[size];\n\n  if (typeof Component === 'undefined') {\n    error(\n      `Wrong size (${size}) was provided to ErrorBoundary component. Valid values are ${Object.keys(\n        ComponentSizeMap,\n      )}`,\n    );\n    return null;\n  }\n\n  return <Component {...props} />;\n};\n\nexport default ErrorBoundary;\n"],"names":["_createPartialApplicator","concat","_curry2","fn","args","_arity","partialRight","flip","_concat","cov_2aagz2m65s","path","hash","global","gcv","coverageData","coverage","actualCoverage","IllustrationContainerSizes","s","lg","md","getIllustrationSize","pipe","prop","pxToRem","IllustrationContainer","styled","div","withConfig","displayName","componentId","DEFAULT_TITLE","onClick","size","ExtraSmallErrorBoundary","content","b","f","jsx","Text","children","illustration","title","DEFAULT_CONTENT","justify","jsxs","Inline","align","gap","ComponentSizeMap","variant","isBold","SmallErrorBoundary","MediumErrorBoundary","ErrorBoundary","error","Component","Stack"],"mappings":"2jBAEe,SAASA,EAAyBC,EAAQ,CACvD,OAAOC,EAAQ,SAAUC,EAAIC,EAAM,CACjC,OAAOC,EAAO,KAAK,IAAI,EAAGF,EAAG,OAASC,EAAK,MAAM,EAAG,UAAY,CAC9D,OAAOD,EAAG,MAAM,KAAMF,EAAOG,EAAM,SAAS,CAAC,CACnD,CAAK,CACL,CAAG,CACH,CCoBA,IAAIE,EAEJN,EAEAO,EAAKC,CAAO,CAAC,ECCA,SAAAC,GAAA,CAAA,IAAAC,EAAA,6FAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,6FAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA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","x_google_ignoreList":[0,1]}