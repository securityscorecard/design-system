{"version":3,"file":"ColumnOrdering.stories-DijZftsq.js","sources":["../../../src/components/DatatableV2/stories/ColumnOrdering.stories.tsx"],"sourcesContent":["import { ColumnOrderState } from '@tanstack/react-table';\nimport React, { Meta } from '@storybook/react';\nimport { useState } from 'react';\n\nimport Datatable from '../Datatable';\nimport Template, { Story } from './Template';\nimport argTypes from './argTypes';\n\nexport default {\n  title: 'components/DatatableV2/ColumnOrdering',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n  argTypes,\n} as Meta<typeof Datatable>;\n\nexport const ColumnOrderingEnabled: Story = Template.bind({});\nColumnOrderingEnabled.args = {\n  ...Template.args,\n};\n\nexport const DisabledColumnOrdering: Story = Template.bind({});\nDisabledColumnOrdering.args = {\n  ...Template.args,\n  enableColumnOrdering: false,\n};\n\nexport const ColumnOrderingWithPinnedColumns: Story = Template.bind({});\nColumnOrderingWithPinnedColumns.args = {\n  ...Template.args,\n  initialState: {\n    columnPinning: { left: ['score'] },\n  },\n};\n\nexport const ColumnOrderingWithSelection: Story = Template.bind({});\nColumnOrderingWithSelection.args = {\n  ...Template.args,\n  enableRowSelection: true,\n};\n\nexport const InitialColumnOrdering: Story = Template.bind({});\nInitialColumnOrdering.args = {\n  ...Template.args,\n  enableRowSelection: true,\n  initialState: {\n    columnOrder: [\n      'detectionMethod',\n      'score',\n      'organization.name',\n      'organization.domain',\n    ],\n  },\n};\nInitialColumnOrdering.parameters = {\n  screenshot: { skip: false },\n};\n\n/**\n * For managed state all columns has to be provided as a default value\n */\nexport const ColumnOrderingManagedState: Story = (args) => {\n  const [columnOrder, setColumnOrder] = useState<ColumnOrderState>([\n    'detectionMethod',\n    'score',\n    'organization.name',\n    'organization.domain',\n  ]);\n\n  return (\n    <>\n      <Datatable\n        state={{ columnOrder }}\n        onColumnOrderChange={setColumnOrder}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(columnOrder, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nColumnOrderingManagedState.args = Template.args;\n"],"names":["component","ColumnOrdering_stories","parameters","screenshot","skip","argTypes","ColumnOrderingEnabled","Template","bind","args","DisabledColumnOrdering","enableColumnOrdering","ColumnOrderingWithPinnedColumns","initialState","columnPinning","left","ColumnOrderingWithSelection","enableRowSelection","InitialColumnOrdering","columnOrder","ColumnOrderingManagedState","setColumnOrder","useState"],"mappings":"qrEAUEA,MAAoBC,GAAA,CACpBC,MAAAA,wCACEC,UAAAA,EAAcC,WAAM,CAAKD,WAAA,CAAAC,KAAA,EAAA,CAC3B,EACAC,SAAAA,CACF,EAGqBC,EAAQC,EAAAC,KAAA,EAAA,EAC3BF,EAAYG,KAAAA,CACb,GAAAF,EAAAE,IAED,EAEaC,MAAAA,EAAKH,EAAAC,KAAA,EAAA,EAChBG,EAAsBF,KAAA,CACvB,GAAAF,EAAAE,KAEME,qBAAqC,EAC5CC,EAEEC,MAAAA,EAAcN,EAAAC,KAAA,EAAA,EACZM,EAAeL,KAAA,MAAgBA,KAAEI,aAAA,CACnCC,cAAA,CAAAC,KAAA,CAAA,OAAA,CAAA,CACD,CAED,EAEaC,MAAAA,EAAKT,EAAAC,KAAA,EAAA,EAChBS,EAAoBR,KAAA,CACrB,GAAAF,EAAAE,KAEMQ,mBAA2B,EAClCC,EAEED,MAAAA,EAAwBV,EAAAC,KAAA,EAAA,EACxBK,EAAcJ,KAAA,IACDF,EAAAE,KAMbQ,mBAAA,GACDJ,aAAA,CACoBM,YAAA,CACnBhB,kBAAcC,QAAY,oBAC3B,qBAAA,CAED,CACA,EACAc,EAAAhB,WAAA,CACAC,WAAuC,CAAAC,KAAA,EAAA,GAevC,MAAUgB,EAAAX,GAAA,CACF,KAAA,CAACU,EAAaE,CAAQ,EAAAC,EAAAA,SAAA,CAC9B,kBACA,QACI,oBAEH,qBAAA,CACDF;;;;;;;;;;;"}