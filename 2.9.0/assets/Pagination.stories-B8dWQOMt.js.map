{"version":3,"file":"Pagination.stories-B8dWQOMt.js","sources":["../../../src/components/DatatableV2/mocks/externalData.ts","../../../src/components/DatatableV2/stories/Pagination.stories.tsx"],"sourcesContent":["import { DataSource, generateData } from './data';\n\ninterface Result {\n  entries: DataSource[];\n  pageCount: number;\n  rowCount: number;\n}\n\nconst data = generateData(100);\nexport const fetchData = (options: {\n  pageIndex: number;\n  pageSize: number;\n}): Result => {\n  return {\n    entries: data.slice(\n      options.pageIndex * options.pageSize,\n      (options.pageIndex + 1) * options.pageSize,\n    ),\n    pageCount: Math.ceil(data.length / options.pageSize),\n    rowCount: data.length,\n  };\n};\n\n/** Just to mimic react-query interface */\nexport const useQuery = ({\n  queryFn,\n}: {\n  queryFn: () => Result;\n  [key: string]: unknown;\n}) => {\n  const result = queryFn();\n  return {\n    data: result,\n  };\n};\n","import { useState } from 'react';\nimport { Meta } from '@storybook/react';\nimport { PaginationState } from '@tanstack/react-table';\n\nimport { fetchData, useQuery } from '../mocks/externalData';\nimport Datatable from '../Datatable';\nimport Template, { Story, columns } from './Template';\n\nexport default {\n  title: 'components/DatatableV2/Pagination',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n} as Meta<typeof Datatable>;\n\nexport const PaginationEnabled: Story = Template.bind({});\nPaginationEnabled.args = Template.args;\nPaginationEnabled.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledPagination: Story = Template.bind({});\nDisabledPagination.args = { ...Template.args, enablePagination: false };\nDisabledPagination.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const EnabledRowsPerPage: Story = Template.bind({});\nEnabledRowsPerPage.args = { ...Template.args, enableRowsPerPage: true };\nEnabledRowsPerPage.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const CustomRowsPerPageOptions: Story = Template.bind({});\nCustomRowsPerPageOptions.args = {\n  ...Template.args,\n  rowsPerPageOptions: [5, 10, 15],\n  enableRowsPerPage: true,\n};\nCustomRowsPerPageOptions.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const InitialPagination: Story = Template.bind({});\nInitialPagination.args = {\n  ...Template.args,\n  initialState: {\n    pagination: { pageSize: 10, pageIndex: 1 },\n  },\n};\nInitialPagination.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const PaginationManagedState: Story = (args) => {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 1,\n    pageSize: 10,\n  });\n\n  return (\n    <>\n      <Datatable\n        state={{ pagination }}\n        onPaginationChange={setPagination}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(pagination, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nPaginationManagedState.args = Template.args;\n\nexport const ManualPagination: Story = (args) => {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 10,\n  });\n\n  const dataQuery = useQuery({\n    queryKey: ['data', pagination],\n    queryFn: () => fetchData(pagination),\n    keepPreviousData: true,\n  });\n\n  return (\n    <>\n      <Datatable\n        {...args}\n        columns={columns}\n        data={dataQuery?.data?.entries ?? []}\n        pageCount={dataQuery?.data?.pageCount ?? -1}\n        rowCount={dataQuery?.data?.rowCount}\n        state={{ pagination }}\n        manualPagination\n        onPaginationChange={setPagination}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(pagination, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\n"],"names":["data","cov_14s6az4tbk","s","generateData","useQuery","options","result","pageIndex","pageSize","Pagination_stories","parameters","screenshot","skip","PaginationEnabled","Template","bind","args","DisabledPagination","enablePagination","EnabledRowsPerPage","enableRowsPerPage","CustomRowsPerPageOptions","rowsPerPageOptions","InitialPagination","initialState","pagination","PaginationManagedState","setPagination","useState","jsxs","Fragment","jsx","Datatable","stringify","ManualPagination","JSON","queryKey","queryFn","fetchData","keepPreviousData","columns","dataQuery","entries"],"mappings":"mnHAqBA,MAAAA,GAAAC,EAAAC,EAAAA,EAAAC,CAAAA,IAAAA,EAAA,GAAA,GAAAF,EAAAC,EAAAA,EAGO,CAAA,IAAA,MAAME,EAAYC,0BAOhB,CACLL,QAAMM,EAAAA,MACRD,EAAAE,UAAAF,EAAAG,UACFH,EAAAE,UAAA,GAAAF,EAAAG,0KCxBsBC,GAAA,CACpBC,MAAAA,oCACEC,UAAAA,EAAcC,WAAM,CAAKD,WAAA,CAAAC,KAAA,EAAA,CAC3B,CACF,EAGAC,EAAsCC,EAAAC,KAAA,EAAA,EACtCF,EAAkBH,OAAaM,KAC7BL,EAAYD,WAAA,CAAEE,WAAM,CAAAA,KAAA,EAAA,CAAM,EAGfK,MAAAA,EAA4BH,EAASC,KAAK,EAAE,EACzDE,EAAmBD,KAAO,CAAA,GAAAF,EAAAE,KAAAE,iBAAA,EAAA,IAAkBR,WAAA,CAAEQ,WAAAA,CAAAA,KAAkB,EAAA,CAAM,EAExDC,MAAAA,EAAAL,EAAAC,KAAA,EAAA,EAAEH,EAAMI,KAAA,CAAA,GAAAF,EAAAE,KAAAI,kBAAA,EAAA,EAAMD,EAAAT,WAAA,CAC3BC,WAAA,CAAAC,KAAA,EAAA,CAED,EACuCS,MAAAA,EAAKP,EAAAC,KAAA,EAAA,EAAEK,EAAmBJ,KAAA,CAAM,GAAAF,EAAAE,KACrDM,yBAAc,EAAA,EAC9BX,kBAAY,EAAEC,EAAYS,EAAAX,WAAA,CAC3BC,WAAA,CAAAC,KAAA,EAAA,CAED,EAEaW,MAAAA,EAAKT,EAAAC,KAAA,EAAA,EAChBO,EAAAA,MACAF,GAAAA,EAAAA,KACDI,aAAA,CACuBC,WAAA,CAAAjB,sBAAc,CAAA,CACpCG,CAAcC,EAAYW,EAAAb,WAAA,CAC3BC,WAAA,CAAAC,KAAA,EAAA,CAED,QAEac,EAAKV,GAAA,CAChBQ,KAAAA,CAAAA,EAAcG,CAAA,EAAAC,WAAA,CACZH,UAAY,EAAEjB,SAAQ,EAAA,CAAMD,EAC9B,OAEesB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,MAAAC,GACfrB,MAAY,CAAAc,WAAAA,CAAM,EAAA,mBAAEE,EAAMX,GAAAA,EAAA,SAGrB,MACC,CAAA,SAAA,CAAAe,EAAAA,IAACN,UAAU,SAAe,QAAA,CAAA,QAC9BlB,qBAAY0B,UAAAR,EAAA,KAAA,CAAA,EAAA,CAAA,EACZjB,CACA,CAAA,CAAA,CAIJ,EACiBiB,EAAAA,KAAAA,EAAAA,KAIjB,MAAUS,EAAAlB,GAAA,WACV,KAAQ,CAACS,EAAOE,CAAc,EAAAC,WAAA,CAC9BrB,UAAc4B,EACd3B,SAAW,EAAA,CACX,EAGAkB,EAAAA,EAA8BZ,CAE9BsB,SAA6B,CAAA,OAAAX,CAAO,EAC5BY,QAAWA,IAAAC,EAAeb,CAAY,EAC1ClB,iBAAY,EAAA,CACZC,EAGF,OAEE6B,EAAAA,KAAAA,WAAAA,CAAAA,SAAAA,CAAAA,MAAAA,GACAE,GAAAA,EACA,QAAAC,EAGA,OAAAC,EAAAA,GAAAA,YAAAA,EAAAzC,OAAAyC,YAAAA,EAAAC,UAAA,eAEID,EAAAA,GAAAA,YAAAA,EACOzC,OADPyC,YAAAA,EACSD,YACL,GAGKf,UAAAA,EAAAA,GAAAA,YAAAA,EAAAA,OAAAA,YAAAA,EAAAA,SACO,MAAA,CAAAA,WAAAA,CAGd,EAAA,iBAAA,GACF,mBAAsBE,CAAA,CAAA,eAGvB,CAAA,SAAA,CAAAI,EAAAA,IAAA,UAAA,SAAA,QAAA,CAAA,QAEN,MAAAI,CAAAA,SAAAA,KAAAF,UAAAR,EAAA,KAAA,CAAA,EAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}