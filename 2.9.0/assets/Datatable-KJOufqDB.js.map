{"version":3,"file":"Datatable-KJOufqDB.js","sources":["../../../node_modules/ramda/es/fromPairs.js","../../../src/components/Datatable/hooks/useDataFetch.ts","../../../src/components/Datatable/hooks/useTableRowSelect.ts","../../../src/components/Datatable/ControlsModule/index.ts","../../../src/components/Datatable/Table/index.ts","../../../src/components/Datatable/Datatable.tsx"],"sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\n/**\n * Creates a new object from a list key-value pairs. If a key appears in\n * multiple pairs, the rightmost pair is included in the object.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [[k,v]] -> {k: v}\n * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n * @return {Object} The object made by pairing up `keys` and `values`.\n * @see R.toPairs, R.pair\n * @example\n *\n *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n */\n\nvar fromPairs =\n/*#__PURE__*/\n_curry1(function fromPairs(pairs) {\n  var result = {};\n  var idx = 0;\n\n  while (idx < pairs.length) {\n    result[pairs[idx][0]] = pairs[idx][1];\n    idx += 1;\n  }\n\n  return result;\n});\n\nexport default fromPairs;","import { useEffect } from 'react';\nimport { pick, propEq, when } from 'ramda';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnDataFetchFn } from '../Datatable.types';\n\nexport const useDataFetch = <D>(onDataFetch: OnDataFetchFn<D>): void => {\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      pick([\n        'pageIndex',\n        'pageSize',\n        'sortBy',\n        'filters',\n        'query',\n        'isCanceled',\n      ]),\n      when(propEq('isCanceled', false), onDataFetch),\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onDataFetch]);\n};\n","import { useEffect } from 'react';\nimport { IdType } from 'react-table';\n\nimport { DatatableStore } from '../Datatable.store';\nimport { OnSelectFn } from '../Table/Table.types';\n\nexport const useTableRowSelect = <D>(\n  onSelect: OnSelectFn<D>,\n  defaultSelectedRowIds: IdType<D>[],\n): void => {\n  useEffect(\n    () =>\n      DatatableStore.update((s) => {\n        s.selectedIds = defaultSelectedRowIds;\n      }),\n    [defaultSelectedRowIds],\n  );\n  useEffect(() => {\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => ({\n        ids: s.selectedIds,\n        hasExclusiveSelection: s.hasExclusiveSelection,\n      }),\n      ({ ids, hasExclusiveSelection }) => {\n        onSelect(ids, hasExclusiveSelection);\n      },\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [onSelect]);\n};\n","export { default as ControlsModule } from './ControlsModule';\nexport * from './ControlsModule.types';\n","export { default as Table } from './Table';\nexport * from './Table.types';\n","import { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useDeepCompareMemo } from 'use-deep-compare';\nimport { assoc, assocPath, fromPairs, map, pipe } from 'ramda';\nimport { isNotUndefined, noop } from 'ramda-adjunct';\nimport { IdType } from 'react-table';\n\nimport { getColor, getRadii } from '../../utils';\nimport { Padbox } from '../layout';\nimport { useDataFetch } from './hooks/useDataFetch';\nimport { useTableRowSelect } from './hooks/useTableRowSelect';\nimport { mergeControlsConfig, mergeTableConfig } from './defaultConfigs';\nimport { ControlsModule } from './ControlsModule';\nimport { BatchModule } from './BatchModule';\nimport { Table } from './Table';\nimport { TableConfig } from './Table/Table.types';\nimport { DatatableProps } from './Datatable.types';\nimport { DatatableStore, datatableInitialState } from './Datatable.store';\nimport { useColumnsControls } from './hooks/useColumnsControls';\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { useLocalStorageState } from '../../hooks/useLocalStorageState';\n\nconst StyledDatatable = styled(Padbox)`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  border: 1px solid ${getColor('neutral.300')};\n  border-radius: ${getRadii('double')};\n  background: ${getColor('neutral.0')};\n`;\n\nconst mapSelectedRows = <D,>(defaultSelectedRowIds: IdType<D>[]) =>\n  pipe(\n    map((id: IdType<D>): [IdType<D>, boolean] => [id, true]),\n    fromPairs,\n  )(defaultSelectedRowIds);\n\nfunction Datatable<D extends Record<string, unknown>>({\n  id,\n  data,\n  dataSize,\n  columns,\n  dataPrimaryKey,\n  onCancelLoading,\n  isDataLoading = false,\n  onDataFetch = noop,\n  batchActions = [],\n  isControlsEnabled = true,\n  isBatchModuleEnabled = true,\n  controlsConfig = {},\n  tableConfig = {},\n  resetSelectionFn,\n}: DatatableProps<D>) {\n  const [persistedState, setPersistedState] = useLocalStorageState<{\n    hiddenColumns: string[];\n    columnOrder: string[];\n  }>(`datatable_${id}`);\n\n  useEffect(() => {\n    if (!id) {\n      return;\n    }\n    const unsubscribe = DatatableStore.subscribe(\n      (s) => {\n        return { hiddenColumns: s.hiddenColumns, columnOrder: s.columnOrder };\n      },\n      (partial) => {\n        setPersistedState(partial);\n      },\n    );\n    // eslint-disable-next-line\n    return unsubscribe;\n  }, []);\n\n  // Set canceled signal to prevent data fetch when unmounting\n  useEffect(\n    () => () =>\n      DatatableStore.replace(assoc('isCanceled', true, datatableInitialState)),\n    [],\n  );\n\n  const isCancelEnabled = isNotUndefined(onCancelLoading);\n\n  const {\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    ...restControlsConfig\n  } = useDeepCompareMemo(\n    () =>\n      mergeControlsConfig(\n        assocPath(\n          ['filteringConfig', 'isCancelEnabled'],\n          isCancelEnabled,\n        )(controlsConfig),\n      ),\n    [controlsConfig],\n  );\n  const {\n    onSelect,\n    defaultSelectedRowIds,\n    hasOnlyPerPageSelection,\n    ...restTableConfig\n  } = useDeepCompareMemo<TableConfig<D>>(\n    () => mergeTableConfig(tableConfig),\n    [tableConfig],\n  );\n\n  useDataFetch<D>(onDataFetch);\n  useTableRowSelect<D>(onSelect, defaultSelectedRowIds);\n  useColumnsControls(\n    onColumnOrderChange,\n    onColumnVisibilityChange,\n    columns,\n    persistedState?.columnOrder || restTableConfig.defaultColumnOrder,\n    persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns,\n  );\n\n  const handleCancelLoading = isCancelEnabled\n    ? () => {\n        DatatableStore.update((s) => {\n          s.isCanceled = true;\n          s.filters = s.filters.map((filter) => ({\n            ...filter,\n\n            // mark loading filters as canceled\n            isCanceled: filter.isLoading,\n            isLoading: false,\n          }));\n\n          onCancelLoading();\n        });\n      }\n    : noop;\n\n  resetSelectionFn?.(() => {\n    DatatableStore.update((s) => {\n      s.shouldResetSelectedRows = true;\n    });\n  });\n\n  return (\n    <StyledDatatable className={CLX_COMPONENT}>\n      {isControlsEnabled && (\n        <ControlsModule<D>\n          {...restControlsConfig}\n          isDataLoading={isDataLoading}\n          onCancelLoading={handleCancelLoading}\n        />\n      )}\n      {isBatchModuleEnabled && (\n        <BatchModule\n          actions={batchActions}\n          columns={{\n            isButtonDisplayed:\n              !isControlsEnabled && restControlsConfig.hasColumnsControls,\n            defaultIsColumnsControlsOpen:\n              restControlsConfig.defaultIsColumnsControlsOpen,\n            defaultIsColumnsControlsApplied:\n              restControlsConfig.defaultIsColumnsControlsApplied,\n          }}\n          dataSize={dataSize}\n          hasOnlyPerPageSelection={hasOnlyPerPageSelection}\n          hasSelection={restTableConfig.hasSelection}\n        />\n      )}\n      <Table<D>\n        columns={columns}\n        data={data}\n        dataPrimaryKey={dataPrimaryKey}\n        dataSize={dataSize}\n        defaultSelectedRows={mapSelectedRows(defaultSelectedRowIds)}\n        {...restTableConfig}\n        defaultColumnOrder={\n          persistedState?.columnOrder || restTableConfig.defaultColumnOrder\n        }\n        defaultHiddenColumns={\n          persistedState?.hiddenColumns || restTableConfig.defaultHiddenColumns\n        }\n        isCancelDisabled={!isCancelEnabled}\n        isDataLoading={isDataLoading}\n        onCancelLoading={handleCancelLoading}\n      />\n    </StyledDatatable>\n  );\n}\n\nDatatable.displayName = 'Datatable';\n\nexport default Datatable;\n"],"names":["fromPairs","_curry1","pairs","result","idx","cov_214budz8mx","s","useDataFetch","onDataFetch","f","useEffect","unsubscribe","DatatableStore","subscribe","update","useTableRowSelect","defaultSelectedRowIds","hasExclusiveSelection","ids","selectedIds","onSelect","cov_11ej2pj1jc","cov_1kkugieqb1","actualCoverage","cov_2qbsdw7i9x","cov_1uotiyjt1e","path","hash","global","gcv","coverageData","coverage","StyledDatatable","styled","Padbox","withConfig","displayName","componentId","getColor","getRadii","mapSelectedRows","pipe","map","id","Datatable","data","dataSize","dataPrimaryKey","onCancelLoading","isDataLoading","b","noop","batchActions","isControlsEnabled","hiddenColumns","columnOrder","tableConfig","setPersistedState","onColumnOrderChange","onColumnVisibilityChange","restControlsConfig","filter","isCancelEnabled","isNotUndefined","useDeepCompareMemo","mergeControlsConfig","assocPath","controlsConfig"],"mappings":"ggCAkBA,IAAIA,GAEJC,GAAQ,SAAmBC,EAAO,CAIhC,QAHIC,EAAS,CAAA,EACTC,EAAM,EAEHA,EAAMF,EAAM,QACjBC,EAAOD,EAAME,CAAG,EAAE,CAAC,CAAC,EAAIF,EAAME,CAAG,EAAE,CAAC,EACpCA,GAAO,EAGT,OAAOD,CACT,CAAC,wyDCxBuEE,IAAAC,EAAA,CAAA,IAcvD,MAAAC,GAAAC,GAAA,CAAAH,EAAA,EAAAI,OAAAJ,EAAA,EAAAC,EAAA,CAAA,IACCI,EAAAA,UAAA,IAAA,CAAAL,EAAA,EAAAI,EAAA,CAAA,IACd,MAAAE,GAAAN,EAAA,EAAAC,OAAAM,EAAAC,UACEL,EAAAA,CACN,m/FCZqBM,EAAAA,EAAAA,EAAAA,CAAAA,UAKHC,GAAAA,CACRJ,EACIK,2BAEmBC,EAAAA,UAExBC,KAAKD,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,OAA4BX,EAAAa,YAAAH,CAClCI,CAAAA,GACF,CACFJ,CAAA,CAEA,EAAAK,IAAAf,EAAA,CAAA,IACcI,EAAAA,UAAA,IAAA,CAAAW,IAAAZ,EAAA,CAAA,IACd,MAAAE,GAAAU,EAAA,EAAAf,EAAA,CAAA,IAAAM,EAAAC,UACEO,IAAQC,EAAA,EAAAZ,EAAA,CAAA,IAAAY,EAAAf,EAAAA,QACdY,IAAAZ,EAAAa,85BChCA,OAAAG,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,k9CCAA,OAAAE,EAAA,UAAA,CAAA,OAAAD,CAAA,EAAAA,CAAA,CAAAC,EAAA,ECsBA,SAAAC,GAAA,CAAA,IAAAC,EAAA,uFAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,uFAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,YAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,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","x_google_ignoreList":[0]}