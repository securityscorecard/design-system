{"version":3,"file":"Selection.stories-DWtlUC18.js","sources":["../../../src/components/DatatableV2/stories/Selection.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { PaginationState, RowSelectionState } from '@tanstack/react-table';\n\nimport Datatable from '../Datatable';\nimport Template, { Story } from './Template';\nimport { Button } from '../../Button';\nimport { fetchData, useQuery } from '../mocks/externalData';\nimport argTypes from './argTypes';\nimport { Strong } from '../../Text';\n\nexport default {\n  title: 'components/DatatableV2/Selection',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n  argTypes,\n} as Meta<typeof Datatable>;\n\nexport const SelectionEnabled: Story = Template.bind({});\nSelectionEnabled.args = {\n  ...Template.args,\n  getRowId: (row) => row.id,\n};\nSelectionEnabled.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelection: Story = Template.bind({});\nDisabledSelection.args = { ...Template.args, enableRowSelection: false };\nDisabledSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledBatchRowSelection: Story = Template.bind({});\nDisabledBatchRowSelection.args = {\n  ...Template.args,\n  enableBatchRowSelection: false,\n};\nDisabledBatchRowSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const SingleRowSelection: Story = Template.bind({});\nSingleRowSelection.args = {\n  ...SelectionEnabled.args,\n  enableMultiRowSelection: false,\n};\nSingleRowSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelectAllHeader: Story = Template.bind({});\nDisabledSelectAllHeader.args = {\n  ...SelectionEnabled.args,\n  enableSelectAll: false,\n};\nDisabledSelectAllHeader.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const SelectAllModePage: Story = Template.bind({});\nSelectAllModePage.args = { ...SelectionEnabled.args, selectAllMode: 'page' };\n\nexport const SelectAllModeAll: Story = Template.bind({});\nSelectAllModeAll.args = { ...SelectionEnabled.args, selectAllMode: 'all' };\n\nexport const SelectAllModeVirtual: Story = (args) => {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 1,\n    pageSize: 10,\n  });\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  const dataQuery = useQuery({\n    queryKey: ['data', pagination],\n    queryFn: () => fetchData(pagination),\n    keepPreviousData: true,\n  });\n\n  return (\n    <Datatable\n      {...args}\n      data={dataQuery?.data?.entries ?? []}\n      initialState={{\n        isVirtualSelectAll: true,\n      }}\n      pageCount={dataQuery?.data?.pageCount ?? -1}\n      rowCount={dataQuery?.data?.rowCount}\n      selectAllMode=\"virtual\"\n      state={{ pagination, rowSelection }}\n      manualPagination\n      onPaginationChange={setPagination}\n      onRowSelectionChange={setRowSelection}\n    />\n  );\n};\n\nSelectAllModeVirtual.args = {\n  ...Template.args,\n  manualPagination: true,\n  rowSelectionMode: 'single-page',\n  renderRowSelectionActions: ({ selectedRows, isVirtualSelectAll }) => {\n    const selectedRowCount = Object.keys(selectedRows).filter(\n      (id) => !!selectedRows[id],\n    ).length;\n\n    return (\n      <Button\n        onClick={() => action('batch action')(selectedRows, isVirtualSelectAll)}\n      >\n        Show selected rows{' '}\n        {isVirtualSelectAll ? '(all)' : `(${selectedRowCount})`}\n      </Button>\n    );\n  },\n  selectAllMode: 'virtual',\n};\nSelectAllModeVirtual.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const SelectAllModeVirtualManagedState: Story = (args) => {\n  const [isVirtualSelectAll, setVirtualSelectAll] = useState<boolean>(true);\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 1,\n    pageSize: 10,\n  });\n\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({});\n\n  const dataQuery = useQuery({\n    queryKey: ['data', pagination],\n    queryFn: () => fetchData(pagination),\n    keepPreviousData: true,\n  });\n\n  return (\n    <>\n      <Datatable\n        {...args}\n        data={dataQuery?.data?.entries ?? []}\n        pageCount={dataQuery?.data?.pageCount ?? -1}\n        rowCount={dataQuery?.data?.rowCount}\n        selectAllMode=\"virtual\"\n        state={{ pagination, isVirtualSelectAll, rowSelection }}\n        manualPagination\n        onPaginationChange={setPagination}\n        onRowSelectionChange={setRowSelection}\n        onVirtualSelectAllChange={setVirtualSelectAll}\n      />\n      <div>\n        <Strong>\n          {isVirtualSelectAll && <span>All rows have been selected</span>}\n        </Strong>\n      </div>\n    </>\n  );\n};\n\nSelectAllModeVirtualManagedState.args = {\n  ...Template.args,\n  manualPagination: true,\n  rowSelectionMode: 'single-page',\n  renderRowSelectionActions: ({ selectedRows, isVirtualSelectAll }) => (\n    <Button\n      onClick={() => action('batch action')(selectedRows, isVirtualSelectAll)}\n    >\n      Show selected rows {isVirtualSelectAll ? '(all)' : ''}\n    </Button>\n  ),\n  selectAllMode: 'virtual',\n};\nSelectAllModeVirtualManagedState.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const ConditionallyEnabledSelection: Story = Template.bind({});\nConditionallyEnabledSelection.args = {\n  ...Template.args,\n  enableRowSelection: (row) => row.original.organization.grade !== 'A',\n};\nConditionallyEnabledSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const RowSelectionActions: Story = Template.bind({});\nRowSelectionActions.args = {\n  ...SelectionEnabled.args,\n  initialState: {\n    rowSelection: {\n      'e23968c3-3f19-44b2-aee9-c4a1d7c326ee': true,\n      'eb43a2df-8884-43f1-bfe8-eea3545bbded': true,\n    },\n  },\n  renderRowSelectionActions: ({ selectedRows, table }) => (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={() => {\n          action('selectedRows')(selectedRows);\n        }}\n      >\n        Show selected rows\n      </Button>\n      <Button\n        onClick={() => {\n          table.setRowSelection?.(() =>\n            table.options.data.reduce(\n              (acc, row) =>\n                row.organization.grade === 'F'\n                  ? { ...acc, [row.id]: true }\n                  : acc,\n              {},\n            ),\n          );\n        }}\n      >\n        Select all F grades\n      </Button>\n    </>\n  ),\n};\nRowSelectionActions.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelectionToolbar: Story = Template.bind({});\nDisabledSelectionToolbar.args = {\n  ...SelectionEnabled.args,\n  initialState: RowSelectionActions.args.initialState,\n  enableSelectionToolbar: false,\n};\n\nexport const SelectionManagedState: Story = (args) => {\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({\n    'e23968c3-3f19-44b2-aee9-c4a1d7c326ee': true,\n    'eb43a2df-8884-43f1-bfe8-eea3545bbded': true,\n  });\n\n  return (\n    <>\n      <Datatable\n        state={{ rowSelection }}\n        onRowSelectionChange={setRowSelection}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(rowSelection, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nSelectionManagedState.args = SelectionEnabled.args;\n\nexport const ManualPaginationWithSinglePageSelection: Story = (args) => {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 1,\n    pageSize: 10,\n  });\n\n  const dataQuery = useQuery({\n    queryKey: ['data', pagination],\n    queryFn: () => fetchData(pagination),\n    keepPreviousData: true,\n  });\n\n  return (\n    <Datatable\n      {...args}\n      data={dataQuery?.data?.entries ?? []}\n      pageCount={dataQuery?.data?.pageCount ?? -1}\n      rowCount={dataQuery?.data?.rowCount}\n      state={{ pagination }}\n      manualPagination\n      onPaginationChange={setPagination}\n    />\n  );\n};\nManualPaginationWithSinglePageSelection.args = {\n  ...Template.args,\n  manualPagination: true,\n  rowSelectionMode: 'single-page',\n  renderRowSelectionActions: ({ selectedRows }) => (\n    <Button onClick={() => action('batch action')(selectedRows)}>\n      Show selected rows\n    </Button>\n  ),\n  initialState: {\n    rowSelection: {\n      '55ea9935-7f59-4e30-b132-5372d214c20e': true,\n      '72badeb8-8974-4dc3-82f5-b638b381b9c4': true,\n      'ffcc21d9-7fe7-4c26-b708-4b8ba6432ad6': true,\n    },\n  },\n};\nManualPaginationWithSinglePageSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const ManualPaginationWithMultiPageSelection: Story =\n  ManualPaginationWithSinglePageSelection.bind({});\nManualPaginationWithMultiPageSelection.args = {\n  ...ManualPaginationWithSinglePageSelection.args,\n  manualPagination: true,\n  rowSelectionMode: 'multi-page',\n  renderRowSelectionActions: ({ selectedRows }) => (\n    <Button onClick={() => action('batch action')(selectedRows)}>\n      Show selected rows\n    </Button>\n  ),\n};\nManualPaginationWithMultiPageSelection.parameters = {\n  screenshot: { skip: false },\n};\n"],"names":["component","Selection_stories","parameters","screenshot","skip","argTypes","SelectionEnabled","Template","bind","args","getRowId","row","id","DisabledSelection","enableRowSelection","DisabledBatchRowSelection","enableBatchRowSelection","SingleRowSelection","enableMultiRowSelection","DisabledSelectAllHeader","enableSelectAll","SelectAllModePage","selectAllMode","SelectAllModeAll","SelectAllModeVirtual","pagination","setPagination","useState","pageIndex","rowSelection","setRowSelection","queryFn","fetchData","keepPreviousData","jsx","Datatable","dataQuery","useQuery","entries","queryKey","data","pageCount","isVirtualSelectAll","rowSelectionMode","renderRowSelectionActions","selectedRows","selectedRowCount","Object","keys","filter","action","length","jsxs","Button","pageSize","setVirtualSelectAll","Fragment","manualPagination","rowCount","Strong","initialState","SelectAllModeVirtualManagedState","table","original","organization","grade","RowSelectionActions","enableSelectionToolbar","options","reduce","acc","SelectionManagedState","DisabledSelectionToolbar","JSON","stringify","ManualPaginationWithSinglePageSelection"],"mappings":"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"}