{"version":3,"file":"MultiValueInput.stories-CVBuhYEI.js","sources":["../../../src/components/forms/MultiValueInput/MultiValueInput.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { noop } from 'ramda-adjunct';\n\nimport MultiValueInput from './MultiValueInput';\nimport { Label } from '../Label';\nimport { MultiValueInputProps } from './MultiValueInput.types';\nimport { Inline, Stack } from '../../layout';\nimport { Button } from '../../Button';\nimport { Banner } from '../../Banner';\nimport { Heading } from '../../Heading';\nimport { Strong } from '../../Text';\n\nexport default {\n  component: MultiValueInput,\n  title: 'components/forms/MultiValueInput',\n  args: {\n    'aria-label': 'Multi value input',\n  },\n  parameters: {\n    a11y: {\n      config: {\n        rules: [\n          {\n            id: 'target-size',\n            enabled: false,\n          },\n        ],\n      },\n    },\n  },\n} as Meta;\n\nconst MultiValueInputTemplate: StoryFn<MultiValueInputProps> = (args) => (\n  <MultiValueInput {...args} aria-label=\"MultiValueInput\" />\n);\n\nexport const Playground = MultiValueInputTemplate.bind({});\nPlayground.args = {\n  onValueAdd: action('OnValueAdd'),\n  onValueRemove: action('OnValueRemove'),\n  onValuesChange: action('OnValuesChange'),\n  onInputChange: action('OnInputChange'),\n  valuesDelimiter: ',',\n  onPaste: (e) => {\n    const pastedValue = (e.clipboardData || window.clipboardData).getData(\n      'text',\n    );\n    return pastedValue\n      .split(';')\n      .filter((i) => i !== '3')\n      .join(';');\n  },\n};\n\nexport const Filled = MultiValueInputTemplate.bind({});\nFilled.args = {\n  ...Playground.args,\n  value: ['john@example.com', 'jane@example.com'],\n};\n\nexport const WithPlaceholder = MultiValueInputTemplate.bind({});\nWithPlaceholder.args = {\n  ...Playground.args,\n  placeholder: 'Share with...',\n};\n\nexport const Focus = MultiValueInputTemplate.bind({});\nFocus.args = {\n  ...Playground.args,\n  isFocused: true,\n  className: 'focus-within',\n};\n\nexport const Invalid = MultiValueInputTemplate.bind({});\nInvalid.args = {\n  ...Playground.args,\n  isInvalid: true,\n};\n\nexport const Disabled = MultiValueInputTemplate.bind({});\nDisabled.args = {\n  ...Playground.args,\n  isDisabled: true,\n  value: ['john@example.com', 'jane@example.com'],\n};\n\nexport const NonClearable = MultiValueInputTemplate.bind({});\nNonClearable.args = {\n  ...Playground.args,\n  isClearable: false,\n  value: ['john@example.com', 'jane@example.com'],\n};\nNonClearable.title = 'Non-clearable';\n\nexport const Validation: StoryFn = (args) => {\n  const [isInvalid, setIsInvalid] = useState(true);\n\n  return (\n    <>\n      <Label htmlFor=\"number\">Numbers only</Label>\n      <MultiValueInput\n        {...args}\n        inputId=\"emails\"\n        inputValue=\"abc\"\n        isInvalid={isInvalid}\n        pattern=\"[0-9]+\"\n        value={['12']}\n        onInputChange={(e) => {\n          setIsInvalid(!!e.target.validity.patternMismatch);\n        }}\n      />\n    </>\n  );\n};\n\nexport const PillTruncation: StoryFn<MultiValueInputProps> = (args) => (\n  <Stack gap=\"md\">\n    <Heading size=\"h3\">Default truncation N=16</Heading>\n    <MultiValueInput {...args} />\n    <Heading size=\"h3\">Custom truncation N=25</Heading>\n    <MultiValueInput {...args} maxPillLabelLength={25} />\n    <Heading size=\"h3\">Custom truncation N=5</Heading>\n    <MultiValueInput {...args} maxPillLabelLength={5} />\n  </Stack>\n);\nPillTruncation.args = {\n  ...Playground.args,\n  value: [\n    '123456789012345678901234567890',\n    '12345678901234567890',\n    '1234567890',\n  ],\n};\n\nexport const PillWrapping: StoryFn<MultiValueInputProps> = (args) => (\n  <div style={{ width: '200px' }}>\n    <MultiValueInput {...args} />\n  </div>\n);\nPillWrapping.args = {\n  ...Playground.args,\n  value: ['12345678901234567890', '1234567890'],\n};\n\nexport const ControlledInput: StoryFn<MultiValueInputProps> = (args) => {\n  const [values, setValues] = useState<string[] | undefined>([]);\n\n  return (\n    <Stack gap=\"sm\">\n      <Banner variant=\"warn\" onClose={noop}>\n        Handling duplicated values is <Strong>up to the consumer</Strong> for\n        the controlled input.\n      </Banner>\n      <MultiValueInput\n        {...args}\n        value={values}\n        onValueAdd={(_, v) => {\n          setValues(v);\n          action('valueAdd')(v);\n        }}\n        onValueRemove={(v) => {\n          setValues(v);\n          action('valueRemove')(v);\n        }}\n        onValuesChange={(v) => {\n          setValues(v);\n          action('valuesChange')(v);\n        }}\n      />\n      <Inline gap=\"md\">\n        <Button\n          onClick={() => setValues(['controlledValue1', 'controlledValue2'])}\n        >\n          Add values\n        </Button>\n        <Button onClick={() => setValues([])}>Reset values</Button>\n      </Inline>\n    </Stack>\n  );\n};\n\nControlledInput.parameters = {\n  screenshot: { skip: true },\n};\n"],"names":["title","MultiValueInput_stories","args","MultiValueInput","parameters","a11y","config","rules","id","enabled","MultiValueInputTemplate","onValueAdd","onValuesChange","onInputChange","valuesDelimiter","Playground","bind","pastedValue","action","onValueRemove","value","e","clipboardData","window","getData","placeholder","filter","i","join","Filled","WithPlaceholder","isDisabled","Focus","NonClearable","isFocused","isClearable","Invalid","isInvalid","Disabled","patternMismatch","PillTruncation","StoryFn","Validation","PillWrapping","useState","jsx","Label","setValues","setIsInvalid","target","validity","Heading","v","screenshot"],"mappings":"+5EAgBEA,MAAyCC,GAAA,CACzCC,UAAMC,EACJH,MAAA,mCACFE,KAAC,CACDE,aAAY,mBACVC,EACEC,WAAQ,CACNC,KAAAA,CAEIC,OAAI,CACJC,MAAAA,CACD,CAELD,GAAA,cACFC,QAAA,EAAA,CACF,CAGIC,CAIC,CACG,CACRC,EAEAC,EACAC,GAAAA,EAAAA,IAAAA,MAAqBX,EAAC,aAAgB,iBACtCY,CAAAA,EAEmBC,EAAKL,EAAwBM,KAAc,EAAA,EAG5DD,EAAOE,MAITN,WAAAO,EAAA,YAAA,EACDC,cAAAD,EAAA,eAAA,EAEMN,iBAAeF,gBAAAA,EAChBG,cAAQK,EAAA,eAAA,EACZJ,gBAAkB,IAClBM,QAA0BC,IAC3BA,EAAAC,eAAAC,OAAAD,eAAAE,QAEM,MACQ,EAEbC,MAAW,GAAE,EACdC,UAAAC,IAAA,GAAA,EAEMC,KAAA,MAIMC,MAAAA,EAAAnB,EAAAM,KAAA,EAAA,EACba,EAAC3B,KAAA,CAEM,GAAAa,OACAK,0BAAQ,kBAAA,GAGdU,MAAAA,EAAApB,EAAAM,KAAA,EAAA,EAEDc,OAAwBpB,CAChB,GAAAK,EAAQb,KACduB,YAAa,eACbM,EAEDC,MAAAA,EAAAtB,EAAAM,KAAA,EAAA,EAEDgB,EAAO9B,KAAM+B,CACD,GAAAlB,OACVmB,UAAGnB,GACHoB,UAAW,cACXf,EAEWpB,MAAAA,EAAuBU,EAAAM,KAAA,EAAA,EAEpCoB,OAAuB,CACrB,GAAMrB,OAENsB,UACE,EACJ,EASsBC,MAAAA,IAAqBC,KAAAA,EAAgB,EACnDD,EAAEpC,KAAA,CAEV,GAAOa,EAAAb,KAEN6B,WAAA,GAEDX,MAAaoB,CAAAA,mBAAgBC,kBAA4B,CAEzD,EAEaR,MAAAA,EAAgCvB,EAASM,KAAA,EAAA,EACtDiB,EAAoB/B,KAAA,CAChB,GAACa,EAAQb,KACTiC,YAAgB,GAClBf,MAAO,CACR,mBAAA,kBAAA,CACDoB,IACKzB,MAAe,gBAMpB,MAAC2B,EAAAxC,GAAA,CAED,KAAayC,CAAAA,EAAAA,CAAcF,EAA4BG,YAAA,EAAA,EACtB,oCAE1BC,EAAA,IAAAC,GAAA,CACN,QAAA,SAAA,SAAA,eAAA,QACW3C,EACPY,CAAAA,GAAAA,EACI,QAAuB,SAC/B,WAAA,MAEM,UAAAsB,EACC,QAASU,SAEf,MACQ,CAAC,IAAI,EACF,cAAuB1B,GAAA,CACpC2B,EAAA,CAAA,CAAA3B,EAAA4B,OAAAC,SAA6CX,eAAmB,CAAA,EAChE,CAEM,CAAA,CAAA,CAKIrB,EAGSsB,EAAGtC,GACZgB,EAAAA,KAAAA,GAAAA,CAAAA,IAAO,KACT,SAAA,CAAC2B,EAAA,IAAAM,EAAA,CACD,KAAA,KAAiBC,SAAM,0BAAA,UACT,CAAA,GAAAlD,EAAA,EACZgB,EAAAA,IAAAA,EAAAA,CAAO,KAAA,KAAA,SAAkB,yBAAA,EAC1B2B,EAAA,IAAA1C,EAAA,CAACD,GAAAA,EAAA,mBAAA,EAAA,CAAA,EAEV2C,EAAA,IAAAM,EAAA,CAAa,KAAK,KAAI,SAAA,wBAAA,EACtBN,EAAA,IAAA1C,EAAA,CACmBD,GAAAA,EAAM6C,mBAA6B,CAAA,CAAA,CAAA,EAEtD,EAEAP,EAAetC,KAAC,CAChB,GAAAa,EAAcb,KACVkB,OAEH,iCAEc,uBACbiC,YAAY,CAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}