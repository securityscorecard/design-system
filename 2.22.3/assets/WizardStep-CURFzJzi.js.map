{"version":3,"file":"WizardStep-CURFzJzi.js","sources":["../../../src/components/Stepper/index.ts","../../../src/components/Wizard/Wizard.context.tsx","../../../src/components/Wizard/hooks/useWizardContext.ts","../../../src/components/Wizard/hooks/useActiveStep.ts","../../../src/components/Wizard/hooks/useWizardNavigation.ts","../../../src/components/Wizard/WizardActions.tsx","../../../src/components/Wizard/WizardStepper.tsx","../../../src/components/Wizard/Wizard.tsx","../../../src/components/Wizard/hooks/useRegisterStep.ts","../../../src/components/Wizard/WizardStep.tsx"],"sourcesContent":["export * as StepperEnums from './Stepper.enums';\nexport { default as Stepper } from './Stepper';\nexport { default as Step } from './Step';\nexport * from './Stepper.types';\n","import {\n  type Dispatch,\n  type SetStateAction,\n  createContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\n\nimport { SingleWizardStep } from './Wizard.types';\n\nexport interface WizardState {\n  initialStep?: string;\n  activeStepId?: string;\n  steps: SingleWizardStep[];\n  isBackwardNavigationEnabled: boolean;\n  update: Dispatch<SetStateAction<WizardState>>;\n}\n\nexport const WizardContext = createContext<WizardState>({\n  initialStep: undefined,\n  activeStepId: undefined,\n  steps: [],\n  isBackwardNavigationEnabled: false,\n  update: () => null,\n});\n\ninterface WizardProviderProps {\n  children: React.ReactNode;\n  initialStep: string;\n  isBackwardNavigationEnabled: boolean;\n  onStepChange: (step: SingleWizardStep) => void;\n}\n\nexport const WizardProvider = ({\n  children,\n  initialStep,\n  isBackwardNavigationEnabled,\n  onStepChange,\n}: WizardProviderProps) => {\n  const [state, update] = useState<WizardState>({\n    activeStepId: undefined,\n    update: () => null,\n    initialStep,\n    steps: [],\n    isBackwardNavigationEnabled,\n  });\n\n  const activeStep = state.steps.find((item) => item.id === state.activeStepId);\n\n  useEffect(() => {\n    if (activeStep) {\n      onStepChange(activeStep);\n    }\n    // eslint-disable-next-line\n  }, [activeStep?.name, onStepChange]);\n\n  const value = useMemo(() => ({ ...state, update }), [state]);\n  return (\n    <WizardContext.Provider value={value}>{children}</WizardContext.Provider>\n  );\n};\n","import { useContext } from 'react';\n\nimport { WizardContext, WizardState } from '../Wizard.context';\n\nexport const useWizardContext = () => {\n  return useContext<WizardState>(WizardContext);\n};\n","import { useWizardContext } from './useWizardContext';\n\nexport const useActiveStep = () => {\n  const context = useWizardContext();\n  if (context.activeStepId) {\n    return context.steps.find((item) => item.id === context.activeStepId);\n  }\n  if (context.initialStep) {\n    return context.steps.find((item) => item.id === context.initialStep);\n  }\n  return context.steps[0];\n};\n","import { useWizardContext } from './useWizardContext';\nimport { SingleWizardStep, WizardNavigation } from '../Wizard.types';\nimport { useActiveStep } from './useActiveStep';\n\nexport const useWizardNavigation = (): WizardNavigation => {\n  const { update, steps } = useWizardContext();\n  const activeStep = useActiveStep();\n  const activeStepIndex = steps.findIndex((item) => item.id === activeStep.id);\n\n  const goToStep = (step: SingleWizardStep) => {\n    update((state) => ({ ...state, activeStepId: step.id }));\n  };\n\n  const goToNextStep = () => {\n    const next = steps[activeStepIndex + 1];\n    if (next) {\n      goToStep(next);\n    }\n  };\n\n  const goToPreviousStep = () => {\n    const previous = steps[activeStepIndex - 1];\n    if (previous) {\n      goToStep(previous);\n    }\n  };\n\n  return {\n    goToNextStep,\n    goToPreviousStep,\n    goToStep,\n  };\n};\n","import Button from '../ButtonV2/Button';\nimport { Inline } from '../layout';\nimport { useActiveStep } from './hooks/useActiveStep';\nimport { useWizardNavigation } from './hooks/useWizardNavigation';\n\nexport const WizardActions = () => {\n  const activeStep = useActiveStep();\n  const navigation = useWizardNavigation();\n\n  if (!activeStep) return null;\n\n  const { primaryAction, secondaryAction } = activeStep;\n\n  return (\n    <Inline gap=\"sm\" justify=\"flex-end\">\n      {secondaryAction ? (\n        <Button\n          isDisabled={secondaryAction.isDisabled}\n          variant=\"ghost\"\n          onClick={() => secondaryAction.onClick(navigation)}\n        >\n          {secondaryAction.label}\n        </Button>\n      ) : null}\n      <Button\n        isDisabled={primaryAction.isDisabled}\n        onClick={() => primaryAction.onClick(navigation)}\n      >\n        {primaryAction.label}\n      </Button>\n    </Inline>\n  );\n};\n","import { Step, Stepper } from '../Stepper';\nimport { useActiveStep } from './hooks/useActiveStep';\nimport { useWizardContext } from './hooks/useWizardContext';\nimport { useWizardNavigation } from './hooks/useWizardNavigation';\n\nexport const WizardStepper = () => {\n  const { steps, isBackwardNavigationEnabled } = useWizardContext();\n  const activeStep = useActiveStep();\n  const navigation = useWizardNavigation();\n  const activeStepIndex = steps.findIndex((item) => item.id === activeStep.id);\n  return steps.length >= 3 ? (\n    <Stepper activeStep={activeStepIndex} showTextBreakpoint={10000}>\n      {steps.map((item) => (\n        <Step\n          key={item.id}\n          label={item.name}\n          onStepClick={\n            isBackwardNavigationEnabled\n              ? () => navigation.goToStep(item)\n              : undefined\n          }\n        />\n      ))}\n    </Stepper>\n  ) : null;\n};\n","import { Inline, Stack } from '../layout';\nimport { Modal } from '../Modal';\nimport { ModalSizes } from '../Modal/Modal.enums';\nimport { WizardProvider } from './Wizard.context';\nimport { WizardProps } from './Wizard.types';\nimport { WizardActions } from './WizardActions';\nimport { WizardStepper } from './WizardStepper';\n\nconst Wizard = ({\n  initialStep,\n  size = ModalSizes.lg,\n  onStepChange = () => null,\n  onClose = undefined,\n  isBackwardNavigationEnabled,\n  children,\n}: WizardProps) => {\n  return (\n    <WizardProvider\n      initialStep={initialStep}\n      isBackwardNavigationEnabled={isBackwardNavigationEnabled}\n      onStepChange={onStepChange}\n    >\n      <Modal size={size} onClose={onClose}>\n        <Stack gap=\"lg\">\n          {children}\n          <Inline\n            align=\"center\"\n            gap=\"lg\"\n            justify=\"space-between\"\n            stretch=\"start\"\n          >\n            <WizardStepper />\n            <WizardActions />\n          </Inline>\n        </Stack>\n      </Modal>\n    </WizardProvider>\n  );\n};\n\nexport default Wizard;\n","import { useEffect } from 'react';\n\nimport { useWizardContext } from './useWizardContext';\nimport { SingleWizardStep } from '../Wizard.types';\n\nexport const useRegisterStep = (step: SingleWizardStep) => {\n  const { update } = useWizardContext();\n  useEffect(() => {\n    // Register step\n    update((state) => {\n      return {\n        ...state,\n        steps: [...state.steps, step],\n      };\n    });\n    // Unregister step\n    return () =>\n      update((state) => ({\n        ...state,\n        steps: state.steps.filter((item) => item.id === step.id),\n      }));\n    // eslint-disable-next-line\n  }, [step.id]);\n\n  // Update step state\n  useEffect(() => {\n    update((state) => {\n      return {\n        ...state,\n        steps: state.steps.map((item) => (item.id === step.id ? step : item)),\n      };\n    });\n    // eslint-disable-next-line\n  }, [\n    step.name,\n    step.primaryAction.isDisabled,\n    step.primaryAction.label,\n    step.primaryAction.onClick,\n    step.secondaryAction?.isDisabled,\n    step.secondaryAction?.label,\n    step.secondaryAction?.onClick,\n  ]);\n};\n","import styled from 'styled-components';\n\nimport { useRegisterStep } from './hooks/useRegisterStep';\nimport { WizardStepProps } from './Wizard.types';\nimport { useActiveStep } from './hooks/useActiveStep';\nimport { pxToRem } from '../../utils';\n\n// The fixed container height helps to improve Wizard UX by keeping the CTAs at the same horizontal place, however in the future this could be responsiveness constrain.\nconst StepContainer = styled.div`\n  height: ${pxToRem(418)};\n`;\n\nconst WizardStep = ({ children, ...step }: WizardStepProps) => {\n  const activeStep = useActiveStep();\n  const isActiveStep = activeStep?.id === step.id;\n  useRegisterStep(step);\n  return isActiveStep ? <StepContainer>{children}</StepContainer> : null;\n};\n\nexport default WizardStep;\n"],"names":["cov_nm221901l","actualCoverage","initialStep","activeStepId","isBackwardNavigationEnabled","useEffect","onStepChange","cov_kn3cq97fl","s","useWizardContext","f","cov_1oxkp5v89d","useActiveStep","context","find","steps","item","id","b","cov_2dq815hqtj","path","hash","global","gcv","coverageData","coverage","update","activeStep","findIndex","goToStep","step","state","goToNextStep","next","activeStepIndex","goToPreviousStep","previous","cov_1f5920591z","WizardActions","navigation","useWizardNavigation","secondaryAction","children","jsx","Button","isDisabled","cov_o9cv3091z","WizardStepper","Stepper","showTextBreakpoint","cov_2r3ayspy9u","Wizard","lg","onClose","undefined","cov_2jlzqzq247","useRegisterStep","filter","name","StepContainer","cov_8ym4e8qd8","styled","div","withConfig","displayName","componentId","pxToRem","WizardStep","isActiveStep"],"mappings":"srCAAA,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,m9FC2CIE,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,cAAAA,CAAAA,YAAAA,OACSC,aACTC,OAAAA,MAGFA,CAAAA,EAAAA,4BAEAC,GAAAA,OAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAEIC,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,EAAAA,EAAAA,ynECpDN,OAAAC,EAAA,UAAA,CAAA,OAAAN,CAAA,EAAAA,CAAA,CAAAM,EAAA,EAIsCA,EAAAC,EAAAA,EAEtC,CAAA,IAAA,MAAAC,EAAAA,KAAAF,EAAA,EAAAG,OAAAH,EAAA,EAAAC,EAAA,CAAA,q3ECNA,OAAAG,EAAA,UAAA,CAAA,OAAAV,CAAA,EAAAA,CAAA,CAAAU,EAAA,EAAiCA,EAAA,EAAAH,EAAA,CAAA,YAGEI,IAAA,CAAAD,EAAA,EAAAD,EAAA,CAAA,IACjC,eAA0BD,CAAAA,IAAAA,EAAAE,GACxB,OADwBA,EAAAH,EAAAA,OACxBK,gBAAqBC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACvB,CAAA,IAAAD,EAAAE,MAAAD,KAAAE,IAAAL,EAAA,EAAAD,EAAA,CAAA,IAAAC,EAAA,EAAAH,EAAAQ,CAAAA,IAAAA,EAAAC,KAAAJ,EAAAV,aAAA,IACAQ,EAAA,EAAAO,EAAA,CAAA,EAAA,CAAA,IAAAP,EAAA,EAAAH,EAAA,CAAA,IACEK,eAAqBC,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IACvBD,EAAAE,MAAAD,KAAAE,IAAAL,EAAA,EAAAD,EAAAC,CAAAA,IAAAA,IAAAH,EAAA,CAAA,IAAAQ,EAAAC,KAAAJ,EAAAX,YAAA,IACOW,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EACT,CAAA,IAAAA,EAAAE,MAAA,CAAA,KCD2D,SAAAI,GAAA,CAAA,IAAAC,EAAA,mGAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,mGAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAA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AAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAA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"}