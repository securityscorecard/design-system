{"version":3,"file":"all-CuDSNKMt.js","sources":["../../../node_modules/ramda/es/internal/_xall.js","../../../node_modules/ramda/es/all.js"],"sourcesContent":["import _curry2 from \"./_curry2.js\";\nimport _reduced from \"./_reduced.js\";\nimport _xfBase from \"./_xfBase.js\";\n\nvar XAll =\n/*#__PURE__*/\nfunction () {\n  function XAll(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.all = true;\n  }\n\n  XAll.prototype['@@transducer/init'] = _xfBase.init;\n\n  XAll.prototype['@@transducer/result'] = function (result) {\n    if (this.all) {\n      result = this.xf['@@transducer/step'](result, true);\n    }\n\n    return this.xf['@@transducer/result'](result);\n  };\n\n  XAll.prototype['@@transducer/step'] = function (result, input) {\n    if (!this.f(input)) {\n      this.all = false;\n      result = _reduced(this.xf['@@transducer/step'](result, false));\n    }\n\n    return result;\n  };\n\n  return XAll;\n}();\n\nvar _xall =\n/*#__PURE__*/\n_curry2(function _xall(f, xf) {\n  return new XAll(f, xf);\n});\n\nexport default _xall;","import _curry2 from \"./internal/_curry2.js\";\nimport _dispatchable from \"./internal/_dispatchable.js\";\nimport _xall from \"./internal/_xall.js\";\n/**\n * Returns `true` if all elements of the list match the predicate, `false` if\n * there are any that don't.\n *\n * Dispatches to the `all` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> Boolean\n * @param {Function} fn The predicate function.\n * @param {Array} list The array to consider.\n * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n *         otherwise.\n * @see R.any, R.none, R.transduce\n * @example\n *\n *      const equals3 = R.equals(3);\n *      R.all(equals3)([3, 3, 3, 3]); //=> true\n *      R.all(equals3)([3, 3, 1, 3]); //=> false\n */\n\nvar all =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_dispatchable(['all'], _xall, function all(fn, list) {\n  var idx = 0;\n\n  while (idx < list.length) {\n    if (!fn(list[idx])) {\n      return false;\n    }\n\n    idx += 1;\n  }\n\n  return true;\n}));\n\nexport default all;"],"names":["XAll","f","xf","_xfBase","result","input","_reduced","_xall","_curry2","all","_dispatchable","fn","list","idx"],"mappings":"yIAIA,IAAIA,EAEJ,UAAY,CACV,SAASA,EAAKC,EAAGC,EAAI,CACnB,KAAK,GAAKA,EACV,KAAK,EAAID,EACT,KAAK,IAAM,EACZ,CAED,OAAAD,EAAK,UAAU,mBAAmB,EAAIG,EAAQ,KAE9CH,EAAK,UAAU,qBAAqB,EAAI,SAAUI,EAAQ,CACxD,OAAI,KAAK,MACPA,EAAS,KAAK,GAAG,mBAAmB,EAAEA,EAAQ,EAAI,GAG7C,KAAK,GAAG,qBAAqB,EAAEA,CAAM,CAChD,EAEEJ,EAAK,UAAU,mBAAmB,EAAI,SAAUI,EAAQC,EAAO,CAC7D,OAAK,KAAK,EAAEA,CAAK,IACf,KAAK,IAAM,GACXD,EAASE,EAAS,KAAK,GAAG,mBAAmB,EAAEF,EAAQ,EAAK,CAAC,GAGxDA,CACX,EAESJ,CACT,IAEIO,EAEJC,EAAQ,SAAeP,EAAGC,EAAI,CAC5B,OAAO,IAAIF,EAAKC,EAAGC,CAAE,CACvB,CAAC,ECXGO,EAEJD,EAEAE,EAAc,CAAC,KAAK,EAAGH,EAAO,SAAaI,EAAIC,EAAM,CAGnD,QAFIC,EAAM,EAEHA,EAAMD,EAAK,QAAQ,CACxB,GAAI,CAACD,EAAGC,EAAKC,CAAG,CAAC,EACf,MAAO,GAGTA,GAAO,CACR,CAED,MAAO,EACT,CAAC,CAAC","x_google_ignoreList":[0,1]}