{"version":3,"file":"Selection.stories-C4UU15Lk.js","sources":["../../../src/components/DatatableV2/stories/Selection.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { PaginationState, RowSelectionState } from '@tanstack/react-table';\n\nimport Datatable from '../Datatable';\nimport Template, { Story } from './Template';\nimport { Button } from '../../Button';\nimport { fetchData, useQuery } from '../mocks/externalData';\nimport argTypes from './argTypes';\n\nexport default {\n  title: 'components/DatatableV2/Selection',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n  argTypes,\n} as Meta<typeof Datatable>;\n\nexport const SelectionEnabled: Story = Template.bind({});\nSelectionEnabled.args = {\n  ...Template.args,\n  getRowId: (row) => row.id,\n};\nSelectionEnabled.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelection: Story = Template.bind({});\nDisabledSelection.args = { ...Template.args, enableRowSelection: false };\nDisabledSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledBatchRowSelection: Story = Template.bind({});\nDisabledBatchRowSelection.args = {\n  ...Template.args,\n  enableBatchRowSelection: false,\n};\nDisabledBatchRowSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const SingleRowSelection: Story = Template.bind({});\nSingleRowSelection.args = {\n  ...SelectionEnabled.args,\n  enableMultiRowSelection: false,\n};\nSingleRowSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelectAllHeader: Story = Template.bind({});\nDisabledSelectAllHeader.args = {\n  ...SelectionEnabled.args,\n  enableSelectAll: false,\n};\nDisabledSelectAllHeader.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const SelectAllModePage: Story = Template.bind({});\nSelectAllModePage.args = { ...SelectionEnabled.args, selectAllMode: 'page' };\n\nexport const SelectAllModeAll: Story = Template.bind({});\nSelectAllModeAll.args = { ...SelectionEnabled.args, selectAllMode: 'all' };\n\nexport const ConditionallyEnabledSelection: Story = Template.bind({});\nConditionallyEnabledSelection.args = {\n  ...Template.args,\n  enableRowSelection: (row) => row.original.organization.grade !== 'A',\n};\nConditionallyEnabledSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const RowSelectionActions: Story = Template.bind({});\nRowSelectionActions.args = {\n  ...SelectionEnabled.args,\n  initialState: {\n    rowSelection: {\n      'e23968c3-3f19-44b2-aee9-c4a1d7c326ee': true,\n      'eb43a2df-8884-43f1-bfe8-eea3545bbded': true,\n    },\n  },\n  renderRowSelectionActions: ({ selectedRows, table }) => (\n    <>\n      <Button\n        variant=\"outline\"\n        onClick={() => {\n          action('selectedRows')(selectedRows);\n        }}\n      >\n        Show selected rows\n      </Button>\n      <Button\n        onClick={() => {\n          table.setRowSelection?.(() =>\n            table.options.data.reduce(\n              (acc, row) =>\n                row.organization.grade === 'F'\n                  ? { ...acc, [row.id]: true }\n                  : acc,\n              {},\n            ),\n          );\n        }}\n      >\n        Select all F grades\n      </Button>\n    </>\n  ),\n};\nRowSelectionActions.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const DisabledSelectionToolbar: Story = Template.bind({});\nDisabledSelectionToolbar.args = {\n  ...SelectionEnabled.args,\n  initialState: RowSelectionActions.args.initialState,\n  enableSelectionToolbar: false,\n};\n\nexport const SelectionManagedState: Story = (args) => {\n  const [rowSelection, setRowSelection] = useState<RowSelectionState>({\n    'e23968c3-3f19-44b2-aee9-c4a1d7c326ee': true,\n    'eb43a2df-8884-43f1-bfe8-eea3545bbded': true,\n  });\n\n  return (\n    <>\n      <Datatable\n        state={{ rowSelection }}\n        onRowSelectionChange={setRowSelection}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(rowSelection, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nSelectionManagedState.args = SelectionEnabled.args;\n\nexport const ManualPaginationWithSinglePageSelection: Story = (args) => {\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 1,\n    pageSize: 10,\n  });\n\n  const dataQuery = useQuery({\n    queryKey: ['data', pagination],\n    queryFn: () => fetchData(pagination),\n    keepPreviousData: true,\n  });\n\n  return (\n    <Datatable\n      {...args}\n      data={dataQuery?.data?.entries ?? []}\n      pageCount={dataQuery?.data?.pageCount ?? -1}\n      rowCount={dataQuery?.data?.rowCount}\n      state={{ pagination }}\n      manualPagination\n      onPaginationChange={setPagination}\n    />\n  );\n};\nManualPaginationWithSinglePageSelection.args = {\n  ...Template.args,\n  manualPagination: true,\n  rowSelectionMode: 'single-page',\n  renderRowSelectionActions: ({ selectedRows }) => (\n    <Button onClick={() => action('batch action')(selectedRows)}>\n      Show selected rows\n    </Button>\n  ),\n  initialState: {\n    rowSelection: {\n      '55ea9935-7f59-4e30-b132-5372d214c20e': true,\n      '72badeb8-8974-4dc3-82f5-b638b381b9c4': true,\n      'ffcc21d9-7fe7-4c26-b708-4b8ba6432ad6': true,\n    },\n  },\n};\nManualPaginationWithSinglePageSelection.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const ManualPaginationWithMultiPageSelection: Story =\n  ManualPaginationWithSinglePageSelection.bind({});\nManualPaginationWithMultiPageSelection.args = {\n  ...ManualPaginationWithSinglePageSelection.args,\n  manualPagination: true,\n  rowSelectionMode: 'multi-page',\n  renderRowSelectionActions: ({ selectedRows }) => (\n    <Button onClick={() => action('batch action')(selectedRows)}>\n      Show selected rows\n    </Button>\n  ),\n};\nManualPaginationWithMultiPageSelection.parameters = {\n  screenshot: { skip: false },\n};\n"],"names":["component","Selection_stories","parameters","screenshot","skip","argTypes","SelectionEnabled","Template","bind","args","getRowId","row","id","DisabledSelection","enableRowSelection","DisabledBatchRowSelection","enableBatchRowSelection","SingleRowSelection","enableMultiRowSelection","DisabledSelectAllHeader","enableSelectAll","SelectAllModePage","selectAllMode","SelectAllModeAll","ConditionallyEnabledSelection","original","organization","grade","RowSelectionActions","initialState","renderRowSelectionActions","selectedRows","table","jsxs","Fragment","jsx","Button","options","data","reduce","acc","DisabledSelectionToolbar","enableSelectionToolbar","useState","Datatable","rowSelection","JSON","stringify","pageSize","ManualPaginationWithSinglePageSelection","pagination","setPagination","dataQuery","queryKey","queryFn","useQuery","keepPreviousData","manualPagination","rowSelectionMode","action","ManualPaginationWithMultiPageSelection"],"mappings":"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"}