{"version":3,"file":"ColumnPinning.stories-2wvQzCV1.js","sources":["../../src/components/DatatableV2/stories/ColumnPinning.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta } from '@storybook/react';\nimport { ColumnPinningState } from '@tanstack/react-table';\n\nimport Datatable from '../Datatable';\nimport Template, { Story, columns } from './Template';\n\nexport default {\n  title: 'components/DatatableV2/ColumnPinning',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n} as Meta<typeof Datatable>;\n\nexport const ColumnPinningEnabled: Story = Template.bind({});\nColumnPinningEnabled.args = Template.args;\n\nexport const DisabledColumnPinning: Story = Template.bind({});\nDisabledColumnPinning.args = { ...Template.args, enableColumnPinning: false };\n\nexport const DisabledColumnPinningForColumn: Story = Template.bind({});\nDisabledColumnPinningForColumn.args = {\n  ...Template.args,\n  columns: [\n    ...columns,\n    { accessorKey: 'country', header: 'Country', enablePinning: false },\n  ],\n};\n\nexport const InitialColumnPinning: Story = Template.bind({});\nInitialColumnPinning.args = {\n  ...Template.args,\n  initialState: {\n    columnPinning: { left: ['score'], right: ['detectionMethod'] },\n  },\n  enableRowSelection: true,\n};\nInitialColumnPinning.parameters = {\n  screenshot: {\n    skip: false,\n    viewport: {\n      width: 600,\n      height: 1600,\n    },\n  },\n};\n\nexport const ColumnPinningManagedState: Story = (args) => {\n  const [columnPinning, setColumnPinning] = useState<ColumnPinningState>({\n    left: ['score'],\n  });\n\n  return (\n    <>\n      <Datatable\n        state={{ columnPinning }}\n        enableRowSelection\n        onColumnPinningChange={setColumnPinning}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(columnPinning, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nColumnPinningManagedState.args = Template.args;\n"],"names":["component","ColumnPinning_stories","parameters","screenshot","skip","ColumnPinningEnabled","Template","bind","args","DisabledColumnPinning","enableColumnPinning","DisabledColumnPinningForColumn","columns","accessorKey","header","enablePinning","InitialColumnPinning","initialState","columnPinning","left","right","enableRowSelection","viewport","width","height","ColumnPinningManagedState","setColumnPinning","useState","jsxs","Fragment","jsx","Datatable","JSON","stringify"],"mappings":"6zDASEA,MAAoBC,GAAA,CACpBC,MAAAA,uCACEC,UAAAA,EAAcC,WAAM,CAAKD,WAAA,CAAAC,KAAA,EAAA,CAC3B,CACF,EAGAC,EAAyCC,EAAAC,KAAA,EAAA,EAEzCF,EAAkCG,KAAAF,EAAOE,KACCC,MAAAA,EAAKH,EAAAC,KAAA,EAAA,EAAEG,EAAqBF,KAAA,CAAA,GAAAF,EAAAE,KAAAE,oBAAA,EAAA,EAEzDC,MAAAA,EAAwCL,EAASC,KAAK,EAAE,EACrEI,EAA+BH,KAAO,CACpC,GAAGF,EAASE,KACZI,QAAS,CAELC,GAAAA,EAAwBC,CAAAA,YAAiB,UAAAA,OAAA,UAAAC,cAAA,EAAA,CAAA,GAIlCC,MAAAA,EAA8BV,EAASC,KAAK,EAAE,EAC3DS,EAAqBR,KAAO,CAC1B,GAAGF,EAASE,KACZS,aAAc,CACZC,cAAe,CAAAC,KAAA,CAAA,OAAA,EAAAC,MAAA,CAAA,iBAAA,CAAA,sBAA4C,EAAE,IAC9DlB,WAAA,CACDmB,WAAAA,CACDjB,KAAA,GACmBkB,SAAA,CAClBnB,MAAY,IACVC,OAAW,IACXkB,CACEC,CACAC,EAEJ,MAAAC,EAAAjB,GAAA,CACD,KAAA,CAAAU,EAAAQ,CAAA,EAAAC,WAAA,CAEDR,aAAsC,CAAA,CAC9B,EAEN,OAIIS,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,MAACC,GACUb,MAAAA,CAAAA,cAAAA,CAAAA,EACS,mBAClB,GAGE,sBAAAQ,EACDlB,GAAAA,CAAO,CAAA,eAGT,CAAA,SAAA,CAAAsB,EAAAA,IAAA,UAAA,SAAA,QAAA,CAAA,QAEN,MAAAE,CAAAA,SAAAA,KAAAC,UAAAf,EAAA,KAAA,CAAA,EAAA,CAAA,EACDO;;;;;;;;;;;;;"}