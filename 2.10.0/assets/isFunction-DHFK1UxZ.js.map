{"version":3,"file":"isFunction-DHFK1UxZ.js","sources":["../../../node_modules/ramda/es/max.js","../../../node_modules/ramda/es/pluck.js","../../../node_modules/ramda/es/anyPass.js","../../../node_modules/ramda-adjunct/es/isGeneratorFunction.js","../../../node_modules/ramda-adjunct/es/isAsyncFunction.js","../../../node_modules/ramda-adjunct/es/isFunction.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns the larger of its two arguments.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> a\n * @param {*} a\n * @param {*} b\n * @return {*}\n * @see R.maxBy, R.min\n * @example\n *\n *      R.max(789, 123); //=> 789\n *      R.max('a', 'b'); //=> 'b'\n */\n\nvar max =\n/*#__PURE__*/\n_curry2(function max(a, b) {\n  return b > a ? b : a;\n});\n\nexport default max;","import _curry2 from \"./internal/_curry2.js\";\nimport map from \"./map.js\";\nimport prop from \"./prop.js\";\n/**\n * Returns a new list by plucking the same named property off all objects in\n * the list supplied.\n *\n * `pluck` will work on\n * any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => k -> f {k: v} -> f v\n * @param {Number|String} key The key name to pluck off of each object.\n * @param {Array} f The array or functor to consider.\n * @return {Array} The list of values for the given key.\n * @see R.project, R.prop, R.props\n * @example\n *\n *      var getAges = R.pluck('age');\n *      getAges([{name: 'fred', age: 29}, {name: 'wilma', age: 27}]); //=> [29, 27]\n *\n *      R.pluck(0, [[1, 2], [3, 4]]);               //=> [1, 3]\n *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n */\n\nvar pluck =\n/*#__PURE__*/\n_curry2(function pluck(p, list) {\n  return map(prop(p), list);\n});\n\nexport default pluck;","import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\nimport max from \"./max.js\";\nimport pluck from \"./pluck.js\";\nimport reduce from \"./reduce.js\";\n/**\n * Takes a list of predicates and returns a predicate that returns true for a\n * given list of arguments if at least one of the provided predicates is\n * satisfied by those arguments.\n *\n * The function returned is a curried function whose arity matches that of the\n * highest-arity predicate.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Logic\n * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n * @param {Array} predicates An array of predicates to check\n * @return {Function} The combined predicate\n * @see R.allPass\n * @example\n *\n *      const isClub = R.propEq('suit', '♣');\n *      const isSpade = R.propEq('suit', '♠');\n *      const isBlackCard = R.anyPass([isClub, isSpade]);\n *\n *      isBlackCard({rank: '10', suit: '♣'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n *      isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n */\n\nvar anyPass =\n/*#__PURE__*/\n_curry1(function anyPass(preds) {\n  return curryN(reduce(max, 0, pluck('length', preds)), function () {\n    var idx = 0;\n    var len = preds.length;\n\n    while (idx < len) {\n      if (preds[idx].apply(this, arguments)) {\n        return true;\n      }\n\n      idx += 1;\n    }\n\n    return false;\n  });\n});\n\nexport default anyPass;","import { type, identical, pipe, curryN } from 'ramda';\n\n/**\n * Checks if input value is `Generator Function`.\n *\n * @func isGeneratorFunction\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isFunction|isFunction}, {@link RA.isAsyncFunction|isAsyncFunction}, {@link RA.isNotGeneratorFunction|isNotGeneratorFunction}\n * @example\n *\n * RA.isGeneratorFunction(function* test() { }); //=> true\n * RA.isGeneratorFunction(null); //=> false\n * RA.isGeneratorFunction(function test() { }); //=> false\n * RA.isGeneratorFunction(() => {}); //=> false\n */\nvar isGeneratorFunction = curryN(1, pipe(type, identical('GeneratorFunction')));\nexport default isGeneratorFunction;","import { pipe, type, identical, curryN } from 'ramda';\n\n/**\n * Checks if input value is `Async Function`.\n *\n * @func isAsyncFunction\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isFunction|isFunction}, {@link RA.isNotAsyncFunction|isNotAsyncFunction}, {@link RA.isGeneratorFunction|isGeneratorFunction}\n * @example\n *\n * RA.isAsyncFunction(async function test() { }); //=> true\n * RA.isAsyncFunction(null); //=> false\n * RA.isAsyncFunction(function test() { }); //=> false\n * RA.isAsyncFunction(() => {}); //=> false\n */\nvar isAsyncFunction = curryN(1, pipe(type, identical('AsyncFunction')));\nexport default isAsyncFunction;","import { anyPass, type, pipe, identical } from 'ramda';\nimport isGeneratorFunction from './isGeneratorFunction';\nimport isAsyncFunction from './isAsyncFunction';\n\n/**\n * Checks if input value is `Function`.\n *\n * @func isFunction\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.5.0|v0.5.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNotFunction|isNotFunction}, {@link RA.isAsyncFunction|isNotAsyncFunction}, {@link RA.isGeneratorFunction|isGeneratorFunction}\n * @example\n *\n * RA.isFunction(function test() { }); //=> true\n * RA.isFunction(function* test() { }); //=> true\n * RA.isFunction(async function test() { }); //=> true\n * RA.isFunction(() => {}); //=> true\n * RA.isFunction(null); //=> false\n * RA.isFunction('abc'); //=> false\n */\nvar isFunction = anyPass([pipe(type, identical('Function')), isGeneratorFunction, isAsyncFunction]);\nexport default isFunction;"],"names":["max","_curry2","a","b","pluck","p","list","map","prop","anyPass","_curry1","preds","curryN","reduce","idx","len","isGeneratorFunction","pipe","type","identical","isAsyncFunction","isFunction"],"mappings":"8KAmBG,IAACA,EAEJC,EAAQ,SAAaC,EAAGC,EAAG,CACzB,OAAOA,EAAID,EAAIC,EAAID,CACrB,CAAC,ECQGE,EAEJH,EAAQ,SAAeI,EAAGC,EAAM,CAC9B,OAAOC,EAAIC,EAAKH,CAAC,EAAGC,CAAI,CAC1B,CAAC,ECHGG,EAEJC,EAAQ,SAAiBC,EAAO,CAC9B,OAAOC,EAAOC,EAAOb,EAAK,EAAGI,EAAM,SAAUO,CAAK,CAAC,EAAG,UAAY,CAIhE,QAHIG,EAAM,EACNC,EAAMJ,EAAM,OAETG,EAAMC,GAAK,CAChB,GAAIJ,EAAMG,CAAG,EAAE,MAAM,KAAM,SAAS,EAClC,MAAO,GAGTA,GAAO,CACR,CAED,MAAO,EACX,CAAG,CACH,CAAC,EC7BGE,EAAsBJ,EAAO,EAAGK,EAAKC,EAAMC,EAAU,mBAAmB,CAAC,CAAC,ECA1EC,EAAkBR,EAAO,EAAGK,EAAKC,EAAMC,EAAU,eAAe,CAAC,CAAC,ECIlEE,EAAaZ,EAAQ,CAACQ,EAAKC,EAAMC,EAAU,UAAU,CAAC,EAAGH,EAAqBI,CAAe,CAAC","x_google_ignoreList":[0,1,2,3,4,5]}