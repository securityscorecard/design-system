{"version":3,"file":"MultiValueInput.stories-1gXQwOYp.js","sources":["../../src/components/forms/MultiValueInput/MultiValueInput.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\nimport { noop } from 'ramda-adjunct';\n\nimport MultiValueInput from './MultiValueInput';\nimport { Label } from '../Label';\nimport { MultiValueInputProps } from './MultiValueInput.types';\nimport { Inline, Stack } from '../../layout';\nimport { Button } from '../../Button';\nimport { Banner } from '../../Banner';\nimport { Heading } from '../../Heading';\nimport { Strong } from '../../Text';\n\nexport default {\n  component: MultiValueInput,\n  title: 'components/forms/MultiValueInput',\n} as Meta;\n\nconst MultiValueInputTemplate: StoryFn<MultiValueInputProps> = (args) => (\n  <MultiValueInput {...args} aria-label=\"MultiValueInput\" />\n);\n\nexport const Playground = MultiValueInputTemplate.bind({});\nPlayground.args = {\n  onValueAdd: action('OnValueAdd'),\n  onValueRemove: action('OnValueRemove'),\n  onValuesChange: action('OnValuesChange'),\n  onInputChange: action('OnInputChange'),\n  valuesDelimiter: ',',\n  onPaste: (e) => {\n    const pastedValue = (e.clipboardData || window.clipboardData).getData(\n      'text',\n    );\n    return pastedValue\n      .split(';')\n      .filter((i) => i !== '3')\n      .join(';');\n  },\n};\n\nexport const Filled = MultiValueInputTemplate.bind({});\nFilled.args = {\n  ...Playground.args,\n  value: ['john@example.com', 'jane@example.com'],\n};\n\nexport const WithPlaceholder = MultiValueInputTemplate.bind({});\nWithPlaceholder.args = {\n  ...Playground.args,\n  placeholder: 'Share with...',\n};\n\nexport const Focus = MultiValueInputTemplate.bind({});\nFocus.args = {\n  ...Playground.args,\n  isFocused: true,\n  className: 'focus-within',\n};\n\nexport const Invalid = MultiValueInputTemplate.bind({});\nInvalid.args = {\n  ...Playground.args,\n  isInvalid: true,\n};\n\nexport const Disabled = MultiValueInputTemplate.bind({});\nDisabled.args = {\n  ...Playground.args,\n  isDisabled: true,\n  value: ['john@example.com', 'jane@example.com'],\n};\n\nexport const NonClearable = MultiValueInputTemplate.bind({});\nNonClearable.args = {\n  ...Playground.args,\n  isClearable: false,\n  value: ['john@example.com', 'jane@example.com'],\n};\nNonClearable.title = 'Non-clearable';\n\nexport const Validation: StoryFn = (args) => {\n  const [isInvalid, setIsInvalid] = useState(true);\n\n  return (\n    <>\n      <Label htmlFor=\"number\">Numbers only</Label>\n      <MultiValueInput\n        {...args}\n        inputId=\"emails\"\n        inputValue=\"abc\"\n        isInvalid={isInvalid}\n        pattern=\"[0-9]+\"\n        value={['12']}\n        onInputChange={(e) => {\n          setIsInvalid(!!e.target.validity.patternMismatch);\n        }}\n      />\n    </>\n  );\n};\n\nexport const PillTruncation: StoryFn<MultiValueInputProps> = (args) => (\n  <Stack gap=\"md\">\n    <Heading size=\"h3\">Default truncation N=16</Heading>\n    <MultiValueInput {...args} />\n    <Heading size=\"h3\">Custom truncation N=25</Heading>\n    <MultiValueInput {...args} maxPillLabelLength={25} />\n    <Heading size=\"h3\">Custom truncation N=5</Heading>\n    <MultiValueInput {...args} maxPillLabelLength={5} />\n  </Stack>\n);\nPillTruncation.args = {\n  ...Playground.args,\n  value: [\n    '123456789012345678901234567890',\n    '12345678901234567890',\n    '1234567890',\n  ],\n};\n\nexport const PillWrapping: StoryFn<MultiValueInputProps> = (args) => (\n  <div style={{ width: '200px' }}>\n    <MultiValueInput {...args} />\n  </div>\n);\nPillWrapping.args = {\n  ...Playground.args,\n  value: ['12345678901234567890', '1234567890'],\n};\n\nexport const ControlledInput: StoryFn<MultiValueInputProps> = (args) => {\n  const [values, setValues] = useState<string[] | undefined>([]);\n\n  return (\n    <Stack gap=\"sm\">\n      <Banner variant=\"warn\" onClose={noop}>\n        Handling duplicated values is <Strong>up to the consumer</Strong> for\n        the controlled input.\n      </Banner>\n      <MultiValueInput\n        {...args}\n        value={values}\n        onValueAdd={(_, v) => {\n          setValues(v);\n          action('valueAdd')(v);\n        }}\n        onValueRemove={(v) => {\n          setValues(v);\n          action('valueRemove')(v);\n        }}\n        onValuesChange={(v) => {\n          setValues(v);\n          action('valuesChange')(v);\n        }}\n      />\n      <Inline gap=\"md\">\n        <Button\n          onClick={() => setValues(['controlledValue1', 'controlledValue2'])}\n        >\n          Add values\n        </Button>\n        <Button onClick={() => setValues([])}>Reset values</Button>\n      </Inline>\n    </Stack>\n  );\n};\n\nControlledInput.parameters = {\n  screenshot: { skip: true },\n};\n"],"names":["title","MultiValueInput_stories","MultiValueInput","onValueAdd","onValueRemove","args","onValuesChange","valuesDelimiter","MultiValueInputTemplate","bind","e","action","split","onInputChange","onPaste","clipboardData","window","getData","value","Playground","i","placeholder","isFocused","className","isInvalid","Disabled","NonClearable","Invalid","Validation","isDisabled","isClearable","setIsInvalid","useState","jsxs","Fragment","jsx","Label","target","validity","patternMismatch","PillTruncation","Stack","Heading","v","screenshot","PillWrapping","width"],"mappings":"m+EAgBEA,MAAOC,GAAA,WACAC,EAETF,wCAIA,EAEEG,EACAC,GAAAA,EAAAA,IAAAA,MAAqBC,EAAC,aAAgB,iBACtCC,CAAAA,EAEAC,EAAoBC,EAAAC,KAAA,EAAA,IACVC,KAAM,CACdP,WAAiBQ,EAAA,YAAmB,EAGpCP,gBACGQ,eACM,EAEXN,eAAAK,EAAA,gBAAA,EACDE,cAAAF,EAAA,eAAA,EAEMJ,gBAAY,IACbO,QAAQJ,IACMA,EAAAK,eAAAC,OAAAD,eAAAE,QAClBC,MACD,EAGcN,MAAA,GAACP,EACXc,UAAeC,IAAA,GAAA,EAClBC,KAAAA,GAAa,CAGf,EAEKF,MAAAA,EAAeX,EAAAC,KAAA,EAAA,EAClBa,EAAAA,KAAe,CACfC,GAAAA,EAAWlB,KACZa,MAAA,CAAA,mBAAA,kBAAA,CAED,EAEKC,MAAAA,EAAeX,EAAAC,KAAA,EAAA,EAClBe,EAAWnB,KAAA,CACZ,GAAAc,EAAAd,KAEMgB,2BACPI,UAEkBjB,EAAAC,KAAA,EAAA,EAChBS,EAAAA,KAA0B,CAC3B,GAAAC,EAAAd,KAEMiB,UAAMI,GACDH,UAAClB,gBAGesB,MAAAA,EAAAnB,EAAoBC,KAAA,EAAA,EAChDkB,EAACtB,KAAA,CACW,GAAAc,EAAMd,KAElBmB,UAAaI,IAKAH,MAAAA,EAAgBjB,EAAoBC,KAAA,EAAA,EACjDgB,EAAsBpB,KAAA,MAQAA,KACdwB,WAAE,GAEVX,MAAO,CAAA,mBAAA,kBAAA,CAEP,EAIaQ,MAAAA,EAAiClB,EAASC,KAAA,EAAA,EACvDiB,EAAKrB,KAAe,CAChB,GAACc,EAAQd,KACTyB,YAAgB,GAChBZ,0BAAwC,kBAAS,CACrD,EACAQ,EACC1B,MAAA,sBAEImB,EAAed,GAAA,CAClBa,MAAOM,EACLO,CAAA,EAAAC,YACA,EAAA,EAKJ,OACiCC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,EAAA,IAAAC,GAAA,CAAA,QAAA,SAAA,SAAA,eAAA,QAC5BlC,EAEJG,CAAAA,GAAAA,EACW,iBACPc,WAAe,MACX,UAAAK,EACR,QAAA,SAEM,aACC,cAAsBQ,GAAAA,CAGzBD,EAAc,CAAA,CAAArB,EAAA2B,OAAAC,SAAAC,eAAA,CAAA,EACN,CAEb,CAAA,CAAA,CAEA,EAKiBC,EAAcnC,GACvB4B,EAAA,KAAAQ,GAAA,CACA,IAAA,wBACW,KAAG,KAAA,SAAA,0BAAA,EACZ9B,EAAAA,IAAAA,EAAO,CAAA,GAAAN,EAAiB,EACzB8B,EAAA,IAAAO,EAAA,CACD,KAAA,KAAiBC,SAAM,yBAAA,WACTtC,GAAAA,EAAA,mBAAA,EAAA,CAAA,EACZM,EAAAA,IAAAA,EAAAA,CAAO,KAAA,KAAA,SAAkB,wBAAA,EAC1BwB,EAAA,IAAAjC,EAAA,CAACG,GAAAA,EAAA,mBAAA,CAAA,CAAA,CAAA,EAEV,EAIAmC,EAAAnC,KAAA,CACA,GAAAc,EAAgBd,KAChBa,MAAS,CACT,iCACI,uBAEH,YAAA,CAGC0B,EAAyB,MAAAC,EAAAxC,GAC1B8B,EAAA,IAAA,MAAA,CAAA,MAAA,CAAAW,MAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}