{"version":3,"file":"TreeView.stories-Cfwep73g.js","sources":["../../../src/components/TreeView/mocks/data.ts","../../../src/components/TreeView/TreeView.stories.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\n\nimport { Grades } from '../../HexGrade';\nimport { TreeViewRow } from '../TreeView.types';\n\ntype Industry = 'Technology' | 'Manufacturing' | 'Information' | 'Non Profit';\nexport type DataSource = {\n  id: string;\n  domain: string;\n  name: string;\n  grade: Grades;\n  industry: Industry;\n};\n\nfaker.seed(42);\n\nconst createItem = (): DataSource => ({\n  id: faker.string.uuid(),\n  domain: faker.internet.domainName(),\n  name: faker.company.name(),\n  grade: faker.helpers.arrayElement<Grades>(['A', 'B', 'C', 'D', 'F']),\n  industry: faker.helpers.arrayElement<Industry>([\n    'Technology',\n    'Manufacturing',\n    'Information',\n    'Non Profit',\n  ] as const),\n});\n\nconst range = (len: number) => {\n  const arr: number[] = [];\n  for (let i = 0; i < len; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nexport function makeData(...lens: number[]) {\n  const makeDataLevel = (depth = 0): DataSource[] => {\n    const len = lens[depth];\n    return range(len).map((): TreeViewRow<DataSource> => {\n      return {\n        ...createItem(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      };\n    });\n  };\n\n  return makeDataLevel();\n}\n","import { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\nimport TreeView from './TreeView';\nimport { Inline, Stack } from '../layout';\nimport { Text } from '../Text';\nimport { HexGrade } from '../HexGrade';\nimport { DataSource, makeData } from './mocks/data';\n\nconst meta = {\n  title: 'components/TreeView',\n  component: TreeView,\n  args: {\n    data: makeData(1, 2, 2),\n    renderPrimaryContent: ({ name }) => <Text isBold>{name}</Text>,\n  },\n} satisfies Meta<typeof TreeView<DataSource>>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof TreeView<DataSource>>;\n\nexport const Playground: Story = {\n  args: {\n    renderPrimaryContent: ({ name, industry }) => (\n      <Stack>\n        <Text isBold>{name}</Text>\n        <Text variant=\"secondary\">{industry}</Text>\n      </Stack>\n    ),\n    renderSecondaryContent: ({ domain, grade }) => (\n      <Inline stretch=\"start\" style={{ width: '30ch' }}>\n        <Text variant=\"secondary\">{domain}</Text>\n        <Inline align=\"center\" gap=\"sm\">\n          <HexGrade grade={grade} size={24} />\n        </Inline>\n      </Inline>\n    ),\n    onDragEnd: action('onDragEnd'),\n    onRowClick: action('onRowClick'),\n    rowActions: [\n      {\n        iconName: 'eye-slash',\n        label: 'Make private',\n        onClick:\n          ({ row }) =>\n          (event) =>\n            action('row action')({ row, event }),\n        isDisabled: ({ row }) => row.grade === 'D',\n      },\n      {\n        iconName: 'times',\n        label: 'Archive item',\n        onClick:\n          ({ row }) =>\n          (event) =>\n            action('row action')({ row, event }),\n      },\n      null,\n      {\n        iconName: 'ban',\n        label: 'Remove',\n        isDestructive: true,\n        onClick:\n          ({ row }) =>\n          (event) =>\n            action('row action')({ row, event }),\n      },\n    ],\n  },\n  render: function Render(args) {\n    const [activeRow, setActiveRow] = useState('');\n\n    return (\n      <TreeView\n        activeRowId={activeRow}\n        onActiveRowIdChange={setActiveRow}\n        {...args}\n      />\n    );\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\nexport const ContentRenderers: Story = {\n  args: {\n    renderPrimaryContent: Playground.args?.renderPrimaryContent,\n    renderSecondaryContent: Playground.args?.renderSecondaryContent,\n  },\n};\n\nexport const DisabledSorting: Story = {\n  args: {\n    isSortable: false,\n  },\n};\n\nexport const DisabledCollapsing: Story = {\n  args: {\n    isCollapsible: false,\n  },\n};\n\nexport const DisabledSortingAndCollapsing: Story = {\n  args: {\n    isSortable: false,\n    isCollapsible: false,\n  },\n};\n\nexport const RowActionsMenu: Story = {\n  args: {\n    rowActions: Playground.args?.rowActions,\n  },\n};\n\nexport const TwoRowActions: Story = {\n  args: {\n    rowActions: [\n      {\n        iconName: 'eye-slash',\n        label: 'Make private',\n        onClick:\n          ({ row }) =>\n          (event) =>\n            action('row action')({ row, event }),\n        isDisabled: ({ row }) => row.grade === 'D',\n      },\n      {\n        iconName: 'times',\n        label: 'Remove',\n        isDestructive: true,\n        onClick:\n          ({ row }) =>\n          (event) =>\n            action('row action')({ row, event }),\n      },\n    ],\n  },\n};\nexport const RowOnClickEnabled: Story = {\n  args: {\n    onRowClick: action('onRowClick'),\n  },\n  render: function Render(args) {\n    const [activeRow, setActiveRow] = useState('');\n\n    return (\n      <TreeView\n        activeRowId={activeRow}\n        onActiveRowIdChange={setActiveRow}\n        {...args}\n      />\n    );\n  },\n};\n\nexport const CustomRowHeight: Story = {\n  args: {\n    ...ContentRenderers.args,\n    rowHeight: 100,\n  },\n};\n"],"names":["cov_1a0luhoncj","s","faker","arr","createItem","f","makeDataLevel","len","lens","domainName","name","map","grade","helpers","arrayElement","industry","subRows","component","TreeView","args","renderPrimaryContent","jsx","Text","Playground","Stack","renderSecondaryContent","jsxs","Inline","width","domain","HexGrade","onDragEnd","action","onRowClick","rowActions","iconName","label","onClick","row","event","isDisabled","isDestructive","activeRow","setActiveRow","useState","render","parameters","skip","screenshot","DisabledSorting","isSortable","DisabledCollapsing","isCollapsible","DisabledSortingAndCollapsing","RowActionsMenu","TwoRowActions","RowOnClickEnabled","CustomRowHeight","Story","rowHeight"],"mappings":"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"}