{"version":3,"file":"closeHandlingDrawer-fB78qB5A.js","sources":["../../../docs/guides/closeHandlingDrawer.mdx"],"sourcesContent":["import { Meta } from '@storybook/blocks';\n\n<Meta title=\"Guides/Close handling for Drawer\" />\n\n# Closing Drawer behaviour\n\nEven though the close handling for a [Drawer](?path=/docs/components-drawer--playground) might be implemented as a simple state change,\nsometimes it might be necessary to prevent the [Drawer](?path=/docs/components-drawer--playground) be closed until some action is finished.\n(e.g. uploading a file or saving a form).\n\n## Example 1\n\nHere is an example of how we usually handle the closing functionality:\n\n```jsx\nexport const Component = (args) => {\n  const [isShown, setIsShown] = useState(false);\n\n  return (\n        {isShown && (\n          <Drawer\n            footer={<Footer />}\n            title=\"Title\"\n            onClose={() => setIsShown(false)}\n            {...args}\n          >\n            <Content />\n          </Drawer>\n        )}\n  );\n};\n```\n\n## Example 2\n\nAnd here is an example of how to prevent a [Drawer](?path=/docs/components-drawer--playground) to be closed when there is an action running and you'll need to wait until it ends:\n\n```jsx\nexport const Component = () => {\n  // state used for handling the show/hide Drawer\n  const [isShown, setIsShown] = useState(false);\n\n  // state used for enforce user to not close before the action completes\n  const [showForceCancel, setShowForceCancel] = useState(false);\n\n  // replace this condition with your custom condition to wait for something\n  const waitingForSomething = true;\n\n  // onClick handler when user attempts to close the Drawer\n  const handleClose = useCallback(() => {\n    if (waitingForSomething) {\n      // if the action is still running warn user\n      setShowForceCancel(true);\n    } else {\n      // if not close safely\n      setIsShown(false);\n    }\n  }, [waitingForSomething, setIsShown]);\n\n  return (\n      {isShown && (\n        <Drawer\n          footer={\n            showForceCancel ? (\n              <Stack gap=\"md\">\n                <Text size=\"md\">\n                  Your action is still in progress. You can continue waiting for\n                  the upload to complete or click cancel upload and leave this\n                  page.\n                </Text>\n                <Inline gap=\"md\">\n                  <Button isExpanded onClick={() => setShowForceCancel(false)}>\n                    Wait for the action to complete\n                  </Button>\n                  <Button\n                    color=\"danger\"\n                    isExpanded\n                    onClick={() => {\n                      setIsShown(false);\n                    }}\n                  >\n                    Cancel action before it completes\n                  </Button>\n                </Inline>\n              </Stack>\n            ) : (\n              <Stack justify=\"flex-end\">\n                <Inline gap=\"md\">\n                  <Button onClick={handleClose}>Cancel</Button>\n                  <Button\n                    isLoading={waitingForSomething}\n                    onClick={() => {\n                      // implement your action\n                      setIsShown(false);\n                    }}\n                  >\n                    Your action\n                  </Button>\n                </Inline>\n              </Stack>\n            )\n          }\n          onClose={handleClose}\n        >\n          Your Drawer content here\n        </Drawer>\n      )}\n  );\n};\n```\n\n## Example 3\n\nHere is another example of how to prevent a [Drawer](?path=/docs/components-drawer--playground) to be closed when there is an action running and you'll need to wait until it ends:\n\n```jsx\nexport const Component = () => {\n  // state used for handling the show/hide Drawer\n  const [isShown, setIsShown] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [displayWarning, setDisplayWarning] = useState(false);\n  // onClick handler when user attempts to close the Drawer\n  let click = 0;\n  const handleClose = () => {\n    // on first\n    if (click === 0 && isProcessing) {\n        setDisplayWarning(true);\n        click ++;\n        return;\n    } else {\n        setIsShown(false);\n    }\n  };\n\n  return (\n      {isShown && (\n        <Drawer\n          footer={\n              <Stack justify=\"flex-end\">\n                <Inline gap=\"md\">\n                  // show warning if process is in progress\n                  {setDisplayWarning && <Paragraph>Saving changes is in progress</Paragraph>}\n                  <Button onClick={handleClose}>Cancel</Button>\n                  <Button\n                    isLoading={isProcessing}\n                    onClick={() => {\n                      // implement your action\n                      setIsShown(false);\n                    }}\n                  >\n                    Your action\n                  </Button>\n                </Inline>\n              </Stack>\n          }\n          onClose={handleClose}\n        >\n          Your Drawer content here\n        </Drawer>\n      )}\n  );\n};\n```\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","MDXContent","MDXLayout"],"mappings":"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"}