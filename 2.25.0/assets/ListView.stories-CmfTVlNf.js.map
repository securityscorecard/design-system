{"version":3,"file":"ListView.stories-CmfTVlNf.js","sources":["../../../src/components/ListView/ListView.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from '@storybook/react';\nimport { faker } from '@faker-js/faker';\nimport { action } from '@storybook/addon-actions';\nimport { useEffect, useState } from 'react';\n\nimport ListView from './ListView';\nimport { Inline } from '../layout';\nimport { Text } from '../Text';\nimport Button from '../ButtonV2/Button';\n\ntype FakeData = {\n  id: string;\n  name: string;\n  email: string;\n};\n\nfaker.seed(42);\nconst generateData = (): FakeData[] => {\n  const data = [];\n\n  for (let i = 0; i < 50; i += 1) {\n    const firstName = faker.person.firstName();\n    const lastName = faker.person.lastName();\n\n    data.push({\n      id: faker.string.uuid(),\n      name: `${firstName} ${lastName}`,\n      email: faker.internet.email({\n        firstName: firstName.toLowerCase(),\n        lastName: lastName.toLowerCase(),\n        allowSpecialCharacters: false,\n      }),\n    });\n  }\n\n  return data;\n};\nconst fakeData = generateData();\n\n/**\n * ```jsx\n * import { ListView } from '@securityscorecard/design-system';\n *\n * <ListView data={[...]} renderListViewRow={({row}) => (...)} />\n * ```\n */\nconst meta = {\n  component: ListView,\n  argTypes: {\n    data: {\n      control: { disable: true },\n    },\n  },\n  args: {\n    data: fakeData,\n    renderListViewRow: ({ row }) => {\n      return (\n        <Inline align=\"baseline\" data-id={row.id} gap=\"sm\">\n          <Text size=\"lg\">{row.name}</Text>\n          <Text variant=\"subtle\">{row.email}</Text>\n        </Inline>\n      );\n    },\n    getRowId: (row) => row.id,\n  },\n  tags: ['new'],\n} satisfies Meta<typeof ListView<FakeData>>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof ListView<FakeData>>;\n\nexport const Playground: Story = {\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\n/* --- PAGINATION --- */\nexport const PaginationEnabled: Story = {\n  args: { enablePagination: true },\n};\nexport const DisabledPagination: Story = {\n  args: { enablePagination: false },\n};\nexport const EnabledRowsPerPage: Story = {\n  args: { ...PaginationEnabled.args, enableRowsPerPage: true },\n};\nexport const CustomRowsPerPageOptions: Story = {\n  args: { ...EnabledRowsPerPage.args, rowsPerPageOptions: [5, 10, 15] },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\nexport const InitialPagination: Story = {\n  args: {\n    ...PaginationEnabled.args,\n    initialState: {\n      pagination: { pageSize: 10, pageIndex: 1 },\n    },\n  },\n};\n\n/* --- SELECTION --- */\nexport const SelectionEnabled: Story = {\n  args: { enableRowSelection: true },\n};\nexport const DisabledSelection: Story = {\n  args: { enableRowSelection: false },\n};\nexport const SingleRowSelection: Story = {\n  args: { ...SelectionEnabled.args, enableMultiRowSelection: false },\n};\nexport const ConditionallyEnabledSelection: Story = {\n  args: {\n    enableRowSelection: (row) => row.original.email.endsWith('@hotmail.com'),\n  },\n};\nexport const InitialSelection: Story = {\n  args: {\n    ...SelectionEnabled.args,\n    initialState: {\n      rowSelection: {\n        '6204f537-1c93-468f-9970-d9a2710fff9c': true,\n        'a197d02e-642a-4c46-a838-920fdc7f6ee9': true,\n        'f5d6b48d-95f4-4984-824c-210f6c63400d': true,\n      },\n    },\n  },\n};\nexport const RowSelectionActions: Story = {\n  args: {\n    ...InitialSelection.args,\n    renderRowSelectionActions: ({ selectedRows, table }) => {\n      return (\n        <Button\n          iconStart={{ name: 'plus' }}\n          variant=\"subtle\"\n          onClick={() => {\n            action('selectedRows')(selectedRows);\n            table.toggleAllRowsSelected(true);\n          }}\n        >\n          Select all\n        </Button>\n      );\n    },\n  },\n};\n\n/* --- ROW ACTIONS --- */\nexport const RowActionsEnabled: Story = {\n  args: {\n    rowActions: [\n      {\n        iconName: 'ban',\n        label: 'Remove',\n        onClick:\n          ({ row, table }) =>\n          (event) =>\n            action('row action')({ row, table, event }),\n      },\n    ],\n  },\n};\nexport const MultipleRowActions: Story = {\n  args: {\n    rowActions: [\n      {\n        iconName: 'eye-slash',\n        label: 'Make private',\n        onClick:\n          ({ row, table }) =>\n          (event) =>\n            action('row action')({ row, table, event }),\n      },\n      {\n        iconName: 'times',\n        label: 'Archive item',\n        onClick:\n          ({ row, table }) =>\n          (event) =>\n            action('row action')({ row, table, event }),\n      },\n      null,\n      {\n        iconName: 'ban',\n        label: 'Remove',\n        isDestructive: true,\n        onClick:\n          ({ row, table }) =>\n          (event) =>\n            action('row action')({ row, table, event }),\n      },\n    ],\n  },\n};\nexport const ConditionallyDisabledRowAction: Story = {\n  args: {\n    rowActions: [\n      {\n        iconName: 'ban',\n        label: 'Remove',\n        onClick:\n          ({ row, table }) =>\n          (event) =>\n            action('row action')({ row, table, event }),\n        isDisabled: ({ row }) => row.original.email.endsWith('@hotmail.com'),\n      },\n    ],\n  },\n};\n\n/* --- ROW ONCLICK --- */\nexport const RowOnClickEnabled: Story = {\n  args: {\n    onRowClick: action('onRowClick'),\n  },\n};\nexport const InitialActiveRow: Story = {\n  args: {\n    ...RowOnClickEnabled.args,\n    initialState: {\n      activeRowId: '6204f537-1c93-468f-9970-d9a2710fff9c',\n    },\n  },\n};\n\n/* --- LOADING --- */\nexport const Loading: Story = {\n  args: {\n    enableRowSelection: true,\n    state: {\n      isLoading: true,\n    },\n  },\n};\n\n/* --- MANAGED STATE --- */\ntype Result = { entries: FakeData[]; rowCount: number };\nconst fetchData = (pageIndex: number, pageSize: number): Promise<Result> =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        entries: fakeData.slice(\n          pageIndex * pageSize,\n          (pageIndex + 1) * pageSize,\n        ),\n        rowCount: fakeData.length,\n      });\n    }, 1500);\n  });\n\nexport const ManagedState: Story = {\n  render: function Render(args) {\n    const [activeRowId, setActiveRowId] = useState('');\n    const [pagination, setPagination] = useState({\n      pageSize: 10,\n      pageIndex: 0,\n    });\n    const [rowSelection, setRowSelection] = useState({});\n    const [isLoading, setIsLoading] = useState(false);\n    const [data, setData] = useState<Result | null>(null);\n\n    useEffect(() => {\n      setIsLoading(true);\n      fetchData(pagination.pageIndex, pagination.pageSize).then((result) => {\n        setData(result);\n        setIsLoading(false);\n      });\n    }, [pagination.pageIndex, pagination.pageSize]);\n\n    return (\n      <>\n        <ListView\n          {...args}\n          data={data?.entries ?? []}\n          rowCount={data?.rowCount}\n          state={{\n            activeRowId,\n            pagination,\n            rowSelection,\n            isLoading,\n          }}\n          manualPagination\n          onActiveRowIdChange={setActiveRowId}\n          onPaginationChange={setPagination}\n          onRowSelectionChange={setRowSelection}\n        />\n        <div>\n          <strong>Debug:</strong>\n          <pre>\n            {JSON.stringify(\n              {\n                activeRowId,\n                pagination,\n                rowSelection,\n                isLoading,\n              },\n              null,\n              2,\n            )}\n          </pre>\n        </div>\n      </>\n    );\n  },\n  args: {\n    onRowClick: action('onRowClick'),\n    enableRowSelection: true,\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n"],"names":["faker","seed","i","firstName","lastName","id","uuid","email","person","allowSpecialCharacters","name","internet","toLowerCase","data","fakeData","generateData","meta","component","ListView","argTypes","args","disable","renderListViewRow","row","jsxs","Inline","jsx","Text","getRowId","Story","tags","Playground","parameters","screenshot","PaginationEnabled","enablePagination","DisabledPagination","EnabledRowsPerPage","enableRowsPerPage","CustomRowsPerPageOptions","rowsPerPageOptions","skip","InitialPagination","pagination","pageSize","pageIndex","initialState","enableRowSelection","SingleRowSelection","SelectionEnabled","enableMultiRowSelection","ConditionallyEnabledSelection","original","endsWith","InitialSelection","DisabledSelection","rowSelection","renderRowSelectionActions","selectedRows","table","action","toggleAllRowsSelected","RowActionsEnabled","rowActions","label","event","iconName","onClick","isDisabled","isDestructive","RowOnClickEnabled","InitialActiveRow","ConditionallyDisabledRowAction","activeRowId","fetchData","setTimeout","entries","slice","ManagedState","render","setActiveRowId","useState","Loading","setRowSelection","isLoading","setIsLoading","setData","useEffect","result","rowCount","resolve","length","setPagination","docs","source","originalSource","RowSelectionActions","MultipleRowActions"],"mappings":"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"}