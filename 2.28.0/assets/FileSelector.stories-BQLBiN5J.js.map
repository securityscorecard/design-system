{"version":3,"file":"FileSelector.stories-BQLBiN5J.js","sources":["../../../src/components/FileSelector/FileSelector.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { isNonEmptyArray } from 'ramda-adjunct';\n\nimport FileSelector from './FileSelector';\nimport { Inline, Padbox, Stack, Surface } from '../layout';\nimport { TextVariants } from '../Text/Text.enums';\nimport { Text } from '../Text';\n\n/**\n * ```jsx\n * import { FileSelector } from '@securityscorecard/design-system';\n * ```\n */\n\nconst meta = {\n  component: FileSelector,\n  argTypes: {\n    size: {\n      control: 'select',\n      options: ['fill', 'comapct', 'area'],\n      description: 'Size variant of the FileSelector',\n      table: {\n        type: {\n          summary: \"'fill' | 'comapct' | 'area'\",\n        },\n      },\n    },\n    hasError: {\n      control: 'boolean',\n      description: 'Sets file selector into errorous state',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    isDisabled: {\n      control: 'boolean',\n      description: 'Disables the FileSelector',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    instructionsText: {\n      description:\n        'Text with file requirements. Availabel for `fill` and `area` sizes.',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n    },\n    multiple: {\n      control: 'boolean',\n      description: 'Allows to select multiple files',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    accept: {\n      control: 'object',\n      description:\n        \"Accepted file types, in form of object where keys are file mime types and value is a array with supported file extensions. If an empty array is provided as a value all extensions are accepted.Examples: `{ 'image/png': [ '.png' ] }` will accept only PNG images, `{ 'image/*': [] }` will accept any image with any extension.\",\n      table: {\n        type: {\n          summary: 'Record<string, Array<string>>',\n        },\n      },\n    },\n    maxFiles: {\n      control: 'number',\n      description: 'The maximum number of dropped files',\n      table: {\n        type: {\n          summary: 'number',\n        },\n      },\n    },\n    onFilesDrop: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary:\n            '<T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFilesAccepted: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary: '<T extends File>(files: T[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFilesRejected: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary:\n            '(fileRejections: FileRejection[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFileDialogCancel: {\n      control: { disable: true },\n      description:\n        'Callback fired when file dialog is closed with no selection',\n      table: {\n        type: {\n          summary: '() => void',\n        },\n      },\n    },\n    onFileDialogOpen: {\n      control: { disable: true },\n      description: 'Callback fired when dialog is opened',\n      table: {\n        type: {\n          summary: '() => void',\n        },\n      },\n    },\n    validator: {\n      control: { disable: true },\n      description:\n        'Custom validation function. It must return null if there are no errors.',\n      table: {\n        type: {\n          summary:\n            '<T extends File>(file: T) => FileError | readonly FileError[] | null',\n        },\n      },\n    },\n    width: {\n      control: 'number',\n      description:\n        'Width of the droping zone, takes Number in pixels or any other valid value as String. Available only for `area` size.',\n      table: {\n        type: {\n          summary: 'number | string',\n        },\n      },\n    },\n    height: {\n      control: 'number',\n      description:\n        'Height of the droping zone, takes Number in pixels or any other valid value as String. Available only for `area` size.',\n      table: {\n        type: {\n          summary: 'number | string',\n        },\n      },\n    },\n  },\n  args: {\n    instructionsText: 'Pass instructions for uploaded files here',\n    accept: {\n      'image/*': [],\n    },\n  },\n} satisfies Meta<typeof FileSelector>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Playground: Story = {\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\nexport const Sizes: Story = {\n  render: (args) => (\n    <Stack gap=\"4x\">\n      <FileSelector size=\"compact\" {...args} />\n      <FileSelector size=\"fill\" {...args} />\n      <FileSelector height={300} size=\"area\" width={400} {...args} />\n    </Stack>\n  ),\n};\n\nexport const WithError: Story = {\n  render: Sizes.render,\n  args: { hasError: true },\n};\nexport const Disabled: Story = {\n  render: Sizes.render,\n  args: { isDisabled: true },\n};\nexport const DarkMode: Story = {\n  render: Sizes.render,\n  parameters: {\n    themes: {\n      themeOverride: 'Dark',\n    },\n  },\n};\n\n/* Example */\nconst File = ({ file, errors = [] }) => (\n  <Surface\n    style={{\n      borderColor: isNonEmptyArray(errors)\n        ? 'var(--sscds-color-border-input-error)'\n        : undefined,\n    }}\n    hasBorder\n  >\n    <Padbox paddingSize=\"2x\">\n      <Inline gap=\"2x\" justify=\"space-between\">\n        <Text isBold>{file.name}</Text>\n        <Text>{Math.floor(file.size / 1024)} kB</Text>\n      </Inline>\n      <Stack>\n        {errors.map((error) => (\n          <Text key={error.code} size=\"sm\" variant={TextVariants.danger}>\n            {error.message}\n          </Text>\n        ))}\n      </Stack>\n    </Padbox>\n  </Surface>\n);\n\nexport const Example: Story = {\n  render: function Render(args) {\n    const [errors, setErrors] = useState([]);\n    const [files, setFiles] = useState([]);\n    const handleOnDrop = (acceptedFiles, rejectedFiles) => {\n      setErrors((prev) => [...prev, ...rejectedFiles]);\n      setFiles((prev) => [...prev, ...acceptedFiles]);\n    };\n\n    return (\n      <Stack gap=\"4x\">\n        <FileSelector\n          hasError={isNonEmptyArray(errors)}\n          onFilesDrop={handleOnDrop}\n          {...args}\n        />\n        {files.map((file) => (\n          <File key={`${file.name}-accepted`} file={file} />\n        ))}\n        {errors.map((error) => (\n          <File\n            key={`${error.file.name}-rejected`}\n            errors={error.errors}\n            file={error.file}\n          />\n        ))}\n      </Stack>\n    );\n  },\n  args: {\n    accept: {\n      'image/png': ['.png'],\n    },\n    instructionsText:\n      '.png only, file size between 100kB and 400kB, up to 2 files',\n    maxFiles: 2,\n    maxFileSize: 400 * 1024,\n    minFileSize: 100 * 1024,\n    multiple: true,\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n"],"names":["component","FileSelector","argTypes","size","control","options","description","table","type","summary","hasError","isDisabled","instructionsText","multiple","accept","maxFiles","onFilesDrop","disable","onFilesAccepted","onFilesRejected","onFileDialogCancel","onFileDialogOpen","validator","width","height","args","parameters","docs","Playground","screenshot","skip","Sizes","render","jsxs","Stack","jsx","WithError","Disabled","DarkMode","themes","themeOverride","File","file","errors","isNonEmptyArray","borderColor","Padbox","Inline","Math","Text","name","floor","map","error","TextVariants","danger","message","code","Example","setErrors","useState","handleOnDrop","acceptedFiles","prev","rejectedFiles","setFiles"],"mappings":"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"}