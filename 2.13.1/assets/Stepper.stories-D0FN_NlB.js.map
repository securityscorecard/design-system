{"version":3,"file":"Stepper.stories-D0FN_NlB.js","sources":["../../../src/components/Stepper/Stepper.stories.tsx"],"sourcesContent":["import { Meta, StoryFn } from '@storybook/react';\nimport { useEffect, useState } from 'react';\nimport { action } from '@storybook/addon-actions';\n\nimport { generateControl } from '../../utils/tests/storybook';\nimport { Button } from '../Button';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { StepperProps } from './Stepper.types';\nimport Stepper from './Stepper';\nimport Step from './Step';\nimport { StepperOrientations } from './Stepper.enums';\nimport { H2 } from '../Heading';\nimport { Paragraph } from '../Paragraph';\n\nexport default {\n  title: 'components/Stepper',\n  component: Stepper,\n  subcomponents: { Step },\n  parameters: {\n    docs: {\n      description: {\n        component: `\n\\`\\`\\`js\nimport { Stepper, Step } from '@securityscorecard/design-system';\n\\`\\`\\`\n      `,\n      },\n    },\n    screenshot: {\n      viewport: {\n        width: 1820,\n        height: 720,\n      },\n    },\n  },\n  argTypes: {\n    orientation: {\n      ...generateControl('select', StepperOrientations),\n    },\n  },\n  decorators: [(storyFn) => <Padbox>{storyFn()}</Padbox>],\n} as Meta;\n\nconst steps = [\n  {\n    label: 'Shopping Cart',\n    summary: 'Review your shopping cart',\n  },\n  {\n    label: 'Transport',\n    summary: 'Choose a transportation type',\n  },\n  {\n    label: 'Payment',\n    summary: 'Choose a payment type',\n  },\n  {\n    label: 'Recapitulation',\n  },\n  {\n    label: 'Confirmation',\n  },\n];\n\ntype Story = StoryFn<StepperProps>;\n\nexport const Playground: Story = (args) => (\n  <Stepper {...args}>\n    {steps.map(({ label, summary }) => (\n      <Step\n        key={label}\n        label={label}\n        summary={summary}\n        onStepClick={action('onStepClick')}\n      />\n    ))}\n  </Stepper>\n);\nPlayground.args = {\n  activeStep: 0,\n};\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\n\nexport const StepTypes: Story = (args) => (\n  <Stepper {...args}>\n    {[\n      { label: 'Done step' },\n      { label: 'Active step' },\n      { label: 'Pending step' },\n    ].map(({ label }) => (\n      <Step key={label} label={label} />\n    ))}\n  </Stepper>\n);\nStepTypes.args = {\n  activeStep: 1,\n};\n\nexport const WithHiddenLabels = StepTypes.bind({});\nWithHiddenLabels.args = StepTypes.args;\nWithHiddenLabels.decorators = [\n  (storyFn) => <div style={{ width: '550px' }}>{storyFn()}</div>,\n];\n\nexport const Vertical: Story = (args) => (\n  <Stepper {...args}>\n    {[\n      { label: 'Done step', summary: 'Done step summary' },\n      { label: 'Active step', summary: 'Active step summary' },\n      { label: 'Pending step', summary: 'Pending step summary' },\n    ].map(({ label, summary }) => (\n      <Step key={label} label={label} summary={summary}>\n        {label} content\n      </Step>\n    ))}\n  </Stepper>\n);\nVertical.args = {\n  ...StepTypes.args,\n  orientation: StepperOrientations.vertical,\n};\n\nexport const VerticalWithExpandedSteps: Story = (args) => (\n  <Stepper {...args}>\n    {[\n      { label: 'Done step', summary: 'Done step summary' },\n      { label: 'Active step', summary: 'Active step summary' },\n      { label: 'Pending step', summary: 'Pending step summary' },\n    ].map(({ label, summary }) => (\n      <Step key={label} label={label} summary={summary}>\n        {label} content\n      </Step>\n    ))}\n  </Stepper>\n);\nVerticalWithExpandedSteps.args = {\n  ...StepTypes.args,\n  orientation: StepperOrientations.vertical,\n  areStepsExpanded: true,\n};\n\nexport const VerticalExample: Story = ({ activeStep: propsActiveStep }) => {\n  const [activeStep, setActiveStep] = useState(0);\n\n  useEffect(() => {\n    setActiveStep(propsActiveStep ?? 0);\n  }, [propsActiveStep]);\n\n  return (\n    <Stack gap=\"lg\">\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map(({ label, summary }, index) => (\n          <Step\n            key={label}\n            label={label}\n            summary={summary}\n            onStepClick={(step) => {\n              setActiveStep(step ?? 0);\n            }}\n          >\n            <Stack gap=\"md\">\n              <Stack gap=\"sm\">\n                <Paragraph>\n                  Content of step {index + 1} - {label}\n                </Paragraph>\n              </Stack>\n              <Inline gap=\"md\">\n                <Button\n                  variant=\"solid\"\n                  onClick={() => setActiveStep((prev) => prev + 1)}\n                >\n                  {index + 1 === steps.length ? 'Finish' : 'Continue'}\n                </Button>\n                <Button\n                  disabled={index === 0}\n                  variant=\"text\"\n                  onClick={() => setActiveStep((prev) => prev - 1)}\n                >\n                  Back\n                </Button>\n              </Inline>\n            </Stack>\n          </Step>\n        ))}\n      </Stepper>\n      {activeStep === steps.length && (\n        <Stack gap=\"xl\">\n          <H2>All steps has been completed</H2>\n          <Inline gap=\"md\" justify=\"space-between\">\n            <Button variant=\"outline\" onClick={() => setActiveStep(0)}>\n              Reset\n            </Button>\n          </Inline>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\nVerticalExample.args = { activeStep: 0, areStepsExpanded: true };\nVerticalExample.parameters = {\n  screenshot: { skip: true },\n};\n\nexport const HorizontalExample: Story = ({ activeStep: propsActiveStep }) => {\n  const [activeStep, setActiveStep] = useState(0);\n\n  useEffect(() => {\n    setActiveStep(propsActiveStep ?? 0);\n  }, [propsActiveStep]);\n\n  return (\n    <Stack gap=\"lg\">\n      <Stepper activeStep={activeStep}>\n        {steps.map(({ label, summary }) => (\n          <Step\n            key={label}\n            label={label}\n            summary={summary}\n            onStepClick={(step) => {\n              setActiveStep(step ?? 0);\n            }}\n          />\n        ))}\n      </Stepper>\n      {activeStep === steps.length ? (\n        <Stack gap=\"xl\">\n          <H2>All steps has been completed</H2>\n          <Inline gap=\"md\" justify=\"space-between\">\n            <Button variant=\"outline\" onClick={() => setActiveStep(0)}>\n              Reset\n            </Button>\n          </Inline>\n        </Stack>\n      ) : (\n        <Stack gap=\"xl\">\n          <Stack gap=\"md\">\n            <H2>{steps[activeStep].label}</H2>\n            <Paragraph>\n              Content of step {activeStep} - {steps[activeStep].label}\n            </Paragraph>\n          </Stack>\n          <Inline gap=\"md\" justify=\"space-between\">\n            <Button\n              disabled={activeStep === 0}\n              variant=\"outline\"\n              onClick={() => setActiveStep((prev) => prev - 1)}\n            >\n              Previous\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => setActiveStep((prev) => prev + 1)}\n            >\n              {activeStep + 1 === steps.length ? 'Finish' : 'Next'}\n            </Button>\n          </Inline>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\nHorizontalExample.args = { activeStep: 0 };\nHorizontalExample.parameters = {\n  screenshot: { skip: true },\n};\n"],"names":["component","Stepper_stories","subcomponents","Step","parameters","docs","description","screenshot","viewport","width","height","argTypes","orientation","generateControl","StepperOrientations","decorators","storyFn","Padbox","label","summary","Playground","args","skip","map","jsx","StepTypes","action","activeStep","WithHiddenLabels","Vertical","bind","Stepper","vertical","VerticalWithExpandedSteps","Story","areStepsExpanded","useEffect","setActiveStep","VerticalExample","propsActiveStep","jsxs","Stack","steps","index","step","Paragraph","Inline","Button","prev","length","HorizontalExample","useState","H2"],"mappings":"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"}