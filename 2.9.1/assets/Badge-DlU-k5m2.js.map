{"version":3,"file":"Badge-DlU-k5m2.js","sources":["../../../src/components/Badge/Badge.tsx"],"sourcesContent":["import { type ReactNode } from 'react';\nimport styled from 'styled-components';\n\ntype DotBadgeProps = {\n  variant: 'dot';\n  /** Controls visibility of Badge in `dot` variant. */\n  isVisible: boolean;\n};\n\ntype StandardBadgeProps = {\n  /**\n   * Badge visual variant. If set to `standard` the `count` property is required.\n   * If set to `dot` the `isVisible` property is required.\n   */\n  variant?: 'standard';\n  /** Set the badge count in the `standard` variant */\n  count: number;\n  /**\n   * Set the position offset to fix potentional issues where the badge doesn't fit to base position.\n   * The value will be set to transform-translate CSS property.\n   */\n  positionOffset?: string;\n};\n\nexport type BadgeProps = (DotBadgeProps | StandardBadgeProps) & {\n  children: ReactNode;\n};\n\nconst BadgeRoot = styled.span`\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle;\n`;\n\nconst BadgeDot = styled.span`\n  display: block;\n  width: 0.5rem;\n  height: 0.5rem;\n  background-color: var(--sscds-color-danger-500);\n  border-radius: var(--sscds-radii-circle);\n\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(30%, -30%);\n`;\nconst BadgeCount = styled.span`\n  display: grid;\n  place-content: center;\n  min-width: 1rem;\n  height: 1rem;\n  background-color: var(--sscds-color-danger-600);\n  border-radius: var(--sscds-radii-rounded);\n\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: var(--sscds-badge-translate);\n\n  padding-inline: var(--sscds-space-1x);\n\n  color: var(--sscds-color-text-inverse);\n  font-size: var(--sscds-font-size-body-sm);\n  font-weight: var(--sscds-font-weight-body-strong);\n  line-height: 1;\n`;\n\nconst normalizeCount = (count: number) => {\n  if (count >= 100) {\n    return '99+';\n  }\n  return count;\n};\n\n/* eslint-disable react/destructuring-assignment */\n/**\n * Discriminated unions doesn't work on destructured props. We need to disable the rule to make\n * TypeScript correctly narrow type based on the `variant` property.\n */\nfunction Badge(props: BadgeProps) {\n  if (props.variant === 'dot') {\n    return (\n      <BadgeRoot>\n        {props.children}\n        {props.isVisible && <BadgeDot />}\n      </BadgeRoot>\n    );\n  }\n\n  return (\n    <BadgeRoot>\n      {props.children}\n      {props.count > 0 && (\n        <BadgeCount\n          style={{\n            '--sscds-badge-translate': `translate(${\n              props.positionOffset ?? '50%, -50%'\n            })`,\n          }}\n        >\n          {normalizeCount(props.count)}\n        </BadgeCount>\n      )}\n    </BadgeRoot>\n  );\n}\n/* eslint-enable react/destructuring-assignment */\n\nBadge.displayName = 'Badge';\n\nexport default Badge;\n"],"names":["props","Badge"],"mappings":"ukGA2FOA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,KAAAA,WAAAA,CAAAA,YAAAA,mBAAAA,YAiBPC,aAAAA,CAAAA,EAAAA,CAAAA,8DAAAA,CAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,KAAAA,WAAAA,CAAAA,YAAAA,kBAAAA,YAAAA,aAAAA,CAAAA,EAAAA,CAAAA,gMAAAA,CAAAA;"}