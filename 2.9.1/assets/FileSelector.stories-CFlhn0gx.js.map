{"version":3,"file":"FileSelector.stories-CFlhn0gx.js","sources":["../../src/components/FileSelector/FileSelector.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { isNonEmptyArray } from 'ramda-adjunct';\nimport styled from 'styled-components';\n\nimport FileSelector from './FileSelector';\nimport { FileSelectorProps } from './FileSelector.types';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { TextSizes, TextVariants } from '../Text/Text.enums';\nimport { Text } from '../Text';\nimport { getColor, getRadii } from '../../utils';\n\nexport default {\n  title: 'components/FileSelector',\n  component: FileSelector,\n  argTypes: {\n    accept: {\n      description:\n        'Accepted file mime types (https://www.iana.org/assignments/media-types/media-types.xhtml)',\n    },\n    maxFiles: {\n      description: 'The maximum number of dropped files',\n    },\n    onFileDialogCancel: {\n      description: 'Callback fired when file dialog is canceled',\n    },\n    onFileDialogOpen: {\n      description: 'Callback fired when dialog is opened',\n    },\n    validator: {\n      description:\n        'Custom validation function. It must return null if there are no errors.',\n    },\n  },\n} as Meta;\n\nconst FileSelectorTemplate: StoryFn<FileSelectorProps> = (args) => (\n  <FileSelector {...args} />\n);\n\nexport const Playground = FileSelectorTemplate.bind({});\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\n\n/* Sizes */\nexport const FillSize = FileSelectorTemplate.bind({});\nFillSize.args = {\n  size: 'fill',\n};\nexport const CompactSize = FileSelectorTemplate.bind({});\nCompactSize.args = {\n  size: 'compact',\n};\nexport const AreaSize = FileSelectorTemplate.bind({});\nAreaSize.args = {\n  size: 'area',\n  width: 400,\n  height: 300,\n};\n\n/* States */\nexport const WithError = FileSelectorTemplate.bind({});\nWithError.args = { hasError: true };\nexport const Disabled = FileSelectorTemplate.bind({});\nDisabled.args = { isDisabled: true };\n\n/* Example */\nconst kbToBytes = (kb: number) => kb * 1024;\nconst bytesToKb = (kb: number) => Math.floor(kb / 1024);\nconst FileWrapper = styled(Padbox)`\n  border-radius: ${getRadii('default')};\n  border: 1px solid;\n  border-color: ${({ $hasError, theme }) =>\n    getColor($hasError ? 'error.500' : 'success.500', { theme })};\n`;\nconst File = ({ file, errors = [] }) => (\n  <FileWrapper $hasError={isNonEmptyArray(errors)} paddingSize={SpaceSizes.sm}>\n    <Inline gap={SpaceSizes.sm} justify=\"space-between\">\n      <Text size={TextSizes.md} isBold>\n        {file.name}\n      </Text>\n      <Text size={TextSizes.md}>{bytesToKb(file.size)} kB</Text>\n    </Inline>\n    <Stack>\n      {errors.map((error) => (\n        <Text\n          key={error.code}\n          size={TextSizes.sm}\n          variant={TextVariants.danger}\n        >\n          {error.message}\n        </Text>\n      ))}\n    </Stack>\n  </FileWrapper>\n);\n\nexport const Example = () => {\n  const [errors, setErrors] = useState([]);\n  const [files, setFiles] = useState([]);\n  const handleOnDrop = (acceptedFiles, rejectedFiles) => {\n    setErrors((prev) => [...prev, ...rejectedFiles]);\n    setFiles((prev) => [...prev, ...acceptedFiles]);\n  };\n\n  return (\n    <Stack gap={SpaceSizes.md}>\n      <Stack as=\"ul\" gap={SpaceSizes.xs}>\n        <Text as=\"li\" size={TextSizes.md}>\n          Accepts only PNG files\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          File size has to be at least 100KB\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          Maximal file size is 400KB\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          You can drop up to 2 files at once\n        </Text>\n      </Stack>\n      <FileSelector\n        accept={{ 'image/png': [] }}\n        hasError={isNonEmptyArray(errors)}\n        maxFiles={2}\n        maxFileSize={kbToBytes(400)}\n        minFileSize={kbToBytes(100)}\n        multiple\n        onFilesDrop={handleOnDrop}\n      />\n      {files.map((file) => (\n        <File key={`${file.name}-accepted`} file={file} />\n      ))}\n      {errors.map((error) => (\n        <File\n          key={`${error.file.name}-rejected`}\n          errors={error.errors}\n          file={error.file}\n        />\n      ))}\n    </Stack>\n  );\n};\nExample.parameters = {\n  screenshot: { skip: true },\n};\n"],"names":["component","FileSelector_stories","argTypes","accept","FileSelector","description","maxFiles","onFileDialogCancel","onFileDialogOpen","validator","screenshot","FileSelectorTemplate","args","jsx","Playground","bind","parameters","skip","FillSize","CompactSize","size","AreaSize","width","height","WithError","Disabled","hasError","isDisabled","kbToBytes","kb","bytesToKb","Math","floor","FileWrapper","styled","Padbox","withConfig","displayName","componentId","getRadii","$hasError","theme","getColor","jsxs","Inline","SpaceSizes","sm","File","TextSizes","md","file","name","errors","Text","Stack","error","TextVariants","danger","message","handleOnDrop","setErrors","prev","useState","files","setFiles","acceptedFiles","rejectedFiles","xs","isNonEmptyArray"],"mappings":"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"}