{"version":3,"file":"slice-CaMqkvGm.js","sources":["../../node_modules/ramda/es/internal/_checkForMethod.js","../../node_modules/ramda/es/slice.js"],"sourcesContent":["import _isArray from \"./_isArray.js\";\n/**\n * This checks whether a function has a [methodname] function. If it isn't an\n * array it will execute that function otherwise it will default to the ramda\n * implementation.\n *\n * @private\n * @param {Function} fn ramda implementation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\n\nexport default function _checkForMethod(methodname, fn) {\n  return function () {\n    var length = arguments.length;\n\n    if (length === 0) {\n      return fn();\n    }\n\n    var obj = arguments[length - 1];\n    return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));\n  };\n}","import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry3 from \"./internal/_curry3.js\";\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\n\nvar slice =\n/*#__PURE__*/\n_curry3(\n/*#__PURE__*/\n_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n\nexport default slice;"],"names":["_checkForMethod","methodname","fn","length","obj","_isArray","slice","_curry3","fromIndex","toIndex","list"],"mappings":"0FAYe,SAASA,EAAgBC,EAAYC,EAAI,CACtD,OAAO,UAAY,CACjB,IAAIC,EAAS,UAAU,OAEvB,GAAIA,IAAW,EACb,OAAOD,EAAE,EAGX,IAAIE,EAAM,UAAUD,EAAS,CAAC,EAC9B,OAAOE,EAASD,CAAG,GAAK,OAAOA,EAAIH,CAAU,GAAM,WAAaC,EAAG,MAAM,KAAM,SAAS,EAAIE,EAAIH,CAAU,EAAE,MAAMG,EAAK,MAAM,UAAU,MAAM,KAAK,UAAW,EAAGD,EAAS,CAAC,CAAC,CAC/K,CACA,CCIG,IAACG,EAEJC,EAEAP,EAAgB,QAAS,SAAeQ,EAAWC,EAASC,EAAM,CAChE,OAAO,MAAM,UAAU,MAAM,KAAKA,EAAMF,EAAWC,CAAO,CAC5D,CAAC,CAAC","x_google_ignoreList":[0,1]}