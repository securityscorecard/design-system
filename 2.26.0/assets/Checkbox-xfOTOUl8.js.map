{"version":3,"file":"Checkbox-xfOTOUl8.js","sources":["../../../src/components/forms/Checkbox/Checkbox.tsx"],"sourcesContent":["import { forwardRef, useEffect, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { identity, memoizeWith, pipe } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport * as checked from '../../../theme/icons/check';\nimport * as indeterminate from '../../../theme/icons/minus';\nimport { getFormStyle, getRadii, pxToRem } from '../../../utils';\nimport { Label } from '../Label';\nimport { TogglingInputProps } from '../types/forms.types';\nimport { CheckboxProps } from './Checkbox.types';\nimport { CLX_COMPONENT } from '../../../theme/constants';\nimport { mergeRefs } from '../../../utils/mergeRefs';\n\nconst CheckboxWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n`;\n\nconst getRemToggleSize = memoizeWith(\n  identity,\n  pipe(getFormStyle('toggleSize'), pxToRem),\n);\n\nconst Box = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 0 0 ${getRemToggleSize};\n  height: ${getRemToggleSize};\n  width: ${getRemToggleSize};\n  border: 1px solid ${getFormStyle('borderColor')};\n  border-radius: ${getRadii('default')};\n  background: ${getFormStyle('bgColor')};\n  padding: ${pxToRem(3)};\n`;\n\nconst Mark = styled.svg`\n  display: none;\n  font-size: ${pxToRem(12)};\n  width: 1.25em;\n  color: ${getFormStyle('activeColor')};\n`;\n\nconst CheckboxInput = styled.input<TogglingInputProps>`\n  height: ${getRemToggleSize};\n  width: ${getRemToggleSize};\n  opacity: 0;\n  position: absolute;\n\n  &:checked + ${Box} {\n    background: ${getFormStyle('activeBorderColor')};\n    border-color: ${getFormStyle('activeBorderColor')};\n\n    ${Mark} {\n      display: block;\n    }\n  }\n\n  &:disabled + ${Box} {\n    border-color: ${getFormStyle('disabledBorderColor')};\n    background: ${getFormStyle('disabledBgColor')};\n    cursor: not-allowed;\n  }\n\n  &:disabled:checked + ${Box} {\n    ${Mark} {\n      color: ${getFormStyle('disabledActiveColor')};\n    }\n  }\n\n  &:hover:not(:disabled, :checked) + ${Box} {\n    border-color: var(--sscds-color-border-input-hover);\n    background: var(--sscds-color-background-input-hover);\n  }\n\n  &:focus + ${Box} {\n    border: 2px solid ${getFormStyle('activeBorderColor')};\n  }\n\n  ${({ isIndeterminate }) =>\n    isIndeterminate &&\n    css`\n      & + ${Box}, &:hover + ${Box} {\n        background: ${getFormStyle('activeBorderColor')} !important;\n        border-color: ${getFormStyle('activeBorderColor')};\n        ${Mark} {\n          display: block;\n        }\n      }\n      &:disabled + ${Box} {\n        ${Mark} {\n          color: ${getFormStyle('disabledActiveColor')};\n        }\n      }\n    `};\n\n  ${({ isInvalid }) =>\n    isInvalid &&\n    css`\n      & + ${Box}, &:checked + ${Box}, &:hover + ${Box} {\n        border: 2px solid ${getFormStyle('invalidBorderColor')} !important;\n      }\n    `}\n`;\n\nconst getLabelStyles = css`\n  margin-bottom: 0;\n  min-height: ${getRemToggleSize};\n  line-height: ${getRemToggleSize};\n  margin-left: ${({ theme }) => `-${getRemToggleSize({ theme })}`};\n  font-weight: var(--sscds-font-weight-body-default);\n`;\n\nconst CheckboxLabel = styled(Label)<{ isDisabled: boolean }>`\n  display: flex;\n  align-items: center;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: ${({ theme }) =>\n    `calc(${pxToRem(\n      getFormStyle('toggleSize', { theme }),\n    )} + var(--sscds-space-2x))`};\n  ${getLabelStyles};\n\n  ${({ isDisabled }) =>\n    isDisabled &&\n    css`\n      color: ${getFormStyle('disabledColor')};\n    `}\n`;\n\nconst EmptyLabel = styled.label`\n  padding-left: ${getRemToggleSize};\n  ${getLabelStyles};\n`;\n\nconst generateIconProps = ({ width, height, svgPathData }) => ({\n  viewBox: `0 0 ${width} ${height}`,\n  children: <path d={svgPathData} fill=\"currentColor\" />,\n});\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      name,\n      checkboxId,\n      label,\n      isDisabled = false,\n      isInvalid = false,\n      isIndeterminate = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const hasLabel = isNotUndefined(label);\n\n    useEffect(() => {\n      if (inputRef.current) {\n        inputRef.current.indeterminate = isIndeterminate;\n      }\n    }, [isIndeterminate]);\n\n    return (\n      <CheckboxWrapper className={cls(CLX_COMPONENT, className)}>\n        <CheckboxInput\n          ref={mergeRefs(ref, inputRef)}\n          disabled={isDisabled}\n          id={checkboxId}\n          isIndeterminate={isIndeterminate}\n          isInvalid={isInvalid}\n          name={name}\n          type=\"checkbox\"\n          {...props}\n        />\n        <Box>\n          <Mark\n            role=\"presentation\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...generateIconProps(isIndeterminate ? indeterminate : checked)}\n          />\n        </Box>\n        {hasLabel ? (\n          <CheckboxLabel htmlFor={checkboxId} isDisabled={isDisabled}>\n            {label}\n          </CheckboxLabel>\n        ) : (\n          <EmptyLabel htmlFor={checkboxId} />\n        )}\n      </CheckboxWrapper>\n    );\n  },\n);\n\nexport default Checkbox;\n"],"names":["cov_anvqy6nn7","path","hash","global","gcv","coverageData","coverage","actualCoverage","CheckboxWrapper","s","styled","div","withConfig","displayName","componentId","getRemToggleSize","memoizeWith","identity","pipe","getFormStyle","pxToRem","Box","getRadii","Mark","svg","CheckboxInput","input","isIndeterminate","f","b","css"],"mappings":"ogBAekC,SAAAA,GAAA,CAAA,IAAAC,EAAA,2FAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,2FAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,M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"}