{"version":3,"file":"RowOnClick.stories-7LNkax_J.js","sources":["../../../src/components/DatatableV2/stories/RowOnClick.stories.tsx"],"sourcesContent":["import { useCallback, useEffect, useState } from 'react';\nimport { Meta } from '@storybook/react';\nimport { action } from '@storybook/addon-actions';\n\nimport { Drawer } from '../../Drawer';\nimport Datatable from '../Datatable';\nimport Template, { Story } from './Template';\nimport { DataSource } from '../mocks/data';\nimport { Stack } from '../../layout';\nimport { DatatableInstance, DatatableRow } from '../Datatable.types';\nimport argTypes from './argTypes';\n\nexport default {\n  title: 'components/DatatableV2/RowOnClick',\n  component: Datatable,\n  parameters: {\n    screenshot: { skip: true },\n  },\n  argTypes,\n} as Meta<typeof Datatable>;\n\nexport const RowOnClickEnabled: Story = Template.bind({});\nRowOnClickEnabled.args = {\n  ...Template.args,\n  onRowClick: ({ row, table, event }) =>\n    action('row action')({ row, table, event }),\n  enableRowActions: true,\n  rowActions: [\n    {\n      iconName: 'eye-slash',\n      label: 'Make private',\n      onClick:\n        ({ row, table }) =>\n        (event) =>\n          action('rowsAction button')({ row, table, event }),\n    },\n  ],\n};\n\nexport const RowOnClickDisabled: Story = Template.bind({});\nRowOnClickDisabled.args = {\n  ...Template.args,\n};\n\nexport const ActiveRow: Story = Template.bind({});\nActiveRow.args = {\n  ...RowOnClickEnabled.args,\n  initialState: {\n    ...RowOnClickEnabled.args.initialState,\n    activeRowId: 'e23968c3-3f19-44b2-aee9-c4a1d7c326ee',\n  },\n};\nActiveRow.parameters = {\n  screenshot: { skip: false },\n};\n\nexport const ActiveRowManagedState: Story = (args) => {\n  const [activeRowId, setActiveRowId] = useState(\n    'e23968c3-3f19-44b2-aee9-c4a1d7c326ee',\n  );\n\n  return (\n    <>\n      <Datatable\n        state={{ activeRowId }}\n        onActiveRowIdChange={setActiveRowId}\n        {...args}\n      />\n      <div>\n        <strong>Debug:</strong>\n        <pre>{JSON.stringify(activeRowId, null, 2)}</pre>\n      </div>\n    </>\n  );\n};\nActiveRowManagedState.args = RowOnClickEnabled.args;\n\nconst useDatatableKeyboardNav = ({\n  row,\n  table,\n}: {\n  row: DatatableRow<DataSource>;\n  table: DatatableInstance<DataSource>;\n}) => {\n  const { flatRows = [] } = table.getSortedRowModel?.() ?? {};\n  const [rowIndex, setRowIndex] = useState(\n    flatRows.findIndex?.((flatRow) => flatRow.id === row.id),\n  );\n  useEffect(() => {\n    setRowIndex(flatRows?.findIndex?.((flatRow) => flatRow.id === row.id));\n  }, [flatRows, row.id]);\n\n  useEffect(() => {\n    const keyboardNav = (e: KeyboardEvent) => {\n      if (e.key === 'ArrowUp') {\n        setRowIndex((prev) => (prev - 1 < 0 ? 0 : prev - 1));\n        table.setActiveRowId(flatRows[rowIndex - 1 >= 0 ? rowIndex - 1 : 0].id);\n      }\n      if (e.key === 'ArrowDown') {\n        setRowIndex((prev) =>\n          prev + 1 >= flatRows.length ? flatRows.length - 1 : prev + 1,\n        );\n        table.setActiveRowId(\n          flatRows[\n            rowIndex < flatRows.length - 1 ? rowIndex + 1 : flatRows.length - 1\n          ].id,\n        );\n      }\n    };\n\n    document.addEventListener('keyup', keyboardNav);\n\n    return () => {\n      document.removeEventListener('keyup', keyboardNav);\n    };\n  }, [flatRows, flatRows.length, table, rowIndex]);\n\n  return { rows: flatRows, rowIndex };\n};\nconst renderKeyValue = ([key, value]) => {\n  if (typeof value === 'object') {\n    return (\n      <Stack gap=\"sm\">\n        <div>{key}</div>\n        {Object.entries(value).map(renderKeyValue)}\n      </Stack>\n    );\n  }\n\n  return (\n    <div key={key}>\n      {key}: {value.toString()}\n    </div>\n  );\n};\nconst DataDrawer = ({\n  row,\n  table,\n  onClose,\n}: {\n  row: DatatableRow<DataSource>;\n  table: DatatableInstance<DataSource>;\n  onClose: () => void;\n}) => {\n  const { rows, rowIndex } = useDatatableKeyboardNav({ row, table });\n\n  return (\n    <Drawer\n      hasBackdrop={false}\n      size=\"md\"\n      title={rows[rowIndex].original.organization.name}\n      onClose={onClose}\n    >\n      <Stack gap=\"sm\">\n        {Object.entries(rows[rowIndex].original).map(renderKeyValue)}\n      </Stack>\n    </Drawer>\n  );\n};\n\nexport const OpenDrawerOnRowClick: Story = (args) => {\n  const [activeRowId, setActiveRowId] = useState('');\n  const [drawerData, setDrawerData] = useState<{\n    row: DatatableRow<DataSource>;\n    table: DatatableInstance<DataSource>;\n  } | null>(null);\n\n  const handleDrawerClose = useCallback(() => {\n    setActiveRowId('');\n    setDrawerData(null);\n  }, [setDrawerData, setActiveRowId]);\n\n  return (\n    <>\n      <Datatable\n        state={{ activeRowId }}\n        onActiveRowIdChange={setActiveRowId}\n        onRowClick={(props) => {\n          if (props.row.id === activeRowId) {\n            setDrawerData(null);\n          } else {\n            setDrawerData(props);\n          }\n        }}\n        {...args}\n      />\n      {drawerData !== null && (\n        <DataDrawer\n          row={drawerData.row}\n          table={drawerData.table}\n          onClose={handleDrawerClose}\n        />\n      )}\n    </>\n  );\n};\nOpenDrawerOnRowClick.args = Template.args;\n"],"names":["component","RowOnClick_stories","parameters","screenshot","skip","argTypes","RowOnClickEnabled","Template","bind","args","onRowClick","row","table","event","rowActions","iconName","onClick","enableRowActions","label","RowOnClickDisabled","ActiveRow","initialState","activeRowId","ActiveRowManagedState","setActiveRowId","useState","jsxs","Fragment","jsx","Datatable","JSON","stringify","useDatatableKeyboardNav","flatRows","getSortedRowModel","setRowIndex","findIndex","useEffect","flatRow","id","key","prev","rowIndex","e","length","document","rows","addEventListener","keyboardNav","value","removeEventListener","entries","map","renderKeyValue","DataDrawer","Object","onClose","toString","DatatableInstance","useCallback","organization","name","setDrawerData","original","OpenDrawerOnRowClick","props","drawerData"],"mappings":"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"}