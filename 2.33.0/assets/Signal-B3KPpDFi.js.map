{"version":3,"file":"Signal-B3KPpDFi.js","sources":["../../../src/components/Signal/common.tsx","../../../src/components/Signal/BreachRiskSignal.tsx","../../../src/components/Signal/BusinessImpactSignal.tsx","../../../src/components/Signal/IncidentLikelihoodSignal.tsx","../../../src/components/Signal/SeveritySignal.tsx","../../../src/components/Signal/Signal.tsx"],"sourcesContent":["import { ComponentProps, PropsWithChildren } from 'react';\nimport cls from 'classnames';\n\nimport { CLX_COMPONENT } from '../../theme/constants';\nimport { svgPathData as positiveIcon } from '../../theme/icons/checkCircleSolid';\nimport { svgPathData as infoIcon } from '../../theme/icons/infoCircle';\nimport { svgPathData as criticalIcon } from '../../theme/icons/exclTriangleSolid';\nimport { BaseSvgProps } from './Signal.types';\n\nexport const criticalityLevels = {\n  critical: 4,\n  high: 3,\n  medium: 2,\n  low: 1,\n  none: 0,\n} as const;\n\nconst criticalityColorsSeverity = [\n  undefined,\n  'var(--sscds-color-signal-low)',\n  'var(--sscds-color-signal-medium)',\n  'var(--sscds-color-signal-high)',\n];\n\nfunction Svg({\n  children,\n  className,\n  ...props\n}: PropsWithChildren<ComponentProps<'svg'>>) {\n  return (\n    <svg\n      className={cls(CLX_COMPONENT, className)}\n      data-testid=\"ds-severity-icon\"\n      style={{\n        overflow: 'visible',\n        ...(props.style || {}),\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      {children}\n    </svg>\n  );\n}\n\nfunction VerticalBar({\n  height,\n  xPos,\n  fill = 'var(--sscds-color-signal-inactive)',\n}: {\n  height: number;\n  xPos: number;\n  fill: string;\n}) {\n  return (\n    <rect\n      height={height}\n      rx={1.5}\n      style={{ fill }}\n      width={3}\n      x={xPos}\n      y={16 - height}\n    />\n  );\n}\n\nexport function Vertical3Bars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 }) {\n  return (\n    <Svg\n      aria-hidden={props.ariaHidden}\n      height={size}\n      style={{ color: criticalityColorsSeverity[criticality] }}\n      viewBox=\"0 0 16 16\"\n      width={size}\n      {...props}\n    >\n      <title>{title}</title>\n      {[0, 1, 2].map((v) => (\n        <VerticalBar\n          key={v}\n          fill={v < criticality ? 'currentColor' : undefined}\n          height={8 + v * 4}\n          xPos={1.5 + v * 5}\n        />\n      ))}\n    </Svg>\n  );\n}\n\nexport function Vertical4Bars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 | 4 }) {\n  const getActiveColor = (level: number) => {\n    const colors = [\n      'var(--sscds-color-signal-inactive)',\n      'var(--severity-green-40)',\n      'var(--severity-yellow-40)',\n      'var(--severity-orange-40)',\n      'var(--severity-deepred-40)',\n    ];\n    return colors[level] || colors[0];\n  };\n\n  const getInactiveColor = (level: number) => {\n    const colors = [\n      'var(--sscds-color-signal-inactive)',\n      'var(--severity-green-20)',\n      'var(--severity-yellow-20)',\n      'var(--severity-orange-20)',\n      'var(--severity-deepred-20)',\n    ];\n    return colors[level] || colors[0];\n  };\n\n  return (\n    <svg height={size} viewBox=\"0 0 18 16\" width={(size / 16) * 18} {...props}>\n      <title>{title}</title>\n      {[0, 1, 2, 3].map((v) => (\n        <VerticalBar\n          key={v}\n          fill={\n            v < criticality\n              ? getActiveColor(criticality)\n              : getInactiveColor(criticality)\n          }\n          height={4 + v * 4}\n          xPos={v * 5}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport function HorizontalBars({\n  criticality,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { criticality: 0 | 1 | 2 | 3 }) {\n  return (\n    <svg\n      height={size}\n      style={{ color: criticalityColorsSeverity[criticality] }}\n      viewBox=\"0 0 16 16\"\n      width={size}\n      {...props}\n    >\n      <title>{title}</title>\n      {[0, 1, 2].map((v) => (\n        <rect\n          key={v}\n          fill={\n            v < criticality\n              ? 'currentColor'\n              : 'var(--sscds-color-signal-inactive)'\n          }\n          height=\"4\"\n          rx=\"2\"\n          width=\"16\"\n          y={12 - v * 6}\n        />\n      ))}\n    </svg>\n  );\n}\n\nexport const Icon = ({\n  signal,\n  size = 16,\n  title,\n  ...props\n}: BaseSvgProps & { signal: 'info' | 'positive' | 'critical' }) => (\n  <Svg\n    aria-hidden={props.ariaHidden}\n    height={size}\n    viewBox=\"0 0 512 512\"\n    width={size}\n    {...props}\n    style={{\n      ...(props.style || {}),\n      color:\n        signal === 'info'\n          ? 'var(--sscds-color-signal-info)'\n          : signal === 'positive'\n          ? 'var(--sscds-color-signal-positive)'\n          : 'var(--sscds-color-signal-high)', // we are using fixed color because it's not defined in DS\n    }}\n  >\n    <title>{title}</title>\n    <path\n      d={\n        signal === 'info'\n          ? infoIcon\n          : signal === 'positive'\n          ? positiveIcon\n          : criticalIcon\n      }\n      fill=\"currentColor\"\n    />\n  </Svg>\n);\n","import { Vertical3Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, BreachRiskSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is BreachRiskSignalKinds {\n  return ['high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function BreachRiskSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: BreachRiskSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  return (\n    <Vertical3Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} breach risk`}\n      {...props}\n    />\n  );\n}\nBreachRiskSignal.displayName = 'BreachRiskSignal';\n","import { Vertical4Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, BusinessImpactSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is BusinessImpactSignalKinds {\n  return ['critical', 'high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function BusinessImpactSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: BusinessImpactSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  return (\n    <Vertical4Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} business impact`}\n      {...props}\n    />\n  );\n}\nBusinessImpactSignal.displayName = 'BusinessImpactSignal';\n","import { Vertical4Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, IncidentLikelihoodSignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is IncidentLikelihoodSignalKinds {\n  return ['critical', 'high', 'medium', 'low', 'none'].includes(kind);\n}\n\nexport default function IncidentLikelihoodSignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: IncidentLikelihoodSignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  return (\n    <Vertical4Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} incident likelihood`}\n      {...props}\n    />\n  );\n}\nIncidentLikelihoodSignal.displayName = 'IncidentLikelihoodSignal';\n","import { Icon, Vertical3Bars, criticalityLevels } from './common';\nimport { BaseSignalProps, SeveritySignalKinds } from './Signal.types';\n\nfunction hasValidKind(kind: string): kind is SeveritySignalKinds {\n  return ['high', 'medium', 'low', 'none', 'positive', 'info'].includes(kind);\n}\nexport default function SeveritySignal({\n  kind,\n  title,\n  ...props\n}: {\n  kind: SeveritySignalKinds;\n} & BaseSignalProps) {\n  if (!hasValidKind(kind)) return null;\n\n  if (['positive', 'info'].includes(kind)) {\n    return (\n      <Icon\n        signal={kind as 'positive' | 'info'}\n        title={title ?? `${kind} signal`}\n        {...props}\n      />\n    );\n  }\n  return (\n    <Vertical3Bars\n      criticality={criticalityLevels[kind]}\n      title={title ?? `${kind} severity`}\n      {...props}\n    />\n  );\n}\nSeveritySignal.displayName = 'SeveritySignal';\n","import { isNilOrEmpty } from 'ramda-adjunct';\n\nimport {\n  BreachRiskSignalKinds,\n  BusinessImpactSignalKinds,\n  IncidentLikelihoodSignalKinds,\n  SeveritySignalKinds,\n  SignalProps,\n} from './Signal.types';\nimport BreachRiskSignal from './BreachRiskSignal';\nimport BusinessImpactSignal from './BusinessImpactSignal';\nimport IncidentLikelihoodSignal from './IncidentLikelihoodSignal';\nimport SeveritySignal from './SeveritySignal';\n\nexport default function Signal(props: SignalProps) {\n  const { variant, kind, ...rest } = props;\n\n  if (isNilOrEmpty(kind)) return null;\n\n  if (variant === 'breachRisk') {\n    return (\n      <BreachRiskSignal\n        kind={kind.toLowerCase() as BreachRiskSignalKinds}\n        {...rest}\n      />\n    );\n  }\n  if (variant === 'businessImpact') {\n    return (\n      <BusinessImpactSignal\n        kind={kind.toLowerCase() as BusinessImpactSignalKinds}\n        {...rest}\n      />\n    );\n  }\n  if (variant === 'incidentLikelihood') {\n    return (\n      <IncidentLikelihoodSignal\n        kind={kind.toLowerCase() as IncidentLikelihoodSignalKinds}\n        {...rest}\n      />\n    );\n  }\n\n  return (\n    <SeveritySignal\n      kind={kind.toLowerCase() as SeveritySignalKinds}\n      {...rest}\n    />\n  );\n}\nSignal.displayName = 'Signal';\n"],"names":["cov_1k6nrf32kd","path","hash","global","gcv","coverageData","coverage","actualCoverage","criticalityLevels","s","critical","high","medium","low","none","className","Svg","children","height","f","jsx","cls","CLX_COMPONENT","style","overflow","b","props","criticality","VerticalBar","xPos","fill","rx","width","x","y","Vertical3Bars","title","jsxs","ariaHidden","size","color","criticalityColorsSeverity","viewBox","map","v","hasValidKind","kind","cov_1cx3v69ah4","includes","BreachRiskSignal","cov_n4iqnusdp","BusinessImpactSignal","cov_2jfxkr1jaq","IncidentLikelihoodSignal","cov_2j8365mc84","SeveritySignal","Signal","cov_18ktg5d2pt","variant","rest","isNilOrEmpty","toLowerCase"],"mappings":"kPA6CA,SAAAA,GAAA,CAAA,IAAAC,EAAA,iFAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,iFAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,IAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,IAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,MAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,cAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA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AAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,IAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,SAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,KAAAA,UAAAA,CAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,EAAAA,IAAAA,CAAAA,KAAAA,OAAAA,OAAAA,MAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,eAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,gFAAAA,EAAAA,MAAAA,CAAAA,UAAAA,OAAAA,OAAAA,QAAAA,EAAAA,SAAAA,sIAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,EAAAA,UAAAA,CAAAA,OAAAA,GAAAA,CAAAA,CAAAA,EAXQ,EApBJA,SAAAA,EAAA9B,EAAA+B,CAAAA,IAAAtC,EAAA,CAAA,IAII,MAAAuC,QAAAA,EAAAZ,KAAAA,EAAA,GAAAa,CAAA,GAAAF,EAAA,EAAAhD,EAAAiB,CAAAA,IAAAA,GAIJ,OAJI+B,EAAA,EAAAhD,EAIJ,CAAA,IAAAmD,EAAAd,CAAA,GAAAW,IAAAhC,EAAAgC,CAAAA,EAAAA,CAAAA,IAAAA,IAAAhD,EAAA,CAAA,IAAA,OAAAgD,IAAAhC,EAAAgC,CAAAA,EAAAA,CAAAA,IAAAA,EAAAhD,EAAAA,OAOFiD,kBAAAD,EAAA,EAAAhC,EAAAgC,CAAAA,EAAAA,CAAAA,IAAAA,EAAAhD,EAAAA,EACE,CAAA,IAAAW,EAAA,IAAA6B,GAAAH,KAAAA,EAAAe,YAAA,EAAAF,GAAAA,CAAA,CAeJH,IAAAA,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA;"}