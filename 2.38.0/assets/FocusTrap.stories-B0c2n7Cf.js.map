{"version":3,"file":"FocusTrap.stories-B0c2n7Cf.js","sources":["../../../src/components/FocusTrap/FocusTrap.stories.tsx"],"sourcesContent":["import { Meta, StoryFn } from '@storybook/react';\nimport { useState } from 'react';\n\nimport { generateControl } from '../../utils/tests/storybook';\nimport { Button } from '../Button';\nimport { Drawer } from '../Drawer';\nimport { Inline, Stack } from '../layout';\nimport { Modal } from '../Modal';\nimport { Text } from '../Text';\nimport FocusTrap, { FocusTrapProps } from './index';\nimport { DropdownMenu } from '../DropdownMenu';\n\nexport default {\n  title: 'components/FocusTrap',\n  component: FocusTrap,\n  argTypes: {\n    children: {\n      control: { type: 'text' },\n      table: {\n        type: { summary: 'React.ReactNode' },\n      },\n    },\n    isActive: {\n      ...generateControl('boolean', {}),\n      description: 'Whether the focus trap is active',\n    },\n    onDeactivate: {\n      control: { disable: true },\n      description: 'Callback when focus trap is deactivated',\n    },\n    restoreFocus: {\n      ...generateControl('boolean', {}),\n      description:\n        'Whether to restore focus to the previously focused element when deactivating',\n    },\n    allowEscapeKey: {\n      ...generateControl('boolean', {}),\n      description: 'Whether to allow deactivation via Escape key',\n    },\n    allowClickOutside: {\n      ...generateControl('boolean', {}),\n      description: 'Whether to allow deactivation via clicking outside',\n    },\n    allowTabOutside: {\n      ...generateControl('boolean', {}),\n      description:\n        'Whether to allow deactivation via Tab key on the last focusable element',\n    },\n    className: {\n      control: { type: 'text' },\n      description: 'Additional CSS class name for the container',\n    },\n    as: {\n      ...generateControl('select', {\n        div: 'div',\n        section: 'section',\n        article: 'article',\n        main: 'main',\n      }),\n      description: 'Custom element type for the container',\n    },\n  },\n  parameters: {\n    docs: {\n      description: {\n        component: `FocusTrap component for constraining keyboard navigation within modals, drawers, and overlays. This component automatically manages focus trapping when active and provides accessible behavior following WCAG guidelines for modal dialogs.`,\n      },\n    },\n  },\n} as Meta;\n\nexport const Playground: StoryFn<FocusTrapProps> = (args) => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsActive(true)}>Open Focus Trap</Button>\n      <FocusTrap {...args} isActive={isActive}>\n        <div\n          style={{\n            position: 'fixed',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            background: 'white',\n            border: '1px solid #ccc',\n            padding: '20px',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            zIndex: 1000,\n          }}\n        >\n          <Text>Focus Trap Content</Text>\n          <Inline gap=\"md\" style={{ marginTop: '16px' }}>\n            <Button onClick={() => setIsActive(false)}>Close</Button>\n            <Button variant=\"outline\">Action</Button>\n          </Inline>\n        </div>\n      </FocusTrap>\n    </div>\n  );\n};\nPlayground.args = {\n  isActive: false,\n  restoreFocus: true,\n};\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\n\nexport const ModalExample: StoryFn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>\n      {isOpen && (\n        <Modal\n          size=\"md\"\n          title=\"Modal with Focus Trap\"\n          onClose={() => setIsOpen(false)}\n        >\n          <Stack gap=\"md\">\n            <Text>\n              This modal uses FocusTrap internally to constrain keyboard\n              navigation. You can navigate with Tab/Shift+Tab, close with\n              Escape, or click outside to close.\n            </Text>\n            <Inline gap=\"md\">\n              <Button onClick={() => setIsOpen(false)}>Cancel</Button>\n              <Button variant=\"solid\" onClick={() => setIsOpen(false)}>\n                Confirm\n              </Button>\n            </Inline>\n          </Stack>\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport const DrawerExample: StoryFn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Open Drawer</Button>\n      {isOpen && (\n        <Drawer\n          size=\"md\"\n          title=\"Drawer with Focus Trap\"\n          focusTrap\n          onClose={() => setIsOpen(false)}\n        >\n          <Stack gap=\"md\" style={{ flex: 1 }}>\n            <Text>\n              This drawer uses FocusTrap internally to constrain keyboard\n              navigation. Focus is constrained within this drawer.\n            </Text>\n            <div style={{ flex: 1 }}>\n              <Stack gap=\"sm\">\n                <Button variant=\"outline\" isExpanded>\n                  Menu Item 1\n                </Button>\n                <Button variant=\"outline\" isExpanded>\n                  Menu Item 2\n                </Button>\n                <Button variant=\"outline\" isExpanded>\n                  Menu Item 3\n                </Button>\n                <div>\n                  <DropdownMenu\n                    actions={[\n                      {\n                        label: 'More Actions',\n                        name: 'moreActions',\n                        onClick: () => console.log('More Actions clicked'),\n                      },\n                    ]}\n                  >\n                    <Button variant=\"outline\">More Actions</Button>\n                  </DropdownMenu>\n                </div>\n              </Stack>\n            </div>\n\n            <Inline gap=\"md\">\n              <Button onClick={() => setIsOpen(false)}>Cancel</Button>\n              <Button variant=\"solid\" onClick={() => setIsOpen(false)}>\n                Save\n              </Button>\n            </Inline>\n          </Stack>\n        </Drawer>\n      )}\n    </div>\n  );\n};\n\nexport const FormExample: StoryFn = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const handleClose = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    event.stopPropagation();\n    setIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Button onClick={() => setIsOpen(true)}>Open Form</Button>\n      <FocusTrap\n        as=\"div\"\n        containerProps={{\n          style: {\n            background: 'white',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            maxWidth: '600px',\n            padding: '24px',\n            width: '90%',\n          },\n        }}\n        isActive={isOpen}\n      >\n        <Stack gap=\"md\">\n          <Text as=\"h2\" id=\"form-title\" size=\"lg\">\n            User Information\n          </Text>\n          <form>\n            <Stack gap=\"md\">\n              <div>\n                <label htmlFor=\"name\">Name</label>\n                <input\n                  id=\"name\"\n                  style={{\n                    width: '100%',\n                    padding: '8px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px',\n                  }}\n                  type=\"text\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  id=\"email\"\n                  style={{\n                    width: '100%',\n                    padding: '8px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px',\n                  }}\n                  type=\"email\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"message\">Message</label>\n                <textarea\n                  id=\"message\"\n                  rows={4}\n                  style={{\n                    width: '100%',\n                    padding: '8px',\n                    border: '1px solid #ccc',\n                    borderRadius: '4px',\n                    resize: 'vertical',\n                  }}\n                />\n              </div>\n            </Stack>\n          </form>\n          <Inline gap=\"md\" style={{ marginTop: '16px' }}>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button variant=\"solid\" onClick={handleClose}>\n              Submit\n            </Button>\n          </Inline>\n        </Stack>\n      </FocusTrap>\n    </div>\n  );\n};\n\nexport const CustomElement: StoryFn = () => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsActive(true)}>Open Custom Element</Button>\n      <FocusTrap\n        as=\"section\"\n        containerProps={{\n          tabIndex: 0,\n          'aria-labelledby': 'custom-title',\n          style: {\n            background: 'white',\n            border: '2px solid #007bff',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            left: '50%',\n            padding: '20px',\n            position: 'fixed',\n            top: '50%',\n            transform: 'translate(-50%, -50%)',\n            zIndex: 1000,\n          },\n        }}\n        isActive={isActive}\n        restoreFocus\n      >\n        <Stack gap=\"md\">\n          <Text as=\"h2\" id=\"custom-title\" size=\"lg\">\n            Custom Section Element\n          </Text>\n          <Text>This focus trap uses a section element instead of a div.</Text>\n          <Inline gap=\"md\">\n            <Button onClick={() => setIsActive(false)}>Close</Button>\n            <Button variant=\"outline\">Action</Button>\n          </Inline>\n        </Stack>\n      </FocusTrap>\n    </div>\n  );\n};\n\nexport const NoEscapeKey: StoryFn = () => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsActive(true)}>Open (No Escape)</Button>\n      <FocusTrap\n        containerProps={{\n          style: {\n            background: 'white',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            left: '50%',\n            padding: '20px',\n            position: 'fixed',\n            top: '50%',\n            transform: 'translate(-50%, -50%)',\n            zIndex: 1000,\n          },\n        }}\n        isActive={isActive}\n      >\n        <Stack gap=\"md\">\n          <Text as=\"h2\" size=\"lg\">\n            No Escape Key\n          </Text>\n          <Text>\n            This focus trap doesn&apos;t allow closing with the Escape key. You\n            must use the close button or click outside.\n          </Text>\n          <Button onClick={() => setIsActive(false)}>Close</Button>\n        </Stack>\n      </FocusTrap>\n    </div>\n  );\n};\n\nexport const TabOutsideAllowed: StoryFn = () => {\n  const [isActive, setIsActive] = useState(false);\n\n  return (\n    <div>\n      <Button onClick={() => setIsActive(true)}>\n        Open (Tab Outside Allowed)\n      </Button>\n      <FocusTrap\n        containerProps={{\n          style: {\n            background: 'white',\n            border: '1px solid #ccc',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\n            left: '50%',\n            padding: '20px',\n            position: 'fixed',\n            top: '50%',\n            transform: 'translate(-50%, -50%)',\n            zIndex: 1000,\n          },\n        }}\n        isActive={isActive}\n      >\n        <Stack gap=\"md\">\n          <Text as=\"h2\" size=\"lg\">\n            Tab Outside Allowed\n          </Text>\n          <Text>\n            This focus trap allows Tab key to escape when you reach the last\n            focusable element. Clicking outside won&apos;t close it.\n          </Text>\n          <Inline gap=\"md\">\n            <Button onClick={() => setIsActive(false)}>Close</Button>\n            <Button variant=\"outline\">Action</Button>\n          </Inline>\n        </Stack>\n      </FocusTrap>\n    </div>\n  );\n};\n"],"names":["component","FocusTrap_stories","argTypes","children","FocusTrap","control","type","table","summary","isActive","generateControl","description","disable","onDeactivate","restoreFocus","allowEscapeKey","allowClickOutside","allowTabOutside","className","section","article","div","main","parameters","docs","Playground","args","setIsActive","useState","jsx","Button","jsxs","position","left","transform","background","border","padding","borderRadius","boxShadow","zIndex","Text","marginTop","screenshot","skip","ModalExample","setIsOpen","isOpen","Modal","Stack","Inline","DrawerExample","flex","Drawer","label","name","onClick","DropdownMenu","console","log","handleClose","maxWidth","width","FormExample","event","preventDefault","stopPropagation","style","resize","CustomElement","top","NoEscapeKey"],"mappings":"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"}