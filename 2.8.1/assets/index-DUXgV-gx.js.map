{"version":3,"file":"index-DUXgV-gx.js","sources":["../../../src/components/_internal/BaseTabs/index.ts","../../../src/components/forms/SegmentedToggle/SegmentedToggle.tsx","../../../src/components/forms/SegmentedToggle/SegmentedToggleItem.tsx","../../../src/components/forms/SegmentedToggle/index.ts"],"sourcesContent":["export * as BaseTabsEnums from './BaseTabs.enums';\nexport * from './BaseTabLabel.types';\n","import {\n  Children,\n  type PropsWithChildren,\n  type ReactElement,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n} from 'react';\nimport { noop } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport type {\n  SegmentedToggleItemProps,\n  SegmentedToggleProps,\n} from './SegmentedToggle.types';\nimport { BaseTabsWrapper } from '../../_internal/BaseTabs/BaseTabsWrapper';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { Inline } from '../../layout';\nimport { BaseTabsEnums } from '../../_internal/BaseTabs';\nimport { CLX_COMPONENT } from '../../../theme/constants';\n\nconst SegmentedToggle = forwardRef<\n  HTMLDivElement,\n  PropsWithChildren<SegmentedToggleProps>\n>(\n  (\n    {\n      group,\n      isDisabled = false,\n      children,\n      onChange = noop,\n      className,\n      ...props\n    },\n    ref,\n  ) => (\n    <BaseTabsWrapper\n      ref={ref}\n      $variant={BaseTabsEnums.BaseTabVariants.segmented}\n      className={cls(CLX_COMPONENT, className)}\n      paddingSize={SpaceSizes.xs}\n    >\n      <Inline gap={SpaceSizes.sm} role=\"radiogroup\">\n        {Children.map(children, (segmentedToggleItem) => {\n          if (!isValidElement(segmentedToggleItem)) {\n            return null;\n          }\n\n          return cloneElement(\n            segmentedToggleItem as ReactElement<SegmentedToggleItemProps>,\n            {\n              key: segmentedToggleItem.props.value,\n              name: group,\n              disabled: isDisabled,\n              onChange,\n              ...props,\n            },\n          );\n        })}\n      </Inline>\n    </BaseTabsWrapper>\n  ),\n);\n\nexport default SegmentedToggle;\n","import { forwardRef } from 'react';\nimport styled from 'styled-components';\n\nimport { SegmentedToggleItemProps } from './SegmentedToggle.types';\nimport { ColorTypes } from '../../../theme/colors.enums';\nimport BaseTabLabel, {\n  segmentedTabSelected,\n} from '../../_internal/BaseTabs/BaseTabLabel';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { PaddingTypes } from '../../layout/Padbox/Padbox.enums';\nimport { getFormStyle } from '../../../utils/helpers';\nimport { BaseTabsEnums } from '../../_internal/BaseTabs';\n\nconst Radio = styled.input`\n  display: none;\n\n  :checked + ${BaseTabLabel} {\n    ${segmentedTabSelected}\n  }\n\n  :checked:disabled + ${BaseTabLabel} {\n    background: ${getFormStyle('disabledBgColor')};\n    border-color: ${getFormStyle('disabledBorderColor')};\n  }\n\n  :disabled + ${BaseTabLabel} {\n    color: ${getFormStyle('disabledColor')};\n    &:hover {\n      color: ${getFormStyle('disabledColor')};\n    }\n  }\n`;\n\nconst SegmentedToggleItemWrapper = styled.span`\n  display: flex;\n`;\n\nconst SegmentedToggleItem = forwardRef<\n  HTMLInputElement,\n  SegmentedToggleItemProps\n>(({ label, value, group, itemId, ...props }, ref) => {\n  const paddingSize = SpaceSizes.sm;\n\n  return (\n    <SegmentedToggleItemWrapper>\n      <Radio\n        ref={ref}\n        id={itemId}\n        name={group}\n        type=\"radio\"\n        value={value}\n        {...props}\n      />\n      <BaseTabLabel\n        $color={ColorTypes.primary500}\n        $variant={BaseTabsEnums.BaseTabVariants.segmented}\n        as=\"label\"\n        htmlFor={itemId}\n        paddingSize={paddingSize}\n        paddingType={PaddingTypes.squish}\n        style={{ marginBottom: 0 }}\n      >\n        {label}\n      </BaseTabLabel>\n    </SegmentedToggleItemWrapper>\n  );\n});\n\nexport default SegmentedToggleItem;\n","export { default as SegmentedToggle } from './SegmentedToggle';\nexport { default as SegmentedToggleItem } from './SegmentedToggleItem';\nexport * from './SegmentedToggle.types';\n"],"names":["cov_273ak0or7c","actualCoverage","SegmentedToggle","cov_j7ok0fowu","s","forwardRef","props","isDisabled","b","onChange","noop","cov_2274a3dd7i","path","hash","global","gcv","coverageData","coverage","Radio","styled","input","withConfig","displayName","componentId","BaseTabLabel","segmentedTabSelected","getFormStyle","SegmentedToggleItemWrapper","span","cov_11rwghsphd"],"mappings":"0nCAAA,OAAAA,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,8xECkDYE,MAAAA,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAAC,aAAA,CAAA,CAKKC,MAAAA,EAGTC,WAAAA,GAAAJ,EAAA,EAAAK,EAINN,CAAAA,EAAAA,CAAAA,IAAAA,IAAAA,SAAAA,EAEFO,SAAAA,GAAAN,EAAA,EAAAK,EAAA,CAAA,EAAA,CAAA,IAAAE,onCCIA,SAAAC,GAAA,CAAA,IAAAC,EAAA,6GAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,6GAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,4GAAA,EAAA,MAAA,CAAA,QAAA,QAAA,QAAA,SAAA,qBAAA,EAAA,SAAA,4LAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAf,EAAAgB,EAAAL,CAAA,EAAAD,OAAAA,EAAA,UAAAV,CAAAA,OAAAA,GAAAA,CAAA,CAAAU,EAAA,EAnCA,MAAAO,GAAAP,IAAAP,OAAAe,EAAAC,MAAAC,WAAA,CAAAC,YAAAC,6BAAAA,wKAAAC,EAAAC,EAAAD,EAAAE,EAAAA,iBAAAA,EAAAA,yBAAAF,EAAAE,EAAA,eAAA,EAAAA,EAAA,eAAA,CAAA,GAmCAC,GAAAhB,EAAA,EAAAP,EAAA,CAAA,IAAAe,EAAAS,KAAAP,WAAAC,CAAAA,8DAAAC,YAAA,aAAA,CAAA,EAAA,CAAA,eAAA,CAAA,8pDCpEA,OAAAM,EAAA,UAAA,CAAA,OAAA5B,CAAA,EAAAA,CAAA,CAAA4B,EAAA"}