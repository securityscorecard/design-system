import{j as s}from"./jsx-runtime-BbjHj44Y.js";import{I as e}from"./IconWrapper-b-D3pjH0.js";import"./index-7bldAnOT.js";import{S as v}from"./index-DRm3KUNF.js";import{g as z}from"./storybook-CEy1qkXR.js";import{I as n}from"./Inline-C4eBN8Ve.js";import"./index-C6mWTJJr.js";import"./_commonjsHelpers-BosuxZz1.js";import"./styled-components.browser.esm-DdpL0cfT.js";import"./index-BzkxN2vn.js";import"./constants-l-41uwkI.js";import"./space.enums-DGrZwzIk.js";import"./_isObject-dmcfxmtS.js";import"./Icon-D9Bd8CnO.js";import"./index-Dk74W0Oi.js";import"./index-CVyJwDg7.js";import"./useLogger-D6HktrB1.js";import"./DSProvider-0V0etiPX.js";import"./index-CWFZYRor.js";import"./theme-Dt5JqxPR.js";import"./colors-BJBAFLAc.js";import"./Padbox-BDqsTa65.js";import"./index-DCKWONtv.js";import"./index-C8Uj0hRh.js";import"./prop-gA1VFyoz.js";import"./Inline.enums-KPT5jvjq.js";import"./Cluster-C53_rRpf.js";import"./zipObj-BkK7rA3s.js";const X={title:"components/IconWrapper",component:e,argTypes:{name:{...z("select",v)}}},a=r=>s.jsx(e,{...r});a.args={name:"cog"};a.parameters={screenshot:{skip:!0}};const p=r=>s.jsxs(n,{gap:"md",children:[s.jsx(e,{...r,size:"xs",type:"ssc"}),s.jsx(e,{...r,size:"sm",type:"ssc"}),s.jsx(e,{...r,size:"md",type:"ssc"}),s.jsx(e,{...r,size:"lg",type:"ssc"}),s.jsx(e,{...r,size:"xl",type:"ssc"})]});p.args=a.args;const t=r=>s.jsxs(n,{gap:"md",children:[s.jsx(e,{...r,variant:"default"}),s.jsx(e,{...r,variant:"subtle"}),s.jsx(e,{...r,variant:"strong"})]});t.args={...a.args,size:"xl",type:"ssc"};const o=r=>s.jsxs(n,{gap:"md",children:[s.jsx(e,{...r,variant:"default"}),s.jsx(e,{...r,variant:"subtle"}),s.jsx(e,{...r,variant:"strong"})]});o.args=t.args;o.parameters={themes:{themeOverride:"Dark"}};var i,m,c;a.parameters={...a.parameters,docs:{...(i=a.parameters)==null?void 0:i.docs,source:{originalSource:"args => <IconWrapper {...args} />",...(c=(m=a.parameters)==null?void 0:m.docs)==null?void 0:c.source}}};var g,d,l;p.parameters={...p.parameters,docs:{...(g=p.parameters)==null?void 0:g.docs,source:{originalSource:`args => <Inline gap="md">
    <IconWrapper {...args} size="xs" type="ssc" />
    <IconWrapper {...args} size="sm" type="ssc" />
    <IconWrapper {...args} size="md" type="ssc" />
    <IconWrapper {...args} size="lg" type="ssc" />
    <IconWrapper {...args} size="xl" type="ssc" />
  </Inline>`,...(l=(d=p.parameters)==null?void 0:d.docs)==null?void 0:l.source}}};var u,I,x;t.parameters={...t.parameters,docs:{...(u=t.parameters)==null?void 0:u.docs,source:{originalSource:`args => <Inline gap="md">
    <IconWrapper {...args} variant="default" />
    <IconWrapper {...args} variant="subtle" />
    <IconWrapper {...args} variant="strong" />
  </Inline>`,...(x=(I=t.parameters)==null?void 0:I.docs)==null?void 0:x.source}}};var j,W,y;o.parameters={...o.parameters,docs:{...(j=o.parameters)==null?void 0:j.docs,source:{originalSource:`args => <Inline gap="md">
    <IconWrapper {...args} variant="default" />
    <IconWrapper {...args} variant="subtle" />
    <IconWrapper {...args} variant="strong" />
  </Inline>`,...(y=(W=o.parameters)==null?void 0:W.docs)==null?void 0:y.source}}};const Y=["Playground","Sizes","Variants","DarkMode"];export{o as DarkMode,a as Playground,p as Sizes,t as Variants,Y as __namedExportsOrder,X as default};
//# sourceMappingURL=IconWrapper.stories-CvgaKuRt.js.map
