{"version":3,"file":"index-C--Jp5zS.js","sources":["../../../src/components/_internal/BaseTabs/BaseTabs.enums.ts","../../../src/components/_internal/BaseTabs/BaseTabsWrapper.tsx","../../../src/components/Tabs/Tabs.tsx","../../../src/components/_internal/BaseTabs/BaseTabLabel.tsx","../../../src/components/Tabs/Tab.tsx","../../../src/components/Tabs/index.ts"],"sourcesContent":["export const BaseTabVariants = {\n  text: 'text',\n  underline: 'underline',\n  segmented: 'segmented',\n} as const;\n","import styled, { css } from 'styled-components';\n\nimport { Padbox } from '../../layout';\nimport { getColor, getFormStyle, getRadii } from '../../../utils';\nimport { Variants } from './BaseTabLabel.types';\nimport { BaseTabVariants } from './BaseTabs.enums';\n\nexport const BaseTabsWrapper = styled(Padbox)<{\n  $variant: Variants;\n  $isExpanded: boolean;\n}>`\n  display: inline-block;\n\n  ${({ $variant, $isExpanded }) =>\n    $variant === BaseTabVariants.segmented &&\n    $isExpanded &&\n    css`\n      width: 100%;\n      flex-grow: 1;\n    `};\n\n  ${({ $variant }) =>\n    $variant === BaseTabVariants.segmented &&\n    css`\n      background: ${getColor('neutral.0')};\n      box-shadow: inset 0 0 0 1px ${getFormStyle('borderColor')};\n      border-radius: ${getRadii('default')};\n    `};\n`;\n","import { Children, cloneElement, isValidElement } from 'react';\nimport { equals } from 'ramda';\n\nimport { Inline } from '../layout';\nimport { TabProps, TabsProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { BaseTabsWrapper } from '../_internal/BaseTabs/BaseTabsWrapper';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Tabs = ({\n  selectedValue,\n  selectedPatternMatcher = equals,\n  children,\n  onSelectTab,\n  variant = TabVariants.underline,\n  isExpanded = false,\n  ariaLabel = 'Navigation tabs',\n}: TabsProps) => (\n  <BaseTabsWrapper\n    $isExpanded={isExpanded}\n    $variant={variant}\n    className={CLX_COMPONENT}\n    paddingSize={\n      variant === TabVariants.segmented ? SpaceSizes.xs : SpaceSizes.none\n    }\n  >\n    <Inline\n      aria-label={ariaLabel}\n      gap={\n        variant === TabVariants.segmented\n          ? SpaceSizes.sm\n          : variant === TabVariants.underline\n          ? SpaceSizes.none\n          : SpaceSizes.lg\n      }\n      role=\"tablist\"\n      stretch={isExpanded ? 'all' : 0}\n    >\n      {Children.map(children, (tab) => {\n        if (!isValidElement(tab)) {\n          return null;\n        }\n\n        return cloneElement<Partial<TabProps>>(tab, {\n          key: tab.props.value,\n          __variant: variant,\n          __isExpanded: isExpanded,\n          __isSelected: selectedPatternMatcher(tab.props.value, selectedValue),\n          __onSelectTab: onSelectTab,\n        });\n      })}\n    </Inline>\n  </BaseTabsWrapper>\n);\n\nexport default Tabs;\n","import styled, { css } from 'styled-components';\nimport { __, includes, pipe, subtract } from 'ramda';\n\nimport { getColor, getRadii, getToken, pxToRem } from '../../../utils';\nimport { BaseLabelProps } from './BaseTabLabel.types';\nimport { BaseTabVariants } from './BaseTabs.enums';\nimport { Padbox } from '../../layout/Padbox';\n\nconst underlineTab = css<BaseLabelProps>`\n  font-weight: ${({ $isSelected }) =>\n    $isSelected\n      ? 'var(--sscds-font-weight-body-strong)'\n      : 'var(--sscds-font-weight-body-default)'};\n  line-height: 1.5rem;\n  color: ${getColor('neutral.900')};\n  border-bottom: 2px solid\n    ${({ $isSelected }) =>\n      $isSelected ? getToken('color-action-primary') : getColor('neutral.300')};\n\n  &:hover {\n    color: ${getColor('neutral.900')};\n    border-bottom-color: ${getToken('color-action-primary-focus')};\n  }\n`;\n\nconst textTab = css<BaseLabelProps>`\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  font-weight: var(--sscds-font-weight-elementlabel-default);\n  color: ${({ $isSelected }) =>\n    $isSelected\n      ? getColor('neutral.900')\n      : getToken('color-action-link-primary')};\n\n  &:hover {\n    color: ${getToken('color-action-link-primary-hover')};\n  }\n`;\n\nexport const segmentedTabSelected = css`\n  background: ${getColor('primary.50')};\n  border: 1px solid ${getColor('primary.200')};\n`;\n\nconst segmentedTab = css<BaseLabelProps>`\n  line-height: var(--sscds-font-lineheight-elementlabel);\n\n  height: ${({ theme }) =>\n    pipe(\n      getToken('size-action-size'),\n      subtract(__, 2 * theme.space.xs),\n      pxToRem,\n    )({ theme })};\n  border: 1px solid transparent;\n  ${({ $isSelected }) => $isSelected && segmentedTabSelected};\n\n  border-radius: ${getRadii('half')};\n  color: ${getColor('neutral.900')};\n\n  &:hover {\n    color: ${getToken('color-action-primary-hover')};\n  }\n\n  &:active {\n    color: ${getToken('color-action-primary-active')};\n  }\n`;\n\nconst tabVariants = {\n  [BaseTabVariants.text]: textTab,\n  [BaseTabVariants.underline]: underlineTab,\n  [BaseTabVariants.segmented]: segmentedTab,\n};\n\nconst BaseTabLabel = styled(Padbox).withConfig({\n  shouldForwardProp: (property) =>\n    !includes(property, ['paddingType', 'paddingSize', 'theme']),\n})<BaseLabelProps>`\n  display: flex;\n  align-items: center;\n  outline: none;\n  text-decoration: none;\n  cursor: pointer;\n\n  font-size: ${getToken('font-action-size')};\n\n  ${({ $isExpanded }) =>\n    $isExpanded &&\n    css`\n      justify-content: center;\n    `};\n\n  &:hover {\n    text-decoration: none;\n  }\n\n  ${({ $variant }) => tabVariants[$variant]};\n`;\n\nexport default BaseTabLabel;\n","import { KeyboardEvent, MouseEvent } from 'react';\n\nimport { TabProps } from './Tabs.types';\nimport { TabVariants } from './Tabs.enums';\nimport { requireRouterLink } from '../../utils/require-router-link';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { PaddingTypes } from '../layout/Padbox/Padbox.enums';\nimport BaseTabLabel from '../_internal/BaseTabs/BaseTabLabel';\n\nconst Tab = ({\n  children,\n  onClick,\n  value,\n  __variant,\n  __isExpanded,\n  __isSelected,\n  __onSelectTab,\n  ariaLabel,\n}: TabProps) => {\n  const isLink = value?.toString()?.startsWith('/');\n  const handleKeyDown = (e: KeyboardEvent<HTMLAnchorElement>) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      __onSelectTab(value);\n    }\n  };\n  const handler = isLink\n    ? { to: value, onClick }\n    : {\n        onClick: (e: MouseEvent<HTMLAnchorElement>) => {\n          __onSelectTab(value);\n          onClick?.(e);\n        },\n        onKeyDown: (e: KeyboardEvent<HTMLAnchorElement>) => {\n          handleKeyDown(e);\n        },\n      };\n  let RouterLink = null;\n\n  if (isLink) {\n    RouterLink = requireRouterLink();\n  }\n\n  const paddingSize =\n    __variant === TabVariants.segmented\n      ? SpaceSizes.sm\n      : __variant === TabVariants.underline\n      ? SpaceSizes.md\n      : SpaceSizes.none;\n\n  return (\n    <BaseTabLabel\n      $isExpanded={__isExpanded}\n      $isSelected={__isSelected}\n      $variant={__variant}\n      aria-label={ariaLabel ?? ''}\n      aria-selected={__isSelected}\n      as={isLink ? RouterLink : 'a'}\n      paddingSize={paddingSize}\n      paddingType={PaddingTypes.squish}\n      role=\"tab\"\n      tabIndex={0}\n      {...handler}\n    >\n      {children}\n    </BaseTabLabel>\n  );\n};\n\nexport default Tab;\n","export * as TabsEnums from './Tabs.enums';\nexport { default as Tabs } from './Tabs';\nexport { default as Tab } from './Tab';\nexport * from './Tabs.types';\n"],"names":["cov_2n1qne2uh4","actualCoverage","BaseTabVariants","text","underline","segmented","BaseTabsWrapper","cov_fryg04auj","s","styled","Padbox","withConfig","displayName","componentId","cov_1av177g209","path","hash","global","gcv","coverageData","coverage","selectedValue","equals","children","onSelectTab","isExpanded","b","ariaLabel","f","jsx","$isExpanded","$variant","variant","className","CLX_COMPONENT","paddingSize","TabVariants","SpaceSizes","xs","none","Inline","gap","sm","lg","role","stretch","Children","map","tab","underlineTab","cov_rw0rmg9km","css","$isSelected","getColor","getToken","textTab","cov_1xv5i8kua2","onClick","value","__variant","__isExpanded","__isSelected","__onSelectTab","handleKeyDown","e","key","to","RouterLink","isLink","requireRouterLink","cov_1vppt739tw"],"mappings":"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A,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EA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"}