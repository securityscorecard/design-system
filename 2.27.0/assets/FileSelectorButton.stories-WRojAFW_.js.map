{"version":3,"file":"FileSelectorButton.stories-WRojAFW_.js","sources":["../../../src/components/FileSelectorButton/FileSelectorButton.stories.tsx"],"sourcesContent":["import { useState } from 'react';\nimport { Meta, StoryObj } from '@storybook/react';\nimport { isNonEmptyArray } from 'ramda-adjunct';\n\nimport FileSelectorButton from './FileSelectorButton';\nimport { Inline, Padbox, Stack, Surface } from '../layout';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { TextVariants } from '../Text/Text.enums';\nimport { Text } from '../Text';\n\n/**\n * ```jsx\n * import { FileSelectorButton } from '@securityscorecard/design-system';\n * ```\n */\n\nconst meta = {\n  component: FileSelectorButton,\n  argTypes: {\n    multiple: {\n      control: 'boolean',\n      description: 'Allows to select multiple files',\n      table: {\n        type: {\n          summary: 'boolean',\n        },\n      },\n    },\n    accept: {\n      control: 'object',\n      description:\n        \"Accepted file types, in form of object where keys are file mime types and value is a array with supported file extensions. If an empty array is provided as a value all extensions are accepted.Examples: `{ 'image/png': [ '.png' ] }` will accept only PNG images, `{ 'image/*': [] }` will accept any image with any extension.\",\n      table: {\n        type: {\n          summary: 'Record<string, Array<string>>',\n        },\n      },\n    },\n    maxFiles: {\n      control: 'number',\n      description: 'The maximum number of dropped files',\n      table: {\n        type: {\n          summary: 'number',\n        },\n      },\n    },\n    onFilesDrop: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary:\n            '<T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFilesAccepted: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary: '<T extends File>(files: T[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFilesRejected: {\n      control: { disable: true },\n      table: {\n        type: {\n          summary:\n            '(fileRejections: FileRejection[], event: DropEvent) => void',\n        },\n      },\n    },\n    onFileDialogCancel: {\n      control: { disable: true },\n      description:\n        'Callback fired when file dialog is closed with no selection',\n      table: {\n        type: {\n          summary: '() => void',\n        },\n      },\n    },\n    onFileDialogOpen: {\n      control: { disable: true },\n      description: 'Callback fired when dialog is opened',\n      table: {\n        type: {\n          summary: '() => void',\n        },\n      },\n    },\n    validator: {\n      control: { disable: true },\n      description:\n        'Custom validation function. It must return null if there are no errors.',\n      table: {\n        type: {\n          summary:\n            '<T extends File>(file: T) => FileError | readonly FileError[] | null',\n        },\n      },\n    },\n  },\n  args: {\n    accept: {\n      'image/*': [],\n    },\n  },\n} satisfies Meta<typeof FileSelectorButton>;\n\nexport default meta;\n\ntype Story = StoryObj<typeof meta>;\n\nexport const Playground: Story = {\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n\n/* Example */\nconst File = ({ file, errors = [] }) => (\n  <Surface\n    style={{\n      borderColor: isNonEmptyArray(errors)\n        ? 'var(--sscds-color-border-input-error)'\n        : undefined,\n    }}\n    hasBorder\n  >\n    <Padbox paddingSize=\"2x\">\n      <Inline gap=\"2x\" justify=\"space-between\">\n        <Text isBold>{file.name}</Text>\n        <Text>{Math.floor(file.size / 1024)} kB</Text>\n      </Inline>\n      <Stack>\n        {errors.map((error) => (\n          <Text key={error.code} size=\"sm\" variant={TextVariants.danger}>\n            {error.message}\n          </Text>\n        ))}\n      </Stack>\n    </Padbox>\n  </Surface>\n);\n\nexport const Example: Story = {\n  render: function Render(args) {\n    const [errors, setErrors] = useState([]);\n    const [files, setFiles] = useState([]);\n    const handleOnDrop = (acceptedFiles, rejectedFiles) => {\n      setErrors((prev) => [...prev, ...rejectedFiles]);\n      setFiles((prev) => [...prev, ...acceptedFiles]);\n    };\n\n    return (\n      <Stack gap={SpaceSizes.md}>\n        <FileSelectorButton onFilesDrop={handleOnDrop} {...args} />\n        {files.map((file) => (\n          <File key={`${file.name}-accepted`} file={file} />\n        ))}\n        {errors.map((error) => (\n          <File\n            key={`${error.file.name}-rejected`}\n            errors={error.errors}\n            file={error.file}\n          />\n        ))}\n      </Stack>\n    );\n  },\n  args: {\n    accept: {\n      'image/png': ['.png'],\n    },\n    maxFiles: 2,\n    maxFileSize: 400 * 1024,\n    minFileSize: 100 * 1024,\n    multiple: true,\n  },\n  parameters: {\n    screenshot: { skip: true },\n  },\n};\n"],"names":["component","FileSelectorButton","argTypes","multiple","control","description","table","type","summary","accept","maxFiles","onFilesDrop","disable","onFilesAccepted","onFilesRejected","onFileDialogCancel","onFileDialogOpen","validator","parameters","docs","args","Playground","StoryObj","screenshot","Story","File","file","errors","jsx","Surface","borderColor","isNonEmptyArray","undefined","jsxs","Padbox","Inline","name","Text","Math","floor","size","map","error","TextVariants","danger","message","code","useState","render","handleOnDrop","acceptedFiles","setErrors","prev","files","setFiles","rejectedFiles","SpaceSizes","Stack","md","skip"],"mappings":"8vCAiBEA,MAAAA,GAAWC,CACXC,UAAUD,EACRE,SAAQ,CACNC,UACAC,QAAAA,UACAC,YAAO,kCACLC,MAAM,CACJC,KAAAA,CACFA,QAAA,SACF,CACD,CACDC,EACEL,OAAAA,CACAC,QAAAA,SAEAC,YACEC,qUACEC,MAAAA,CACFD,KAAA,CACFC,QAAA,+BACD,CACDE,CACEN,EACAC,SAAAA,CACAC,QAAO,SACLC,YAAM,sCACJC,MAAAA,CACFD,KAAA,CACFC,QAAA,QACD,CACDG,CACEP,EAAWQ,YAAS,CAAKR,QAAC,CAAAQ,QAAA,EAAA,EAC1BN,MAAO,CACLC,KAAM,CACJC,QAEF,iGACF,CACD,CACDK,EACET,gBAAS,CAAEQ,QAAO,CAAEA,QAAA,EAAA,EAAKN,MAAC,CAC1BA,KAAO,CACLC,QAAM,wDACJC,CACF,CACF,EACFM,gBAAC,CACDA,QAAAA,CAAAA,QAAiB,EAAA,EACfV,MAAO,CAAIQ,KAAAA,CAAeJ,QACnB,6DACLD,CACEC,CAEF,EACFO,mBAAA,CACDX,QAAA,CAAAQ,QAAA,EAAA,EACDG,YACEX,8DAAWQ,MAAAA,CAAeL,KAAA,CAC1BF,QACE,YACFC,CACEC,CACEC,EACFQ,iBAAA,CACFZ,QAAA,CAAAQ,QAAA,EAAA,EACDP,YAAA,uCACDW,MAAAA,CACEZ,KAAS,CAAEQ,QAAS,YAAM,CAC1BP,CACAC,EACEC,UAAM,CACJC,QAAAA,CAAOI,QAAE,EAAA,EACXP,YACF,0EACDC,MAAA,CACDW,KAAW,CACTb,QAAWQ,sEAAe,CAC1BP,CAEAC,CACEC,EACEC,KAAAA,CAEFC,OAAA,CACF,UAAA,CAAA,CACF,CACF,EAAAS,WAAA,CAAAC,KAAA,CAAAd,YAAA,CAAAL,UAAA,qFAAA,CAAA,CAAA,CACAoB,EAOFC,EAAmB,CAEnBH,WAAaI,CAEbC,WAAaF,CAAAA,KAAYG,EAAAA,CACvBN,CACEK,EACFE,EAAAA,CAAA,CAAAC,KAAAA,EAAAC,OAAAA,EAAA,CAAA,CAAA,IACDC,EAAA,IAAAC,UAEDC,YAAAC,EAAAJ,CAAA,EACU,wCAAUK,MAAEL,YACnB,GAMU,SAAAM,EAAAA,KAAAC,EAAA,CAAA,YAAA,KAER,SAAA,CAAAD,EAAA,KAAAE,EAAO,CAAA,IAAA,KAAW,QAAK,kCACd,CAAA,OAAQ,GAAAT,SAAAA,EAAQU,KAAgB,SACrCC,EAAWC,CAAAA,SAAAA,CAAAC,KAAAA,MAAMb,EAAKc,KAAO,IAAA,EAAA,KAAA,EAAA,CAAA,EACtC,UAEYb,CAAAA,SAAAA,EAAAc,IAAAC,SACHf,EACM,CAAA,KAAI,KAAEe,QAAYC,EAAiBC,OACrCF,SAAAA,EAAMG,SAFEH,EACXI,IAEA,CAEG,EACP,CAAA,CACF,CAAA,CAGJ,CAAA,IAG8BC,CAC1BC,OAAMC,SAAgBC,EAAa,MACxB,CAAAvB,EAAMwB,CAASC,EAAIL,EAAAA,SAAkB,CAAA,CAAA,EACtC,CAAAM,EAAMC,CAAM,aAAyB,CAAA,CAAA,EAC9CL,EAAAA,CAAAC,EAAAK,IAAA,CAGCJ,KAAYK,CAAAA,GAAAA,EAAa,GAACD,CAAA,CAAA,EACxBD,KAAmB,CAAA,GAAYF,EAAA,GAAAF,CAAED,CAAAA,CAAAA,EAWnC,OAEHhB,EAAAA,KAAAwB,EAAA,CAAA,IAAAD,EAAAE,GACK,SAAA,CAAA9B,EAAA,IAAA3B,EAAA,CAAA,YAAAgD,EAAA7B,GAAAA,CAAA,CAAA,EACJX,EAAQgC,IAAAf,GACKE,EAAAA,IAAAH,EAAA,CAAS,KAAAC,GAAA,GAAAA,EAAAU,IAAA,WAAA,CACrB,EACD1B,EAAW+B,IAAAC,GACAd,EAAAA,IAAAH,EAAA,CAEH,OAAEiB,EAAAf,OACX,KAAAe,EAAAhB,MAFc,GAAGgB,EAAOhB,KAAAU,IAAA,YAIvBb,CAAcoC,CAAAA,CAAAA,CAChB,EACDvC,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}