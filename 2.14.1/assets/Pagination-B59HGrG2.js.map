{"version":3,"file":"Pagination-B59HGrG2.js","sources":["../../../node_modules/ramda/es/unfold.js","../../../src/components/Pagination/PaginationItem.tsx","../../../src/components/Pagination/PageButtons.tsx","../../../src/components/Pagination/Pagination.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\n\nvar unfold =\n/*#__PURE__*/\n_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n\n  return result;\n});\n\nexport default unfold;","import styled, { css } from 'styled-components';\n\nimport { pxToRem } from '../../utils';\nimport { Padbox } from '../layout';\nimport { PaginationItemProps } from './Pagination.types';\n\nconst StyledPaginationComponent = styled.button<{\n  $isShrinked: boolean;\n  $isCurrent: boolean;\n}>`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  min-width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  padding: ${pxToRem(5, 6)};\n  margin: ${pxToRem(0, 4)};\n  background: none;\n  border: 1px solid transparent;\n  border-radius: var(--sscds-radii-button);\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: var(--sscds-color-text-default);\n  cursor: pointer;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n  &:last-of-type {\n    margin-right: 0;\n  }\n  &:disabled {\n    color: var(--sscds-color-text-disabled);\n    cursor: default;\n  }\n\n  ${({ $isShrinked }) =>\n    $isShrinked &&\n    css`\n      min-width: ${pxToRem(32)};\n    `};\n\n  ${({ $isCurrent }) =>\n    $isCurrent\n      ? css`\n          border-color: var(--sscds-color-border-surface-dynamic);\n          background-color: var(--sscds-color-background-surface-dynamic);\n          font-size: var(--sscds-font-size-elementlabel-md);\n          font-weight: var(--sscds-font-weight-elementlabel-strong);\n          cursor: default;\n        `\n      : css`\n          &:hover {\n            border-color: var(--sscds-color-border-surface-hover);\n            background-color: var(--sscds-color-background-surface-hover);\n          }\n        `};\n`;\n\nexport const PaginationItem = ({\n  children,\n  isDisabled,\n  isCurrent,\n  isShrinked,\n  onClick,\n  key,\n  ...props\n}: PaginationItemProps) => {\n  const handleOnClick = () => {\n    if (isCurrent) {\n      return;\n    }\n\n    onClick();\n  };\n  return (\n    <StyledPaginationComponent\n      key={key}\n      $isCurrent={isCurrent}\n      $isShrinked={isShrinked}\n      data-testid=\"pagination-item\"\n      disabled={isDisabled}\n      type=\"button\"\n      onClick={handleOnClick}\n      {...props}\n    >\n      {children}\n    </StyledPaginationComponent>\n  );\n};\n\nexport const PaginationItemElipsis = styled(Padbox).attrs(() => ({\n  children: '...',\n}))`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: var(--sscds-color-text-subtle);\n  margin: ${pxToRem(0, 4)};\n`;\n","import { useMemo } from 'react';\nimport { unfold } from 'ramda';\n\nimport { PaginationItem, PaginationItemElipsis } from './PaginationItem';\nimport { PageButtonsProps } from './Pagination.types';\n\nconst generatePages = (start: number, end: number): number[] =>\n  unfold((p) => (p > end ? false : [p, p + 1]), start);\n\nexport const calculatePagePositions: (\n  currentPage: number,\n  pageCount: number,\n  positionsCount: number,\n) => {\n  showRightEllipsis: boolean;\n  showLeftEllipsis: boolean;\n  pages: number[];\n} = (currentPage, pageCount, positionsCount) => {\n  // number of fixed positions for edge sections\n  // [POSITIONS - 3 (first+last + elipsis)]\n  const threshold = positionsCount - 3;\n\n  const startPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? 2 // fixed, second page\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - threshold\n      : // this will count positions before current page in middle section\n        // [current page - round up(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage - Math.ceil((positionsCount - 4 - 1) / 2);\n  const endPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? positionsCount - 2\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - 1 // fixed, second last page\n      : // this will count positions after current page in middle section\n        // [current page - round down(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage + Math.floor((positionsCount - 4 - 1) / 2);\n\n  const pages = generatePages(startPage, endPage);\n\n  return {\n    showLeftEllipsis: startPage > 2,\n    showRightEllipsis: endPage < pageCount - 1,\n    pages,\n  };\n};\n\nconst formatNumber = (val: number) =>\n  new Intl.NumberFormat('en-US').format(val);\n\nconst PageButtons = ({\n  currentPage,\n  pageCount,\n  onChange,\n  positions,\n  renderItem = PaginationItem,\n}: PageButtonsProps) => {\n  const { pages, showLeftEllipsis, showRightEllipsis } = useMemo(\n    () => calculatePagePositions(currentPage, pageCount, positions),\n    [currentPage, pageCount, positions],\n  );\n\n  if (pageCount <= positions) {\n    return (\n      <>\n        {generatePages(1, pageCount).map((page) =>\n          renderItem({\n            key: `page-${page}`,\n            page,\n            isCurrent: page === currentPage,\n            onClick: () => onChange(page),\n            children: formatNumber(page),\n          }),\n        )}\n      </>\n    );\n  }\n\n  return positions !== 1 ? (\n    <>\n      {renderItem({\n        page: 1,\n        isCurrent: currentPage === 1,\n        onClick: () => onChange(1),\n        children: <>1</>,\n      })}\n      {showLeftEllipsis && <PaginationItemElipsis />}\n      {pages.map((page) =>\n        renderItem({\n          key: String(page),\n          page,\n          isCurrent: currentPage === page,\n          onClick: () => onChange(page),\n          children: formatNumber(page),\n        }),\n      )}\n      {showRightEllipsis && <PaginationItemElipsis />}\n      {renderItem({\n        page: pageCount,\n        isCurrent: currentPage === pageCount,\n        onClick: () => onChange(pageCount),\n        children: formatNumber(pageCount),\n      })}\n    </>\n  ) : (\n    <>\n      {renderItem({\n        key: String(currentPage),\n        page: currentPage,\n        isCurrent: true,\n        onClick: () => onChange(currentPage),\n        children: formatNumber(currentPage),\n      })}\n    </>\n  );\n};\n\nexport default PageButtons;\n","import { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { PaginationItem } from './PaginationItem';\nimport PageButtons from './PageButtons';\nimport { Inline } from '../layout';\nimport { PaginationProps } from './Pagination.types';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Pagination = ({\n  pageCount,\n  currentPage,\n  onPageChange,\n  pageButtonsCount = 8,\n  renderItem = PaginationItem,\n}: PaginationProps) => (\n  <Inline className={CLX_COMPONENT} gap={SpaceSizes.sm} justify=\"center\">\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Previous page',\n        page: currentPage - 1,\n        isDisabled: currentPage - 1 === 0,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage - 1),\n        children: <Icon name={SSCIconNames.longArrowLeft} />,\n      })}\n    {pageButtonsCount !== 0 && (\n      <PageButtons\n        currentPage={currentPage}\n        pageCount={pageCount}\n        positions={pageButtonsCount}\n        renderItem={renderItem}\n        onChange={onPageChange}\n      />\n    )}\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Next page',\n        page: currentPage + 1,\n        isDisabled: currentPage + 1 > pageCount,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage + 1),\n        children: <Icon name={SSCIconNames.longArrowRight} />,\n      })}\n  </Inline>\n);\n\nexport default Pagination;\n"],"names":["unfold","_curry2","fn","seed","pair","result","StyledPaginationComponent","cov_2casjyhfom","s","styled","button","withConfig","displayName","componentId","pxToRem","cov_2lblevg6r2","path","hash","global","gcv","coverageData","coverage","actualCoverage","generatePages","start","end","f","p","b","startPage","endPage","currentPage","threshold","pageCount","Math","ceil","positionsCount","floor","pages","showLeftEllipsis","showRightEllipsis","formatNumber","val","Intl","NumberFormat","format","PageButtons","onChange","positions","renderItem","useMemo","calculatePagePositions","jsx","Fragment","children","map","page","key","isCurrent","onClick","cov_2emuhujx3","Pagination","onPageChange","PaginationItem","isDisabled","isShrinked","Icon","name","SSCIconNames","longArrowLeft","pageButtonsCount"],"mappings":"2jBA2BA,IAAIA,EAEJC,EAAQ,SAAgBC,EAAIC,EAAM,CAIhC,QAHIC,EAAOF,EAAGC,CAAI,EACdE,EAAS,CAAA,EAEND,GAAQA,EAAK,QAClBC,EAAOA,EAAO,MAAM,EAAID,EAAK,CAAC,EAC9BA,EAAOF,EAAGE,EAAK,CAAC,CAAC,EAGnB,OAAOC,CACT,CAAC,iwGCjC8C,MAAAC,GAAAC,EAAA,EAAAC,EAAAC,CAAAA,IAAAA,EAAAC,OAAAC,WAAAC,CAAAA,YAAAC,4CAAAA,YAAAC,aAAAA,CAAAA,EAAAA,CAAAA,kFAAAA,WAAAA,YAAAA,WAAAA,qXAAAA,IAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,EAAA,EAAA,CAAA,EAAAA,EAAA,EAAA,CAAA,EAAA,CAAA;;8xBCuCtC,SAAAC,GAAA,CAAA,IAAAC,EAAA,0FAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,0FAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,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","x_google_ignoreList":[0]}