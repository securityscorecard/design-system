{"version":3,"file":"index-BcSnSfQB.js","sources":["../../../src/components/layout/Stack/Stack.tsx","../../../src/components/layout/Stack/index.ts"],"sourcesContent":["import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { prop } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport { Property } from 'csstype';\nimport cls from 'classnames';\n\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { SpaceSize } from '../../../theme/space.types';\nimport { getSpace } from '../../../utils';\nimport { AlignItemsPropType } from '../../../types/flex.types';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\nexport interface StackProps {\n  /**\n   * Whitespace between each child of the Stack\n   */\n  gap?: SpaceSize;\n  /**\n   * Horizontal alignment of elements inside Stack\n   */\n  justify?: Property.AlignItems;\n  /**\n   * Vertical alignment of elements inside Stack\n   */\n  align?: Property.JustifyContent;\n  /**\n   * Index of element after which the Stack is splitted. Leave 'undefined' for no splitting.\n   */\n  splitAt?: number;\n  /**\n   * Should apply gap recursively (on nested levels)\n   */\n  isRecursive?: boolean;\n  className?: string;\n}\n\nconst Stack = styled.div.attrs((props) => ({\n  ...props,\n  className: cls(CLX_LAYOUT, props?.className),\n}))<StackProps>`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  align-items: ${prop('justify')};\n  justify-content: ${prop('align')};\n\n  /* FIXME: Until we remove 'margin' property from other components we need to\n    increase specificity of those nesting , since it can be overriden by inner\n    elements with the same specificity. This can lead to inconsistent output\n    of visual test if styled-components puts CSS in different order into Head. */\n  ${({ isRecursive }) => (isRecursive ? '&&' : '&& >')} * {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n\n  ${({ isRecursive }) => (isRecursive ? '&&' : '&& >')} * + * {\n    margin-top: ${({ gap, theme }) => getSpace(gap, { theme })};\n  }\n\n  ${({ splitAt }) =>\n    isNotUndefined(splitAt) &&\n    `\n    :only-child {\n      height: 100%;\n    }\n\n    > :nth-child(${splitAt}) {\n      margin-bottom: auto;\n    }\n  `}\n`;\n\nStack.propTypes = {\n  gap: PropTypes.oneOf(Object.values(SpaceSizes)),\n  justify: AlignItemsPropType,\n  splitAt: PropTypes.number,\n  isRecursive: PropTypes.bool,\n  className: PropTypes.string,\n};\n\nStack.defaultProps = {\n  gap: SpaceSizes.none,\n  justify: 'stretch',\n  isRecursive: false,\n};\n\nexport default Stack;\n","export { default as Stack } from './Stack';\n"],"names":["bool","Stack","cov_1f5vdp6z5g","s","styled","div","attrs","props","f","AlignItemsPropType","cov_1rq0qnpgqw","actualCoverage"],"mappings":"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"}