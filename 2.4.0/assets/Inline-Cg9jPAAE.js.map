{"version":3,"file":"Inline-Cg9jPAAE.js","sources":["../../../src/components/layout/Inline/Inline.enums.ts","../../../src/components/layout/Inline/Inline.tsx"],"sourcesContent":["export const StretchEnum = {\n  start: 'start',\n  end: 'end',\n  all: 'all',\n} as const;\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { prop } from 'ramda';\nimport { isNotUndefined, isNumber } from 'ramda-adjunct';\nimport { Property } from 'csstype';\nimport cls from 'classnames';\n\nimport {\n  AlignItemsPropType,\n  JustifyContentPropType,\n} from '../../../types/flex.types';\nimport { SpaceSize } from '../../../theme/space.types';\nimport { getSpace } from '../../../utils';\nimport { SpaceSizes } from '../../../theme/space.enums';\nimport { StretchEnum } from './Inline.enums';\nimport { CLX_LAYOUT } from '../../../theme/constants';\n\ntype Stretch = (typeof StretchEnum)[keyof typeof StretchEnum];\n\nexport interface InlineProps {\n  /**\n   * Whitespace between each child of the Inline\n   */\n  gap?: SpaceSize;\n  /**\n   * Horizontal alignment of elements inside Inline\n   *\n   */\n  justify?: Property.JustifyContent;\n  /**\n   * Vertical alignment of elements inside Inline\n   */\n  align?: Property.AlignItems;\n  /**\n   * Child or children to fill available space\n   */\n  stretch?: number | Stretch;\n  className?: string;\n}\n\nconst getStretchStyle = (\n  stretch: Required<InlineProps['stretch']>,\n): string | null => {\n  if (isNumber(stretch)) {\n    return `\n      > :nth-child(${stretch}) { flex: 1 1 0%; }\n    `;\n  }\n\n  switch (stretch) {\n    case 'start':\n      return `\n        > :first-child { flex: 1 1 0%; }\n      `;\n    case 'end':\n      return `\n        > :last-child { flex: 1 1 0%; }\n      `;\n    case 'all':\n      return `\n        > * { flex: 1 1 0%; }\n      `;\n    default:\n      return null;\n  }\n};\n\nconst Inline = styled.div.attrs((props) => ({\n  ...props,\n  className: cls(CLX_LAYOUT, props?.className),\n}))<InlineProps>`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: ${prop('justify')};\n  align-items: ${prop('align')};\n\n  ${({ stretch }) => isNotUndefined(stretch) && getStretchStyle(stretch)}\n\n  /* FIXME: Until we remove 'margin' property from other components we need to\n    increase specificity of those nesting , since it can be overriden by inner\n    elements with the same specificity. This can lead to inconsistent output\n    of visual test if styled-components puts CSS in different order into Head. */\n  && > * {\n    margin-left: 0;\n    margin-right: 0;\n  }\n\n  && > * + * {\n    margin-left: ${({ gap, theme }) => getSpace(gap, { theme })};\n  }\n`;\n\nInline.propTypes = {\n  align: AlignItemsPropType,\n  justify: JustifyContentPropType,\n  gap: PropTypes.oneOf(Object.values(SpaceSizes)),\n  stretch: PropTypes.oneOfType([\n    PropTypes.number,\n    PropTypes.oneOf<Stretch>(Object.values(StretchEnum)),\n  ]),\n  className: PropTypes.string,\n};\n\nInline.defaultProps = {\n  gap: SpaceSizes.none,\n};\n\nexport default Inline;\n"],"names":["cov_27h0c641du","actualCoverage","StretchEnum","start","end","all","cov_6rbq4dui7","path","hash","global","gcv","coverageData","coverage","s","getStretchStyle","stretch","gap","f","AlignItemsPropType","b"],"mappings":"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"}