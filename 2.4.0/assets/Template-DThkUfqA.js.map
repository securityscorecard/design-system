{"version":3,"file":"Template-DThkUfqA.js","sources":["../../../src/components/DatatableV2/mocks/data.ts","../../../src/components/DatatableV2/stories/Template.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\n\ntype DetectionMethod =\n  | 'WHOIS'\n  | 'DNS'\n  | 'SSL'\n  | '3rd party'\n  | 'SSC Res.'\n  | 'Pub. Data'\n  | 'Cloud';\ntype Grade = 'A' | 'B' | 'C' | 'D' | 'F';\ntype Status = 'Claimed' | 'Attributed' | 'Disputed' | 'Removed' | 'Dynamic';\ninterface Organization {\n  name: string;\n  domain: string;\n  score: number;\n  grade: Grade;\n}\n\nexport interface DataSource {\n  id: string;\n  ipAddress: string;\n  status: Status;\n  country: string;\n  findingsCount: number;\n  observationDate: Date;\n  organization: Organization;\n  detectionMethod: DetectionMethod[] | undefined;\n}\n\nfaker.seed(42);\nfaker.setDefaultRefDate('2023-10-16T00:00:00.000Z');\n\nconst createItem = (): DataSource => ({\n  id: faker.string.uuid(),\n  country: faker.location.country(),\n  detectionMethod: faker.helpers.arrayElements<DetectionMethod>([\n    'WHOIS',\n    'DNS',\n    'SSL',\n    '3rd party',\n    'SSC Res.',\n    'Pub. Data',\n    'Cloud',\n  ]),\n  findingsCount: faker.number.int(2000),\n  ipAddress: faker.internet.ipv4(),\n  observationDate: faker.date.past({ years: 3 }),\n  organization: {\n    domain: faker.internet.domainName(),\n    name: faker.company.name(),\n    score: faker.number.int({ min: 40, max: 100 }),\n    grade: faker.helpers.arrayElement<Grade>(['A', 'B', 'C', 'D', 'F']),\n  },\n  status: faker.helpers.arrayElement<Status>([\n    'Claimed',\n    'Attributed',\n    'Disputed',\n    'Removed',\n    'Dynamic',\n  ]),\n});\n\nexport const generateData = (items: number): DataSource[] => {\n  const data: DataSource[] = [];\n\n  for (let i = 0; i < items; i += 1) {\n    data.push(createItem());\n  }\n\n  return data;\n};\n","import React from 'react';\nimport { StoryFn } from '@storybook/react';\n\nimport Datatable from '../Datatable';\nimport { DataSource, generateData } from '../mocks/data';\nimport { DatatableColumnDef } from '../Datatable.types';\nimport { Pill } from '../../Pill';\nimport { Cluster } from '../../layout';\n\nexport const columns: DatatableColumnDef<DataSource>[] = [\n  { accessorKey: 'organization.name', header: 'Name', enableHiding: true },\n  {\n    accessorKey: 'organization.domain',\n    header: 'Domain',\n    headerComponent: (props) => {\n      return <span>ðŸ”— {props.column.columnDef.header}</span>;\n    },\n  },\n  {\n    accessorFn: (row) => `${row.organization.grade} ${row.organization.score}`,\n    header: 'Score and grade',\n    id: 'score',\n  },\n  {\n    accessorKey: 'detectionMethod',\n    header: 'Detection method',\n    cell: (props) => {\n      return (\n        <Cluster gap=\"xs\">\n          {props.cell.getValue<DataSource['detectionMethod']>()?.map((val) => (\n            <Pill key={val} label={val} />\n          ))}\n        </Cluster>\n      );\n    },\n  },\n];\n\nexport type Story = StoryFn<typeof Datatable<DataSource>>;\nconst Template: Story = (args) => <Datatable {...args} />;\nTemplate.args = {\n  columns,\n  data: generateData(25),\n  enablePersistentState: false,\n  id: 'datatable_template',\n  initialState: {\n    pagination: { pageSize: 5 },\n  },\n  rowsPerPageOptions: [5, 10, 25, 50, 100],\n  getRowId: (row) => row.id,\n};\n\nexport default Template;\n"],"names":["cov_5a1y7tqjd","s","header","columns","cov_136bf5pfww","accessorKey","enableHiding","headerComponent","props","f","columnDef","accessorFn","row","grade","organization","score","id","cell","jsx","Cluster","gap","args","map","val","Pill","label","generateData","initialState","Template","Datatable","getRowId","data"],"mappings":"kgGAAsBA,IAAAC,kwBCewBC,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,gGAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,gGAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,KAAAA,gBAAAA,KAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,IAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,KAAAA,EAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,EAAAA,eAAAA,CAAAA,QAAAA,EAAAA,KAAAA,KAAAA,QAAAA,CAAAA,+FAAAA,EAAAA,MAAAA,CAAAA,YAAAA,eAAAA,OAAAA,UAAAA,UAAAA,cAAAA,SAAAA,eAAAA,kBAAAA,QAAAA,SAAAA,YAAAA,aAAAA,MAAAA,eAAAA,QAAAA,QAAAA,KAAAA,OAAAA,WAAAA,MAAAA,MAAAA,WAAAA,OAAAA,OAAAA,wBAAAA,eAAAA,aAAAA,WAAAA,qBAAAA,UAAAA,EAAAA,SAAAA,64BAAAA,EAAAA,gBAAAA,2CAAAA,KAAAA,0CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,EAAAA,CAAAA,EAAAA,OAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,IAAAA,EAAAA,EAAAA,CAAAA,EAAAA,OAAAA,EAAAA,UAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAAA,IAJ5C,MAAAC,GAAAC,EAAA,EAAAH,EAAA,CAAA,IAAA,CACEI,CAAaA,YAAA,oBAAAH,OAAA,OAAAI,aAAA,EAAA,EACbJ,mCAEEA,gBAAaK,gBAAAC,IAAAJ,IAAAK,OAAAL,IAAAH,EAAA,CAAA,kBAAiBS,CAAAA,SAAUR,CAAAA,MAAAA,EAAAA,OAAAA,UAAAA,MAAAA,CAAAA,CAAAA,EAC1C,EAEF,CACES,eAAwBC,IAAAA,EAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,IAAAA,GAAAA,eAAuBC,KAAA,IAAOC,EAAAA,aAAmBC,KAAA,IACjEb,OAAA,kBACJc,GAAA,OAEN,EACEX,CACQA,YAAA,yBACS,mBACfY,KACET,GAAC,OAAAJ,OAAAA,EAAAK,EAAAA,OAAAL,EAAA,EAAAH,EAAA,CAAA,IAONiB,EAAA,IAAAC,EAAA,CAAAC,IAAA,KAIsBC,UAAAA,EAAAA,EAAAA,KAAAA,SAAgCC,IAAhCD,YAAAA,EAAgCC,IAAAC,IACzCnB,IAAAK,EAAAL,CAAAA,IAAAA,IAAAH,OAAAiB,MAAAM,EAAA,CAAAC,MAAAF,CAAA,EAAAA,CAAA,GACdpB,CACMuB,CAEF,CACJC,CAAc,GAAAvB,EAAA,EAAAH,EACc,CAAA,IAAA,MAC5B2B,EAAAP,IAAAjB,EAAA,EAAAK,EAAAL,CAAAA,IAAAA,EAAA,EAAAH,OAAAiB,EAAAA,IAAAW,EAAA,CAAA,GAAAR,CAAA,CAAA,GAAAjB,EAAA,EAAAH,EAAA,CAAA,IAAA2B,QAEAE,QAAAA,EACFC,KAAAL,EAAA,EAAA,EAEeE,sBAAAA"}