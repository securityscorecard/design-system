{"version":3,"file":"FileSelector.stories-qxW7hQ2n.js","sources":["../../../src/components/FileSelector/FileSelector.stories.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Meta, StoryFn } from '@storybook/react';\nimport { isNonEmptyArray } from 'ramda-adjunct';\nimport styled from 'styled-components';\n\nimport FileSelector from './FileSelector';\nimport { FileSelectorProps } from './FileSelector.types';\nimport { FileSelectorSizes } from './FileSelector.enums';\nimport { Inline, Padbox, Stack } from '../layout';\nimport { SpaceSizes } from '../../theme/space.enums';\nimport { TextSizes, TextVariants } from '../Text/Text.enums';\nimport { Text } from '../Text';\nimport { getColor, getRadii } from '../../utils';\n\nexport default {\n  title: 'components/FileSelector',\n  component: FileSelector,\n  argTypes: {\n    accept: {\n      description:\n        'Accepted file mime types (https://www.iana.org/assignments/media-types/media-types.xhtml)',\n    },\n    maxFiles: {\n      description: 'The maximum number of dropped files',\n    },\n    onFileDialogCancel: {\n      description: 'Callback fired when file dialog is canceled',\n    },\n    onFileDialogOpen: {\n      description: 'Callback fired when dialog is opened',\n    },\n    validator: {\n      description:\n        'Custom validation function. It must return null if there are no errors.',\n    },\n  },\n} as Meta;\n\nconst FileSelectorTemplate: StoryFn<FileSelectorProps> = (args) => (\n  <FileSelector {...args} />\n);\n\nexport const Playground = FileSelectorTemplate.bind({});\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\nPlayground.parameters = {\n  screenshot: { skip: true },\n};\n\n/* Sizes */\nexport const FillSize = FileSelectorTemplate.bind({});\nFillSize.args = {\n  size: FileSelectorSizes.fill,\n};\nexport const CompactSize = FileSelectorTemplate.bind({});\nCompactSize.args = {\n  size: FileSelectorSizes.compact,\n};\nexport const AreaSize = FileSelectorTemplate.bind({});\nAreaSize.args = {\n  size: FileSelectorSizes.area,\n  width: 400,\n  height: 300,\n};\n\n/* States */\nexport const WithError = FileSelectorTemplate.bind({});\nWithError.args = { hasError: true };\nexport const Disabled = FileSelectorTemplate.bind({});\nDisabled.args = { isDisabled: true };\n\n/* Variants */\nexport const OnlyDrag = FileSelectorTemplate.bind({});\nOnlyDrag.args = { isClickDisabled: true, dropLabel: 'Drop files here' };\nexport const OnlyClick = FileSelectorTemplate.bind({});\nOnlyClick.args = { isDragDisabled: true };\n\n/* Example */\nconst kbToBytes = (kb: number) => kb * 1024;\nconst bytesToKb = (kb: number) => Math.floor(kb / 1024);\nconst FileWrapper = styled(Padbox)`\n  border-radius: ${getRadii('default')};\n  border: 1px solid;\n  border-color: ${({ $hasError, theme }) =>\n    getColor($hasError ? 'error.500' : 'success.500', { theme })};\n`;\nconst File = ({ file, errors = [] }) => (\n  <FileWrapper $hasError={isNonEmptyArray(errors)} paddingSize={SpaceSizes.sm}>\n    <Inline gap={SpaceSizes.sm} justify=\"space-between\">\n      <Text size={TextSizes.md} isBold>\n        {file.name}\n      </Text>\n      <Text size={TextSizes.md}>{bytesToKb(file.size)} kB</Text>\n    </Inline>\n    <Stack>\n      {errors.map((error) => (\n        <Text\n          key={error.code}\n          size={TextSizes.sm}\n          variant={TextVariants.danger}\n        >\n          {error.message}\n        </Text>\n      ))}\n    </Stack>\n  </FileWrapper>\n);\n\nexport const Example = () => {\n  const [errors, setErrors] = useState([]);\n  const [files, setFiles] = useState([]);\n  const handleOnDrop = (acceptedFiles, rejectedFiles) => {\n    setErrors((prev) => [...prev, ...rejectedFiles]);\n    setFiles((prev) => [...prev, ...acceptedFiles]);\n  };\n\n  return (\n    <Stack gap={SpaceSizes.md}>\n      <Stack as=\"ul\" gap={SpaceSizes.xs}>\n        <Text as=\"li\" size={TextSizes.md}>\n          Accepts only PNG files\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          File size has to be at least 100KB\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          Maximal file size is 400KB\n        </Text>\n        <Text as=\"li\" size={TextSizes.md}>\n          You can drop up to 2 files at once\n        </Text>\n      </Stack>\n      <FileSelector\n        accept={['image/png']}\n        hasError={isNonEmptyArray(errors)}\n        maxFiles={2}\n        maxFileSize={kbToBytes(400)}\n        minFileSize={kbToBytes(100)}\n        multiple\n        onFilesDrop={handleOnDrop}\n      />\n      {files.map((file) => (\n        <File key={`${file.name}-accepted`} file={file} />\n      ))}\n      {errors.map((error) => (\n        <File\n          key={`${error.file.name}-rejected`}\n          errors={error.errors}\n          file={error.file}\n        />\n      ))}\n    </Stack>\n  );\n};\nExample.parameters = {\n  screenshot: { skip: true },\n};\n"],"names":["component","FileSelector_stories","argTypes","accept","FileSelector","description","maxFiles","onFileDialogCancel","onFileDialogOpen","validator","screenshot","FileSelectorTemplate","args","jsx","Playground","bind","parameters","skip","FillSize","CompactSize","size","FileSelectorSizes","compact","AreaSize","area","width","height","WithError","Disabled","hasError","isDisabled","OnlyDrag","isClickDisabled","dropLabel","isDragDisabled","OnlyClick","kbToBytes","kb","Math","floor","FileWrapper","styled","Padbox","withConfig","displayName","componentId","$hasError","theme","getColor","File","file","errors","isNonEmptyArray","SpaceSizes","sm","jsxs","Inline","Text","TextSizes","md","map","error","danger","message","code","Example","setErrors","useState","handleOnDrop","rejectedFiles","setFiles","acceptedFiles","prev","Stack","xs","files"],"mappings":"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"}