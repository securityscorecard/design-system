{"version":3,"file":"Checkbox-DGFIFVbA.js","sources":["../../../node_modules/ramda/es/add.js","../../../src/components/forms/Checkbox/Checkbox.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\n\nvar add =\n/*#__PURE__*/\n_curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n\nexport default add;","import { forwardRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { add, identity, memoizeWith, pipe } from 'ramda';\nimport { isNotUndefined } from 'ramda-adjunct';\nimport cls from 'classnames';\n\nimport * as checked from '../../../theme/icons/check';\nimport * as indeterminate from '../../../theme/icons/minus';\nimport { getColor, getFormStyle, getRadii, pxToRem } from '../../../utils';\nimport { Label } from '../Label';\nimport { TogglingInputProps } from '../types/forms.types';\nimport { CheckboxProps } from './Checkbox.types';\nimport { CLX_COMPONENT } from '../../../theme/constants';\n\nconst CheckboxWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n`;\n\nconst getRemToggleSize = memoizeWith(\n  identity,\n  pipe(getFormStyle('toggleSize'), pxToRem),\n);\n\nconst Box = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex: 0 0 ${getRemToggleSize};\n  height: ${getRemToggleSize};\n  width: ${getRemToggleSize};\n  border: ${getFormStyle('borderWidth')} solid ${getFormStyle('borderColor')};\n  border-radius: ${getRadii('default')};\n  background: ${getColor('neutral.0')};\n  padding: ${pxToRem(3)};\n`;\n\nconst Mark = styled.svg`\n  display: none;\n  font-size: ${pxToRem(12)};\n  width: 1.25em;\n  color: ${getFormStyle('activeColor')};\n`;\n\nconst CheckboxInput = styled.input<TogglingInputProps>`\n  height: ${getRemToggleSize};\n  width: ${getRemToggleSize};\n  opacity: 0;\n  position: absolute;\n\n  &:checked + ${Box} {\n    background: ${getFormStyle('activeBorderColor')};\n    border-color: ${getFormStyle('activeBorderColor')};\n\n    ${Mark} {\n      display: block;\n    }\n  }\n\n  &:disabled + ${Box} {\n    border-color: ${getFormStyle('disabledBorderColor')};\n    background: ${getFormStyle('disabledBgColor')};\n  }\n\n  &:disabled:checked + ${Box} {\n    ${Mark} {\n      color: ${getFormStyle('disabledActiveColor')};\n    }\n  }\n\n  &:focus + ${Box} {\n    border: 2px solid ${getFormStyle('activeBorderColor')};\n  }\n\n  ${({ isIndeterminate }) =>\n    isIndeterminate &&\n    css`\n      & + ${Box} {\n        background: ${getFormStyle('activeBorderColor')};\n        border-color: ${getFormStyle('activeBorderColor')};\n        ${Mark} {\n          display: block;\n        }\n      }\n      &:disabled + ${Box} {\n        ${Mark} {\n          color: ${getFormStyle('disabledActiveColor')};\n        }\n      }\n    `};\n\n  ${({ isInvalid }) =>\n    isInvalid &&\n    css`\n      & + ${Box}, &:checked + ${Box} {\n        border: ${getFormStyle('statefulBorderWidth')} solid\n          ${getFormStyle('invalidBorderColor')};\n      }\n    `}\n`;\n\nconst getLabelStyles = css`\n  margin-bottom: 0;\n  min-height: ${getRemToggleSize};\n  line-height: ${getRemToggleSize};\n  margin-left: ${({ theme }) => `-${getRemToggleSize({ theme })}`};\n`;\n\nconst CheckboxLabel = styled(Label)<{ isDisabled: boolean }>`\n  display: flex;\n  align-items: center;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: ${({ theme }) =>\n    pipe(getFormStyle('toggleSize'), add(theme.space.sm), pxToRem)({ theme })};\n  ${getLabelStyles};\n\n  ${({ isDisabled }) =>\n    isDisabled &&\n    css`\n      color: ${getFormStyle('disabledColor')};\n    `}\n`;\n\nconst EmptyLabel = styled.label`\n  padding-left: ${getRemToggleSize};\n  ${getLabelStyles};\n`;\n\nconst generateIconProps = ({ width, height, svgPathData }) => ({\n  viewBox: `0 0 ${width} ${height}`,\n  children: <path d={svgPathData} fill=\"currentColor\" />,\n});\n\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  (\n    {\n      name,\n      checkboxId,\n      label,\n      isDisabled = false,\n      isInvalid = false,\n      isIndeterminate = false,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const hasLabel = isNotUndefined(label);\n\n    return (\n      <CheckboxWrapper className={cls(CLX_COMPONENT, className)}>\n        <CheckboxInput\n          ref={ref}\n          disabled={isDisabled}\n          id={checkboxId}\n          isIndeterminate={isIndeterminate}\n          isInvalid={isInvalid}\n          name={name}\n          type=\"checkbox\"\n          {...props}\n        />\n        <Box>\n          <Mark\n            role=\"presentation\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            {...generateIconProps(isIndeterminate ? indeterminate : checked)}\n          />\n        </Box>\n        {hasLabel ? (\n          <CheckboxLabel htmlFor={checkboxId} isDisabled={isDisabled}>\n            {label}\n          </CheckboxLabel>\n        ) : (\n          <EmptyLabel htmlFor={checkboxId} />\n        )}\n      </CheckboxWrapper>\n    );\n  },\n);\n\nexport default Checkbox;\n"],"names":["add","_curry2","a","b","cov_anvqy6nn7","path","hash","global","gcv","coverageData","coverage","actualCoverage","CheckboxWrapper","s","styled","div","withConfig","displayName","componentId","getRemToggleSize","memoizeWith","identity","pipe","getFormStyle","pxToRem","Box","getRadii","getColor","Mark","svg","CheckboxInput","input","isIndeterminate","f","css"],"mappings":"qZAmBA,IAAIA,EAEJC,EAAQ,SAAaC,EAAGC,EAAG,CACzB,OAAO,OAAOD,CAAC,EAAI,OAAOC,CAAC,CAC7B,CAAC,ECeD,SAAAC,GAAA,CAAA,IAAAC,EAAA,2FAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,2FAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ceAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,0FAAA,EAAA,MAAA,CAAA,QAAA,SAAA,OAAA,aAAA,QAAA,YAAA,UAAA,EAAA,SAAA,6aAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,EAAAA,UAAAO,CAAAA,OAAAA,GAAAA,CAAA,CAAAP,EAAA,EAxBkC,MAAAQ,GAAAR,EAAAS,EAAAA,OAAAC,EAAAC,IAAAC,WAAAC,CAAAA,YAAAC,4BAAAA,YAwBlC,cAAA,CAAA,EAAA,CAAA,oDAAA,CAAA,GAAAC,GAAAf,EAAAS,EAAAA,EAAAO,CAAAA,IAAAA,EAAAC,EAAAC,EAAAC,EAAA,YAAA,EAAAC,CAAA,CAAA,GAOkCC,GAAArB,IAAAS,EAAA,CAAA,IAAAC,EAAAC,IAAAC,WAAAC,CAAAA,4BAAAC,YAAA,cAAA,CAAA,EAAA,CAAA,mEAAA,WAAA,UAAA,WAAA,UAAA,kBAAA,eAAA,YAAA,GAAA,EAAAC,EAAAA,EAAAA,EAAAI,EAAAA,aAAAA,EAAAA,EAAAG,aAAAA,EAAAA,aAAAC,EAAA,WAAA,EAAAH,EAAA,CAAA,CAAA,GAgECI,GAAAxB,EAAA,EAAAS,EAAA,CAAA,IAAAC,EAAAe,IAAAb,WAAAC,CAAAA,6BAAAC,YAAA,cAAA,CAAA,EAAA,CAAA,0BAAA,uBAAA,GAAA,EAAAM,EAAA,EAAA,EAAAD,EAS9B,aAAA,CAAA,GAAAO,GAAA1B,EAAA,EAAAS,EAAA,CAAA,IAAAC,EAAAiB,MAAAf,WAAAC,CAAAA,YAAAC,0BAAAA,6RAAAC,EAAAA,EAAAM,EAAAF,EAAA,mBAAA,EAAAA,EAAAK,mBAAAA,EAAAA,EAAAH,EAAAF,EAAA,qBAAA,EAAAA,EAAA,iBAAA,EAAAE,EAAAG,EAAAL,EAAAE,qBAAAA,EAAAA,EAAAF,yBA6DHS,gBAAAA,CAAA,KAAA5B,IAAA6B,EAAA,CAAA,IAAA7B,IAAAS,EAAAT,CAAAA,IAAAA,EAAA,EAAAD,EAAA6B,CAAAA,EAAAA,CAAAA,IAAAA,IAAA5B,EAAA,EAAAD,EAAA,CAAA,EAAA,CAAA,IAAA+B,EAAA,CAAA,OAAA,eAAA,iBAAA,IAAA,iCAAA,IAAA,UAAA,KAAA,EAAAT,EAAAF,EAAAA,mBAAAA,EAAAA,uBAAAK,EAAAH,EAAAG,EAAAL,EAAA,qBAAA,CAAA,IAAA,CAAA","x_google_ignoreList":[0]}