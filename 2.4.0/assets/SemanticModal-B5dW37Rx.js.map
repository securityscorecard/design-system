{"version":3,"file":"SemanticModal-B5dW37Rx.js","sources":["../../../node_modules/ramda/es/internal/_isNumber.js","../../../node_modules/ramda/es/length.js","../../../node_modules/ramda-adjunct/es/isNotArray.js","../../../src/components/SemanticModal/SemanticModal.enums.ts","../../../src/types/to.types.ts","../../../src/types/action.types.ts","../../../src/types/customPropTypes.ts","../../../src/components/SemanticModal/SemanticModal.tsx"],"sourcesContent":["export default function _isNumber(x) {\n  return Object.prototype.toString.call(x) === '[object Number]';\n}","import _curry1 from \"./internal/_curry1.js\";\nimport _isNumber from \"./internal/_isNumber.js\";\n/**\n * Returns the number of elements in the array by returning `list.length`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [a] -> Number\n * @param {Array} list The array to inspect.\n * @return {Number} The length of the array.\n * @example\n *\n *      R.length([]); //=> 0\n *      R.length([1, 2, 3]); //=> 3\n */\n\nvar length =\n/*#__PURE__*/\n_curry1(function length(list) {\n  return list != null && _isNumber(list.length) ? list.length : NaN;\n});\n\nexport default length;","import { complement } from 'ramda';\nimport isArray from './isArray';\n\n/**\n * Checks if input value is complement of `Array`\n *\n * @func isNotArray\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.3.0|v0.3.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isArray|isArray}\n * @example\n *\n * RA.isNotArray([]); //=> false\n * RA.isNotArray(null); //=> true\n * RA.isNotArray({}); //=> true\n */\nvar isNotArray = complement(isArray);\nexport default isNotArray;","export const SemanticModalVariants = {\n  success: 'success',\n  warn: 'warn',\n  error: 'error',\n  ban: 'ban',\n} as const;\n","import PropTypes from 'prop-types';\n\nexport const ToPropType = PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.shape({\n    pathname: PropTypes.string,\n    search: PropTypes.string,\n    hash: PropTypes.string,\n  }),\n]);\n","import type { To } from 'history';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { ToPropType } from './to.types';\n\nexport type ActionBase<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> = {\n  label: React.ReactNode;\n  name: string;\n  onClick?: (...args: OnClickArgs) => OnClickReturnType;\n  tooltip?: React.ReactNode;\n};\n\nexport const ActionBasePropType = {\n  label: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport type HandlerActionKind<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> = ActionBase<OnClickArgs, OnClickReturnType> &\n  Required<Pick<ActionBase<OnClickArgs>, 'onClick'>>;\n\nexport const HandlerActionKindPropType = PropTypes.exact({\n  ...ActionBasePropType,\n  onClick: PropTypes.func.isRequired,\n});\n\nexport type RelativeLinkActionKind<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> = ActionBase<OnClickArgs, OnClickReturnType> & {\n  to: To;\n  href?: never;\n};\n\nexport const RelativeLinkActionKindPropType = PropTypes.exact({\n  ...ActionBasePropType,\n  onClick: PropTypes.func,\n  to: ToPropType.isRequired,\n});\n\nexport type AbsoluteLinkActionKind<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> = ActionBase<OnClickArgs, OnClickReturnType> & {\n  href: string;\n  to?: never;\n};\n\nexport const AbsoluteLinkActionKindPropType = PropTypes.exact({\n  ...ActionBasePropType,\n  onClick: PropTypes.func,\n  href: PropTypes.string.isRequired,\n});\n\nexport type ActionKinds<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n  AdditionalProps = Record<string, unknown>,\n> =\n  | (HandlerActionKind<OnClickArgs, OnClickReturnType> & AdditionalProps)\n  | (AbsoluteLinkActionKind<OnClickArgs, OnClickReturnType> & AdditionalProps)\n  | (RelativeLinkActionKind<OnClickArgs, OnClickReturnType> & AdditionalProps);\n\nexport type ActionWithSubactions<\n  OnClickArgs extends Array<unknown>,\n  OnClickReturnType = void,\n> = ActionBase<OnClickArgs, OnClickReturnType> & {\n  subActions: ActionKinds<OnClickArgs, OnClickReturnType>[];\n  href?: never;\n  to?: never;\n};\n\nexport const ActionKindsPropType = PropTypes.oneOfType([\n  HandlerActionKindPropType,\n  RelativeLinkActionKindPropType,\n  AbsoluteLinkActionKindPropType,\n]);\n\nexport const ActionWithSubactionsPropType = PropTypes.exact({\n  ...ActionBasePropType,\n  onClick: PropTypes.func,\n  subActions: PropTypes.arrayOf(ActionKindsPropType).isRequired,\n});\n","import { gt, length } from 'ramda';\nimport { isEmptyArray, isNotArray, isUndefined } from 'ramda-adjunct';\n\nimport { TupleType, TypeChecker } from './customPropTypes.types';\n\n// Taken from https://stackoverflow.com/a/51165301/2216488\nexport function CustomPropTypeError(message: string) {\n  // eslint-disable-next-line fp/no-this\n  this.message = message;\n  // eslint-disable-next-line fp/no-this\n  this.stack = '';\n}\nCustomPropTypeError.prototype = Error.prototype;\n\nexport function createChainableTypeChecker(validate) {\n  function checkType(\n    isRequired,\n    props,\n    propName,\n    componentName,\n    location,\n    propFullName,\n    secret,\n  ) {\n    const componentNameValid = componentName || 'ANONYMOUS';\n    const propNameValid = propFullName || propName;\n\n    if (props[propName] === null) {\n      if (isRequired) {\n        if (props[propName] === null) {\n          return new CustomPropTypeError(\n            `The ${location} \\`${propNameValid}\\` is marked as required in \\`${componentNameValid}\\` but its value is \\`null\\`.`,\n          );\n        }\n        return new CustomPropTypeError(\n          `The ${location} \\`${propNameValid}\\` is marked as required in \\`${componentNameValid}\\` but its value is \\`undefined\\`.`,\n        );\n      }\n      return null;\n    }\n    return validate(\n      props,\n      propName,\n      componentNameValid,\n      location,\n      propNameValid,\n      secret,\n    );\n  }\n\n  const chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n\n  return chainedCheckType;\n}\n\nexport function tuple(...types: TupleType[]): TypeChecker {\n  return createChainableTypeChecker(\n    // Validate fn\n    (props, propName, componentName, location, propFullName, secret) => {\n      const value = props[propName];\n      const locationValid = location || 'prop';\n      const propNameValid = propFullName || propName;\n      // Tuple prop is not required\n      if (isUndefined(value)) {\n        return null;\n      }\n      if (isNotArray(value)) {\n        return new CustomPropTypeError(\n          `Invalid ${locationValid} \\`${propNameValid}\\` supplied to \\`${componentName}\\`, expected an array with a maximum of ${types.length} elements`,\n        );\n      }\n      if (isEmptyArray(value)) {\n        return new CustomPropTypeError(\n          `Invalid ${locationValid} \\`${propNameValid}\\` supplied to \\`${componentName}\\`, expected an array with a maximum of ${types.length} elements, got empty array`,\n        );\n      }\n      if (gt(length(value), length(types))) {\n        return new CustomPropTypeError(\n          `Invalid ${locationValid} \\`${propNameValid}\\` supplied to \\`${componentName}\\`, expected an array with a maximum of ${types.length} elements, got array with ${value.length} elements`,\n        );\n      }\n      for (let i = 0; i < value.length; i += 1) {\n        const error = types[i](\n          value,\n          i,\n          componentName,\n          'element',\n          `${propFullName}[${i}]`,\n          secret,\n        );\n        if (error) {\n          return error;\n        }\n      }\n\n      return null;\n    },\n  );\n}\n","import React, { forwardRef } from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { isNotUndefined } from 'ramda-adjunct';\n\nimport { SemanticModalVariants } from './SemanticModal.enums';\nimport { RenderButtonProps, SemanticModalProps } from './SemanticModal.types';\nimport { Modal, ModalEnums } from '../Modal';\nimport { Button, ButtonEnums } from '../Button';\nimport { ButtonColors } from '../Button/Button.enums';\nimport { Icon } from '../Icon';\nimport {\n  AbsoluteLinkActionKind,\n  ActionKinds,\n  ActionKindsPropType,\n  RelativeLinkActionKind,\n} from '../../types/action.types';\nimport * as CustomPropTypes from '../../types/customPropTypes';\nimport { getColor, pxToRem } from '../../utils';\nimport { Center, Inline, Padbox, Stack } from '../layout';\nimport { Color, SpaceSizes } from '../../theme';\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { H4 } from '../Heading';\nimport { Text } from '../Text';\n\nconst colorVariants: Record<keyof typeof SemanticModalVariants, Color> = {\n  [SemanticModalVariants.success]: 'success.500',\n  [SemanticModalVariants.warn]: 'warning.500',\n  [SemanticModalVariants.error]: 'error.500',\n  [SemanticModalVariants.ban]: 'error.500',\n};\n\nconst iconVariants = {\n  [SemanticModalVariants.success]: SSCIconNames.checkCircle,\n  [SemanticModalVariants.warn]: SSCIconNames.exclTriangle,\n  [SemanticModalVariants.error]: SSCIconNames.error,\n  [SemanticModalVariants.ban]: SSCIconNames.ban,\n};\n\nconst StyledIcon = styled(Icon)<{ $variant?: SemanticModalProps['variant'] }>`\n  color: ${({ $variant }) => getColor(colorVariants[$variant])};\n  font-size: ${pxToRem(48)};\n`;\n\nconst renderButton = ({\n  action,\n  color,\n  isLoading,\n  loadingText,\n  variant,\n}: RenderButtonProps) => (\n  <Button\n    key={action.name}\n    color={color}\n    href={(action as AbsoluteLinkActionKind<[React.MouseEvent]>).href}\n    isLoading={isLoading}\n    loadingText={loadingText}\n    name={action.name}\n    to={(action as RelativeLinkActionKind<[React.MouseEvent]>).to}\n    variant={variant}\n    onClick={action.onClick}\n  >\n    {action.label}\n  </Button>\n);\n\nconst SemanticModal = forwardRef<HTMLDivElement, SemanticModalProps>(\n  (\n    {\n      title,\n      message,\n      actions,\n      onClose,\n      variant = SemanticModalVariants.success,\n      primaryButtonColor = ButtonEnums.ButtonColors.primary,\n      isPrimaryButtonLoading = false,\n      loadingText = '',\n    },\n    ref,\n  ) => {\n    return (\n      <Modal ref={ref} size={ModalEnums.ModalSizes.sm} onClose={onClose}>\n        <Center isTextCentered>\n          <Stack gap={SpaceSizes.lg}>\n            <div>\n              <StyledIcon $variant={variant} name={iconVariants[variant]} />\n            </div>\n            <Stack gap={SpaceSizes.md}>\n              <H4>{title}</H4>\n              <Text as=\"div\" size=\"md\">\n                {message}\n              </Text>\n              <Padbox paddingSize={SpaceSizes.md}>\n                <Inline gap={SpaceSizes.md} justify=\"center\">\n                  {actions.map(\n                    (action: ActionKinds<[React.MouseEvent]>, index: number) =>\n                      isNotUndefined(action) &&\n                      renderButton({\n                        action,\n                        variant:\n                          index === 0\n                            ? ButtonEnums.ButtonVariants.outline\n                            : ButtonEnums.ButtonVariants.solid,\n                        color:\n                          index === 0\n                            ? ButtonEnums.ButtonColors.primary\n                            : primaryButtonColor,\n                        isLoading: index === 0 ? false : isPrimaryButtonLoading,\n                        loadingText,\n                      }),\n                  )}\n                </Inline>\n              </Padbox>\n            </Stack>\n          </Stack>\n        </Center>\n      </Modal>\n    );\n  },\n);\n\nexport default SemanticModal;\n\nSemanticModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  message: PropTypes.node.isRequired,\n  actions: CustomPropTypes.tuple(ActionKindsPropType, ActionKindsPropType)\n    .isRequired,\n  onClose: PropTypes.func.isRequired,\n  variant: PropTypes.oneOf(Object.values(SemanticModalVariants)),\n  primaryButtonColor: PropTypes.oneOf(Object.values(ButtonColors)),\n  isPrimaryButtonLoading: PropTypes.bool,\n  loadingText: PropTypes.string,\n};\n"],"names":["_isNumber","x","length","_curry1","list","isNotArray","complement","isArray","cov_zlsldahxo","actualCoverage","SemanticModalVariants","success","warn","error","ban","ToPropType","PropTypes","oneOfType","string","shape","pathname","search","hash","ActionBasePropType","label","node","isRequired","name","HandlerActionKindPropType","exact","onClick","func","RelativeLinkActionKindPropType","to","AbsoluteLinkActionKindPropType","href","ActionKindsPropType","subActions","arrayOf","isUndefined","CustomPropTypeError","prototype","message","stack","cov_2fj4eg4221","s","Error","createChainableTypeChecker","location","checkType","props","propName","componentName","propFullName","secret","chainedCheckType","propNameValid","b","value","componentNameValid","isEmptyArray","validate","bind","cov_1gupot0mlv","path","global","gcv","coverageData","coverage","colorVariants","checkCircle","exclTriangle","iconVariants","SSCIconNames","color","isLoading","renderButton","action","title","actions","onClose","primary","SemanticModal","forwardRef","ref","f"],"mappings":"y8BAAe,SAASA,EAAUC,EAAG,CACnC,OAAO,OAAO,UAAU,SAAS,KAAKA,CAAC,IAAM,iBAC/C,CCgBA,IAAIC,EAEJC,EAAQ,SAAgBC,EAAM,CAC5B,OAAOA,GAAQ,MAAQJ,EAAUI,EAAK,MAAM,EAAIA,EAAK,OAAS,GAChE,CAAC,ECFGC,EAAaC,EAAWC,CAAO,s3BCpB5B,OAAAC,EAAA,UAAA,CAAA,OAAAC,CAAA,EAAAA,CAAA,CAAAD,EAAA,EAAME,MAAAA,GAAAA,EAAAA,EAAAA,OAAwB,CACnCC,QAAS,UACTC,KAAM,OACNC,MAAO,QACPC,IAAK,KACP,GCHaC,EAAaC,EAAUC,UAAU,CAC5CD,EAAUE,OACVF,EAAUG,MAAM,CACdC,SAAUJ,EAAUE,OACpBG,OAAQL,EAAUE,OAClBI,KAAMN,EAAUE,MAClB,CAAC,CAAC,CACH,ECOYK,EAAqB,CAChCC,MAAOR,EAAUS,KAAKC,WACtBC,KAAMX,EAAUE,OAAOQ,UACzB,EAQaE,EAA4BZ,EAAUa,MAAM,CACvD,GAAGN,EACHO,QAASd,EAAUe,KAAKL,UAC1B,CAAC,EAUYM,EAAiChB,EAAUa,MAAM,CAC5D,GAAGN,EACHO,QAASd,EAAUe,KACnBE,GAAIlB,EAAWW,UACjB,CAAC,EAUYQ,EAAiClB,EAAUa,MAAM,CAC5D,GAAGN,EACHO,QAASd,EAAUe,KACnBI,KAAMnB,EAAUE,OAAOQ,UACzB,CAAC,EAoBYU,EAAsBpB,EAAUC,UAAU,CACrDW,EACAI,EACAE,CAA8B,CAC/B,EAE2ClB,EAAUa,MAAM,CAC1D,GAAGN,EACHO,QAASd,EAAUe,KACnBM,WAAYrB,EAAUsB,QAAQF,CAAmB,EAAEV,UACrD,CAAC,ECxBSa,SAAAA,GAAAA,CAAAA,IAAAA,EAAAA,6EAAAA,EAAAA,2CAAAA,EAAAA,OAAAA,EAAAA,eAAAA,EAAAA,CAAAA,KAAAA,6EAAAA,aAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,EAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,GAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,CAAAA,EAAAA,GAAAA,CAAAA,MAAAA,CAAAA,KAAAA,GAAAA,OAAAA,CAAAA,EAAAA,IAAAA,CAAAA,KAAAA,GAAAA,OAAAA,G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,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,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","x_google_ignoreList":[0,1,2]}