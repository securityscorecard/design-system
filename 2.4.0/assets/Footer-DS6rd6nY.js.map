{"version":3,"file":"Footer-DS6rd6nY.js","sources":["../../../node_modules/ramda/es/unfold.js","../../../src/components/_internal/BaseTable/Footer/GoToPage.tsx","../../../src/components/Pagination/PaginationItem.tsx","../../../src/components/Pagination/PageButtons.tsx","../../../src/components/Pagination/Pagination.tsx","../../../src/components/_internal/BaseTable/Footer/Footer.tsx"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Builds a list from a seed value. Accepts an iterator function, which returns\n * either false to stop iteration or an array of length 2 containing the value\n * to add to the resulting list and the seed to be used in the next call to the\n * iterator function.\n *\n * The iterator function receives one argument: *(seed)*.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category List\n * @sig (a -> [b]) -> * -> [b]\n * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n *        either false to quit iteration or an array of length two to proceed. The element\n *        at index 0 of this array will be added to the resulting array, and the element\n *        at index 1 will be passed to the next call to `fn`.\n * @param {*} seed The seed value.\n * @return {Array} The final list.\n * @example\n *\n *      const f = n => n > 50 ? false : [-n, n + 10];\n *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n * @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n */\n\nvar unfold =\n/*#__PURE__*/\n_curry2(function unfold(fn, seed) {\n  var pair = fn(seed);\n  var result = [];\n\n  while (pair && pair.length) {\n    result[result.length] = pair[0];\n    pair = fn(pair[1]);\n  }\n\n  return result;\n});\n\nexport default unfold;","import React, { useRef } from 'react';\nimport styled from 'styled-components';\n\nimport { pxToRem } from '../../../../utils';\nimport { Inline } from '../../../layout';\nimport { Input } from '../../../forms';\nimport { GoToPageProps } from './GoToPage.types';\nimport { SpaceSizes } from '../../../../theme';\nimport { Text } from '../../../Text';\n\nconst SmallInput = styled(Input)`\n  padding: ${pxToRem(8, 16)};\n  width: ${pxToRem(72)};\n  height: ${pxToRem(32)};\n  appearance: textfield;\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    appearance: none;\n    margin: 0;\n  }\n\n  &:focus {\n    padding: ${pxToRem(7, 15)};\n  }\n`;\n\nconst GoToPage = ({ pageCount, onPageChange }: GoToPageProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n  const handlePageChange = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    const { target, key } = e;\n    const { value } = target as HTMLInputElement;\n    const parsedValue = parseInt(value, 10);\n\n    if (key !== 'Enter') return;\n\n    if (parsedValue <= 0) {\n      onPageChange(1);\n      inputRef.current.value = '1';\n    } else if (parsedValue > pageCount) {\n      onPageChange(pageCount);\n      inputRef.current.value = pageCount.toString();\n    } else {\n      onPageChange(parsedValue);\n    }\n  };\n\n  return (\n    <Inline align=\"center\" gap={SpaceSizes.md}>\n      <Text as=\"label\" htmlFor=\"goToPageInput\" variant=\"subtle\">\n        Go to page:\n      </Text>\n      <SmallInput\n        ref={inputRef}\n        id=\"goToPageInput\"\n        placeholder=\"#\"\n        type=\"number\"\n        onKeyDown={handlePageChange}\n      />\n    </Inline>\n  );\n};\n\nexport default GoToPage;\n","import PropTypes from 'prop-types';\nimport styled, { css } from 'styled-components';\n\nimport { getColor, getRadii, pxToRem } from '../../utils';\nimport { Padbox } from '../layout';\nimport { PaginationItemProps } from './Pagination.types';\n\nconst StyledPaginationComponent = styled.button<{\n  $isShrinked: boolean;\n  $isCurrent: boolean;\n}>`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  min-width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  padding: ${pxToRem(5, 6)};\n  margin: ${pxToRem(0, 4)};\n  background: none;\n  border: 1px solid transparent;\n  border-radius: ${getRadii('default')};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: ${getColor('neutral.900')};\n  cursor: pointer;\n\n  &:first-of-type {\n    margin-left: 0;\n  }\n  &:last-of-type {\n    margin-right: 0;\n  }\n  &:disabled {\n    color: ${getColor('neutral.600')};\n    cursor: default;\n  }\n\n  ${({ $isShrinked }) =>\n    $isShrinked &&\n    css`\n      min-width: ${pxToRem(32)};\n    `};\n\n  ${({ $isCurrent }) =>\n    $isCurrent\n      ? css`\n          border-color: ${getColor('neutral.400')};\n          background-color: ${getColor('neutral.300')};\n          font-size: var(--sscds-font-size-elementlabel-md);\n          font-weight: var(--sscds-font-weight-elementlabel-strong);\n          cursor: default;\n        `\n      : css`\n          &:hover {\n            border-color: ${getColor('neutral.400')};\n            background-color: ${getColor('neutral.0')};\n          }\n        `};\n`;\n\nexport const PaginationItem = ({\n  children,\n  isDisabled,\n  isCurrent,\n  isShrinked,\n  onClick,\n  ...props\n}: PaginationItemProps) => {\n  const handleOnClick = () => {\n    if (isCurrent) {\n      return;\n    }\n\n    onClick();\n  };\n  return (\n    <StyledPaginationComponent\n      $isCurrent={isCurrent}\n      $isShrinked={isShrinked}\n      data-testid=\"pagination-item\"\n      disabled={isDisabled}\n      type=\"button\"\n      onClick={handleOnClick}\n      {...props}\n    >\n      {children}\n    </StyledPaginationComponent>\n  );\n};\n\nPaginationItem.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  isDisabled: PropTypes.bool,\n  isCurrent: PropTypes.bool,\n  isShrinked: PropTypes.bool,\n};\n\nexport const PaginationItemElipsis = styled(Padbox).attrs(() => ({\n  children: '...',\n}))`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: ${pxToRem(40)};\n  height: ${pxToRem(32)};\n  font-size: var(--sscds-font-size-elementlabel-sm);\n  line-height: var(--sscds-font-lineheight-elementlabel);\n  color: ${getColor('neutral.600')};\n  margin: ${pxToRem(0, 4)};\n`;\n","import React, { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { unfold } from 'ramda';\n\nimport { PaginationItem, PaginationItemElipsis } from './PaginationItem';\nimport { PageButtonsProps } from './Pagination.types';\n\nconst generatePages = (start: number, end: number): number[] =>\n  unfold((p) => (p > end ? false : [p, p + 1]), start);\n\nexport const calculatePagePositions: (\n  currentPage: number,\n  pageCount: number,\n  positionsCount: number,\n) => {\n  showRightEllipsis: boolean;\n  showLeftEllipsis: boolean;\n  pages: number[];\n} = (currentPage, pageCount, positionsCount) => {\n  // number of fixed positions for edge sections\n  // [POSITIONS - 3 (first+last + elipsis)]\n  const threshold = positionsCount - 3;\n\n  const startPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? 2 // fixed, second page\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - threshold\n      : // this will count positions before current page in middle section\n        // [current page - round up(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage - Math.ceil((positionsCount - 4 - 1) / 2);\n  const endPage =\n    // is at left edge section of pagination\n    currentPage < threshold\n      ? positionsCount - 2\n      : // is at right edge section of pagination\n      currentPage > pageCount - threshold\n      ? pageCount - 1 // fixed, second last page\n      : // this will count positions after current page in middle section\n        // [current page - round down(POSITIONS - 4 (first+last+2 elipsis) - 1 (current page))]\n        currentPage + Math.floor((positionsCount - 4 - 1) / 2);\n\n  const pages = generatePages(startPage, endPage);\n\n  return {\n    showLeftEllipsis: startPage > 2,\n    showRightEllipsis: endPage < pageCount - 1,\n    pages,\n  };\n};\n\nconst formatNumber = (val: number) =>\n  new Intl.NumberFormat('en-US').format(val);\n\nconst PageButtons = ({\n  currentPage,\n  pageCount,\n  onChange,\n  positions,\n  renderItem = PaginationItem,\n}: PageButtonsProps) => {\n  const { pages, showLeftEllipsis, showRightEllipsis } = useMemo(\n    () => calculatePagePositions(currentPage, pageCount, positions),\n    [currentPage, pageCount, positions],\n  );\n\n  if (pageCount <= positions) {\n    return (\n      <>\n        {generatePages(1, pageCount).map((page) =>\n          renderItem({\n            key: `page-${page}`,\n            page,\n            isCurrent: page === currentPage,\n            onClick: () => onChange(page),\n            children: formatNumber(page),\n          }),\n        )}\n      </>\n    );\n  }\n\n  return positions !== 1 ? (\n    <>\n      {renderItem({\n        page: 1,\n        isCurrent: currentPage === 1,\n        onClick: () => onChange(1),\n        children: <>1</>,\n      })}\n      {showLeftEllipsis && <PaginationItemElipsis />}\n      {pages.map((page) =>\n        renderItem({\n          key: page,\n          page,\n          isCurrent: currentPage === page,\n          onClick: () => onChange(page),\n          children: formatNumber(page),\n        }),\n      )}\n      {showRightEllipsis && <PaginationItemElipsis />}\n      {renderItem({\n        page: pageCount,\n        isCurrent: currentPage === pageCount,\n        onClick: () => onChange(pageCount),\n        children: formatNumber(pageCount),\n      })}\n    </>\n  ) : (\n    <>\n      {renderItem({\n        key: currentPage,\n        page: currentPage,\n        isCurrent: true,\n        onClick: () => onChange(currentPage),\n        children: formatNumber(currentPage),\n      })}\n    </>\n  );\n};\n\nPageButtons.propTypes = {\n  currentPage: PropTypes.number.isRequired,\n  pageCount: PropTypes.number.isRequired,\n  positions: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default PageButtons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { SSCIconNames } from '../../theme/icons/icons.enums';\nimport { Icon } from '../Icon';\nimport { PaginationItem } from './PaginationItem';\nimport PageButtons from './PageButtons';\nimport { Inline } from '../layout';\nimport { PaginationProps } from './Pagination.types';\nimport { SpaceSizes } from '../../theme';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst Pagination = ({\n  pageCount,\n  currentPage,\n  onPageChange,\n  pageButtonsCount = 8,\n  renderItem = PaginationItem,\n}: PaginationProps) => (\n  <Inline className={CLX_COMPONENT} gap={SpaceSizes.sm} justify=\"center\">\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Previous page',\n        page: currentPage - 1,\n        isDisabled: currentPage - 1 === 0,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage - 1),\n        children: <Icon name={SSCIconNames.longArrowLeft} />,\n      })}\n    {pageButtonsCount !== 0 && (\n      <PageButtons\n        currentPage={currentPage}\n        pageCount={pageCount}\n        positions={pageButtonsCount}\n        renderItem={renderItem}\n        onChange={onPageChange}\n      />\n    )}\n    {renderItem &&\n      renderItem({\n        'aria-label': 'Next page',\n        page: currentPage + 1,\n        isDisabled: currentPage + 1 > pageCount,\n        isShrinked: true,\n        onClick: () => onPageChange(currentPage + 1),\n        children: <Icon name={SSCIconNames.longArrowRight} />,\n      })}\n  </Inline>\n);\n\nPagination.propTypes = {\n  pageCount: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  onPageChange: PropTypes.func.isRequired,\n  pageButtonsCount: PropTypes.number,\n  renderItem: PropTypes.func,\n};\n\nexport default Pagination;\n","import styled from 'styled-components';\n\nimport { getColor, pxToRem } from '../../../../utils';\nimport { Padbox } from '../../../layout';\nimport { Spinner } from '../../../Spinner';\nimport { FooterProps } from './Footer.types';\nimport GoToPage from './GoToPage';\nimport { Pagination } from '../../../Pagination';\nimport { SpaceSizes } from '../../../../theme';\nimport { PaddingTypes } from '../../../layout/Padbox/Padbox.enums';\n\nconst StyledFooter = styled(Padbox)`\n  display: flex;\n  align-items: center;\n  border-top: 1px solid ${getColor('neutral.300')};\n`;\nconst LoadingContainer = styled.div`\n  padding: ${pxToRem(8, 24, 8, 8)};\n`;\nconst PaginationContainer = styled.div`\n  flex: 1 0 auto;\n`;\n\nconst Footer = ({\n  pageCount,\n  pageButtonsCount,\n  pageIndex,\n  onGotoPage,\n  isDataLoading = false,\n  hasPagination = true,\n}: FooterProps) => {\n  const handlePageChange = (page) => onGotoPage(page - 1);\n\n  return (\n    <StyledFooter\n      as=\"footer\"\n      data-testid=\"footer\"\n      flexDirection=\"row\"\n      paddingSize={SpaceSizes.md}\n      paddingType={PaddingTypes.squish}\n    >\n      <LoadingContainer>\n        {isDataLoading && (\n          <Spinner\n            borderWidth={2}\n            height={16}\n            horizontalMargin={0}\n            verticalMargin={0}\n            width={16}\n            dark\n          />\n        )}\n      </LoadingContainer>\n      {hasPagination && (\n        <>\n          <PaginationContainer>\n            <Pagination\n              currentPage={pageIndex + 1}\n              pageButtonsCount={pageButtonsCount}\n              pageCount={pageCount}\n              onPageChange={handlePageChange}\n            />\n          </PaginationContainer>\n          <GoToPage pageCount={pageCount} onPageChange={handlePageChange} />\n        </>\n      )}\n    </StyledFooter>\n  );\n};\n\nexport default Footer;\n"],"names":["unfold","_curry2","fn","seed","pair","result","cov_2spl1tj7p","path","hash","global","gcv","coverageData","coverage","actualCoverage","SmallInput","s","styled","Input","withConfig","displayName","componentId","pxToRem","GoToPage","pageCount","onPageChange","f","inputRef","useRef","value","target","key","b","parsedValue","current","toString","StyledPaginationComponent","cov_2casjyhfom","button","getRadii","getColor","$isShrinked","css","cov_2lblevg6r2","page","generatePages","start","end","p","startPage","endPage","currentPage","threshold","Math","ceil","positionsCount","floor","onChange","pages","showLeftEllipsis","showRightEllipsis","formatNumber","val","Intl","NumberFormat","format","PageButtons","positions","renderItem","useMemo","calculatePagePositions","isCurrent","onClick","children","isRequired","cov_2emuhujx3","pageButtonsCount","jsxs","Inline","className","CLX_COMPONENT","gap","SpaceSizes","sm","justify","isDisabled","isShrinked","jsx","Icon","name","SSCIconNames","longArrowLeft","number","cov_ib7j68pf0","StyledFooter","Padbox","LoadingContainer","div","PaginationContainer","pageIndex","onGotoPage","isDataLoading","hasPagination","handlePageChange","as","flexDirection","paddingSize","md","paddingType","PaddingTypes","squish"],"mappings":"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A,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,IAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,IAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,KAAA,iBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,YAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,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","x_google_ignoreList":[0]}