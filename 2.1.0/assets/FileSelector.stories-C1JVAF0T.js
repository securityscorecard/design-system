import{j as e}from"./jsx-runtime-Cw0GR0a5.js";import{r as y}from"./index-CTjT7uj6.js";import{s as se,r as ie,k as ae,S as F}from"./space-BY85GhUc.js";import{F as z,a as b}from"./FileSelector-BdQ-YjO9.js";import"./Surface-CvF-S7pg.js";import{P as oe}from"./Padbox-CsIyVOa3.js";import{S as h}from"./Stack-vWwwEz_d.js";import{I as te}from"./Inline-CNottUT6.js";import"./Cluster-BOKWm1iB.js";import{T as a,a as o,b as ce}from"./Text-CQej7zPl.js";import{i as X}from"./isNonEmptyArray-CPhLVV4V.js";import"./index-BRV0Se7Z.js";import"./tslib.es6-BLYux4pC.js";import"./index-C7IrpltL.js";import"./Icon-DSPfH_8v.js";import"./index-DFvsTZbx.js";import"./useLogger-CziYgifR.js";import"./DSProvider-eD554_K8.js";import"./extends-CF3RwP-h.js";import"./index-DIVhMF2i.js";import"./theme-DztFT9GZ.js";import"./colors-DAn332pn.js";import"./Button.enums-P6KVfN9D.js";import"./BaseButton-Bl-0NeNF.js";import"./require-router-link-EREg1Bbm.js";import"./react-router-dom-BO_MR9e_.js";import"./inheritsLoose-B6jfs0L0.js";import"./setPrototypeOf-DgZC2w_0.js";import"./tiny-invariant-CopsF_GD.js";import"./spacing.types-C9Yu1wmA.js";import"./Spinner-b5BYo8Sk.js";import"./prop-Cw0eZkJ_.js";import"./isNotNull-D2Wrs3cn.js";import"./noop-CRTpovv1.js";import"./Button-CgUf0TwU.js";import"./omit-CNqWPtMx.js";import"./flex.types-BrkCVx66.js";import"./isNotEmpty-DmRwknIn.js";import"./isArray-B7wtxCYk.js";import"./isFunction-DKkHXutz.js";import"./pluck-CGJirjHu.js";import"./both-CLVeTvyf.js";const Xe={title:"components/FileSelector",component:z,argTypes:{accept:{description:"Accepted file mime types (https://www.iana.org/assignments/media-types/media-types.xhtml)"},maxFiles:{description:"The maximum number of dropped files"},onFileDialogCancel:{description:"Callback fired when file dialog is canceled"},onFileDialogOpen:{description:"Callback fired when dialog is opened"},validator:{description:"Custom validation function. It must return null if there are no errors."}}},i=r=>e.jsx(z,{...r}),c=i.bind({});c.parameters={screenshot:{skip:!0}};c.parameters={screenshot:{skip:!0}};const p=i.bind({});p.args={size:b.fill};const m=i.bind({});m.args={size:b.compact};const n=i.bind({});n.args={size:b.area,width:400,height:300};const d=i.bind({});d.args={hasError:!0};const u=i.bind({});u.args={isDisabled:!0};const g=i.bind({});g.args={isClickDisabled:!0,dropLabel:"Drop files here"};const S=i.bind({});S.args={isDragDisabled:!0};const j=r=>r*1024,le=r=>Math.floor(r/1024),pe=se(oe).withConfig({displayName:"FileSelectorstories__FileWrapper",componentId:"sc-1qmhova-0"})(["border-radius:",";border:1px solid;border-color:",";"],ie("default"),({$hasError:r,theme:t})=>ae(r?"error.500":"success.500",{theme:t})),T=({file:r,errors:t=[]})=>e.jsxs(pe,{$hasError:X(t),paddingSize:F.sm,children:[e.jsxs(te,{gap:F.sm,justify:"space-between",children:[e.jsx(a,{size:o.md,isBold:!0,children:r.name}),e.jsxs(a,{size:o.md,children:[le(r.size)," kB"]})]}),e.jsx(h,{children:t.map(x=>e.jsx(a,{size:o.sm,variant:ce.danger,children:x.message},x.code))})]}),l=()=>{const[r,t]=y.useState([]),[x,Z]=y.useState([]),ee=(s,re)=>{t(f=>[...f,...re]),Z(f=>[...f,...s])};return e.jsxs(h,{gap:F.md,children:[e.jsxs(h,{as:"ul",gap:F.xs,children:[e.jsx(a,{as:"li",size:o.md,children:"Accepts only PNG files"}),e.jsx(a,{as:"li",size:o.md,children:"File size has to be at least 100KB"}),e.jsx(a,{as:"li",size:o.md,children:"Maximal file size is 400KB"}),e.jsx(a,{as:"li",size:o.md,children:"You can drop up to 2 files at once"})]}),e.jsx(z,{accept:["image/png"],hasError:X(r),maxFiles:2,maxFileSize:j(400),minFileSize:j(100),multiple:!0,onFilesDrop:ee}),x.map(s=>e.jsx(T,{file:s},`${s.name}-accepted`)),r.map(s=>e.jsx(T,{errors:s.errors,file:s.file},`${s.file.name}-rejected`))]})};l.parameters={screenshot:{skip:!0}};l.__docgenInfo={description:"",methods:[],displayName:"Example"};var k,E,D;c.parameters={...c.parameters,docs:{...(k=c.parameters)==null?void 0:k.docs,source:{originalSource:"args => <FileSelector {...args} />",...(D=(E=c.parameters)==null?void 0:E.docs)==null?void 0:D.source}}};var C,B,O;p.parameters={...p.parameters,docs:{...(C=p.parameters)==null?void 0:C.docs,source:{originalSource:"args => <FileSelector {...args} />",...(O=(B=p.parameters)==null?void 0:B.docs)==null?void 0:O.source}}};var v,w,A;m.parameters={...m.parameters,docs:{...(v=m.parameters)==null?void 0:v.docs,source:{originalSource:"args => <FileSelector {...args} />",...(A=(w=m.parameters)==null?void 0:w.docs)==null?void 0:A.source}}};var _,N,P;n.parameters={...n.parameters,docs:{...(_=n.parameters)==null?void 0:_.docs,source:{originalSource:"args => <FileSelector {...args} />",...(P=(N=n.parameters)==null?void 0:N.docs)==null?void 0:P.source}}};var I,K,$;d.parameters={...d.parameters,docs:{...(I=d.parameters)==null?void 0:I.docs,source:{originalSource:"args => <FileSelector {...args} />",...($=(K=d.parameters)==null?void 0:K.docs)==null?void 0:$.source}}};var W,M,G;u.parameters={...u.parameters,docs:{...(W=u.parameters)==null?void 0:W.docs,source:{originalSource:"args => <FileSelector {...args} />",...(G=(M=u.parameters)==null?void 0:M.docs)==null?void 0:G.source}}};var R,Y,q;g.parameters={...g.parameters,docs:{...(R=g.parameters)==null?void 0:R.docs,source:{originalSource:"args => <FileSelector {...args} />",...(q=(Y=g.parameters)==null?void 0:Y.docs)==null?void 0:q.source}}};var L,V,H;S.parameters={...S.parameters,docs:{...(L=S.parameters)==null?void 0:L.docs,source:{originalSource:"args => <FileSelector {...args} />",...(H=(V=S.parameters)==null?void 0:V.docs)==null?void 0:H.source}}};var J,Q,U;l.parameters={...l.parameters,docs:{...(J=l.parameters)==null?void 0:J.docs,source:{originalSource:`() => {
  const [errors, setErrors] = useState([]);
  const [files, setFiles] = useState([]);
  const handleOnDrop = (acceptedFiles, rejectedFiles) => {
    setErrors(prev => [...prev, ...rejectedFiles]);
    setFiles(prev => [...prev, ...acceptedFiles]);
  };
  return <Stack gap={SpaceSizes.md}>
      <Stack as="ul" gap={SpaceSizes.xs}>
        <Text as="li" size={TextSizes.md}>
          Accepts only PNG files
        </Text>
        <Text as="li" size={TextSizes.md}>
          File size has to be at least 100KB
        </Text>
        <Text as="li" size={TextSizes.md}>
          Maximal file size is 400KB
        </Text>
        <Text as="li" size={TextSizes.md}>
          You can drop up to 2 files at once
        </Text>
      </Stack>
      <FileSelector accept={['image/png']} hasError={isNonEmptyArray(errors)} maxFiles={2} maxFileSize={kbToBytes(400)} minFileSize={kbToBytes(100)} multiple onFilesDrop={handleOnDrop} />
      {files.map(file => <File key={\`\${file.name}-accepted\`} file={file} />)}
      {errors.map(error => <File key={\`\${error.file.name}-rejected\`} errors={error.errors} file={error.file} />)}
    </Stack>;
}`,...(U=(Q=l.parameters)==null?void 0:Q.docs)==null?void 0:U.source}}};const Ze=["Playground","FillSize","CompactSize","AreaSize","WithError","Disabled","OnlyDrag","OnlyClick","Example"];export{n as AreaSize,m as CompactSize,u as Disabled,l as Example,p as FillSize,S as OnlyClick,g as OnlyDrag,c as Playground,d as WithError,Ze as __namedExportsOrder,Xe as default};
