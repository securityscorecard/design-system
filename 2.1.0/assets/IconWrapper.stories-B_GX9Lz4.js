import{j as s}from"./jsx-runtime-Nms4Y4qS.js";import{I as e}from"./IconWrapper-ONydH7kY.js";import"./Surface-Cs7tekjF.js";import"./Padbox-BrtZqAZY.js";import"./Stack-B_iJg7G-.js";import{I as x}from"./Inline-Cavohj9s.js";import"./Cluster-f2eLrBJy.js";import{S as u}from"./Icon-B7DxM8PH.js";import{g as y}from"./storybook-DyKsesZd.js";import"./index-BwDkhjyp.js";import"./_commonjsHelpers-BosuxZz1.js";import"./space-B9R18Mwn.js";import"./index-Dk74W0Oi.js";import"./index-CVyJwDg7.js";import"./flex.types-q2tZp175.js";import"./useLogger-D4I9buOf.js";import"./DSProvider-DzIDhM_J.js";import"./extends-CF3RwP-h.js";import"./index-DhoXBIRq.js";import"./theme-BW2FcxSF.js";import"./colors-DAn332pn.js";import"./prop-3Huj0iT1.js";import"./index-DFvsTZbx.js";import"./zipObj-D5WCOpKt.js";const G={title:"components/IconWrapper",component:e,argTypes:{name:{...y("select",u)}}},a=r=>s.jsx(e,{...r});a.args={name:"cog"};a.parameters={screenshot:{skip:!0}};const o=r=>s.jsxs(x,{gap:"md",children:[s.jsx(e,{...r,size:"xs",type:"ssc"}),s.jsx(e,{...r,size:"sm",type:"ssc"}),s.jsx(e,{...r,size:"md",type:"ssc"}),s.jsx(e,{...r,size:"lg",type:"ssc"}),s.jsx(e,{...r,size:"xl",type:"ssc"})]});o.args=a.args;const p=r=>s.jsxs(x,{gap:"md",children:[s.jsx(e,{...r,variant:"default"}),s.jsx(e,{...r,variant:"subtle"}),s.jsx(e,{...r,variant:"strong"})]});p.args={...a.args,size:"xl",type:"ssc"};a.__docgenInfo={description:"",methods:[],displayName:"Playground"};o.__docgenInfo={description:"",methods:[],displayName:"Sizes"};p.__docgenInfo={description:"",methods:[],displayName:"Variants"};var t,n,i;a.parameters={...a.parameters,docs:{...(t=a.parameters)==null?void 0:t.docs,source:{originalSource:"args => <IconWrapper {...args} />",...(i=(n=a.parameters)==null?void 0:n.docs)==null?void 0:i.source}}};var m,c,d;o.parameters={...o.parameters,docs:{...(m=o.parameters)==null?void 0:m.docs,source:{originalSource:`args => <Inline gap="md">
    <IconWrapper {...args} size="xs" type="ssc" />
    <IconWrapper {...args} size="sm" type="ssc" />
    <IconWrapper {...args} size="md" type="ssc" />
    <IconWrapper {...args} size="lg" type="ssc" />
    <IconWrapper {...args} size="xl" type="ssc" />
  </Inline>`,...(d=(c=o.parameters)==null?void 0:c.docs)==null?void 0:d.source}}};var g,l,I;p.parameters={...p.parameters,docs:{...(g=p.parameters)==null?void 0:g.docs,source:{originalSource:`args => <Inline gap="md">
    <IconWrapper {...args} variant="default" />
    <IconWrapper {...args} variant="subtle" />
    <IconWrapper {...args} variant="strong" />
  </Inline>`,...(I=(l=p.parameters)==null?void 0:l.docs)==null?void 0:I.source}}};const H=["Playground","Sizes","Variants"];export{a as Playground,o as Sizes,p as Variants,H as __namedExportsOrder,G as default};
