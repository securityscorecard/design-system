{"version":3,"file":"isNotEmpty-DRLlCpEq.js","sources":["../../../node_modules/ramda/es/and.js","../../../node_modules/ramda/es/both.js","../../../node_modules/ramda-adjunct/es/isNotEmpty.js"],"sourcesContent":["import _curry2 from \"./internal/_curry2.js\";\n/**\n * Returns the first argument if it is falsy, otherwise the second argument.\n * Acts as the boolean `and` statement if both inputs are `Boolean`s.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {Any} a\n * @param {Any} b\n * @return {Any}\n * @see R.both, R.or\n * @example\n *\n *      R.and(true, true); //=> true\n *      R.and(true, false); //=> false\n *      R.and(false, true); //=> false\n *      R.and(false, false); //=> false\n */\n\nvar and =\n/*#__PURE__*/\n_curry2(function and(a, b) {\n  return a && b;\n});\n\nexport default and;","import _curry2 from \"./internal/_curry2.js\";\nimport _isFunction from \"./internal/_isFunction.js\";\nimport and from \"./and.js\";\nimport lift from \"./lift.js\";\n/**\n * A function which calls the two provided functions and returns the `&&`\n * of the results.\n * It returns the result of the first function if it is false-y and the result\n * of the second function otherwise. Note that this is short-circuited,\n * meaning that the second function will not be invoked if the first returns a\n * false-y value.\n *\n * In addition to functions, `R.both` also accepts any fantasy-land compatible\n * applicative functor.\n *\n * @func\n * @memberOf R\n * @since v0.12.0\n * @category Logic\n * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n * @param {Function} f A predicate\n * @param {Function} g Another predicate\n * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n * @see R.either, R.and\n * @example\n *\n *      const gt10 = R.gt(R.__, 10)\n *      const lt20 = R.lt(R.__, 20)\n *      const f = R.both(gt10, lt20);\n *      f(15); //=> true\n *      f(30); //=> false\n *\n *      R.both(Maybe.Just(false), Maybe.Just(55)); // => Maybe.Just(false)\n *      R.both([false, false, 'a'], [11]); //=> [false, false, 11]\n */\n\nvar both =\n/*#__PURE__*/\n_curry2(function both(f, g) {\n  return _isFunction(f) ? function _both() {\n    return f.apply(this, arguments) && g.apply(this, arguments);\n  } : lift(and)(f, g);\n});\n\nexport default both;","import { complement, isEmpty } from 'ramda';\n\n/**\n * Returns true if the given value is not its type's empty value; `false` otherwise.\n *\n * @func isNotEmpty\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/0.4.0|v0.4.0}\n * @category Logic\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link http://ramdajs.com/docs/#isEmpty|R.isEmpty}\n * @example\n *\n * RA.isNotEmpty([1, 2, 3]); //=> true\n * RA.isNotEmpty([]); //=> false\n * RA.isNotEmpty(''); //=> false\n * RA.isNotEmpty(null); //=> true\n * RA.isNotEmpty(undefined): //=> true\n * RA.isNotEmpty({}); //=> false\n * RA.isNotEmpty({length: 0}); //=> true\n */\nvar isNotEmpty = complement(isEmpty);\nexport default isNotEmpty;"],"names":["and","_curry2","a","b","both","f","g","_isFunction","lift","isNotEmpty","complement","isEmpty"],"mappings":"gJAsBA,IAAIA,EAEJC,EAAQ,SAAaC,EAAGC,EAAG,CACzB,OAAOD,GAAKC,CACd,CAAC,ECUGC,EAEJH,EAAQ,SAAcI,EAAGC,EAAG,CAC1B,OAAOC,EAAYF,CAAC,EAAI,UAAiB,CACvC,OAAOA,EAAE,MAAM,KAAM,SAAS,GAAKC,EAAE,MAAM,KAAM,SAAS,CAC3D,EAAGE,EAAKR,CAAG,EAAEK,EAAGC,CAAC,CACpB,CAAC,ECnBGG,EAAaC,EAAWC,CAAO","x_google_ignoreList":[0,1,2]}