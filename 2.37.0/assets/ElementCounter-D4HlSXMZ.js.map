{"version":3,"file":"ElementCounter-D4HlSXMZ.js","sources":["../../../node_modules/ramda-adjunct/es/isPositive.js","../../../src/components/Datatable/BatchModule/ElementCounter/ElementCounter.tsx"],"sourcesContent":["import { both, lt } from 'ramda';\nimport isNumber from './isNumber';\n\n/**\n * Checks if value is a positive `Number` primitive or object. Zero is not considered positive.\n *\n * @func isPositive\n * @memberOf RA\n * @since {@link https://char0n.github.io/ramda-adjunct/1.15.0|v1.15.0}\n * @category Type\n * @sig * -> Boolean\n * @param {*} val The value to test\n * @return {boolean}\n * @see {@link RA.isNegative|isNegative}\n * @example\n *\n * RA.isPositive(1); // => true\n * RA.isPositive(Number.MAX_VALUE); // => true\n * RA.isPositive(-Infinity); // => false\n * RA.isPositive(NaN); // => false\n * RA.isPositive('5'); // => false\n */\nvar isPositive = both(isNumber, lt(0));\nexport default isPositive;","import { useEffect, useState } from 'react';\nimport { isPositive } from 'ramda-adjunct';\nimport styled from 'styled-components';\nimport { TFunction } from 'i18next';\n\nimport { Text } from '../../../Text';\nimport { abbreviateNumber, getColor, getSpace } from '../../../../utils';\nimport { DropdownMenu } from '../../../_internal/BaseDropdownMenu';\nimport { Icon } from '../../../Icon';\nimport { SSCIconNames } from '../../../../theme/icons/icons.enums';\nimport { DatatableStore } from '../../Datatable.store';\nimport { ElementCounterProps } from './ElementCounter.types';\nimport { Inline } from '../../../layout';\nimport { SpaceSizes } from '../../../../theme';\nimport { useSafeTranslation } from '../../../../hooks/useSafeTranslation';\n\nconst SelectionButton = styled.button`\n  display: inline-flex;\n  align-self: center;\n  justify-content: center;\n  background: transparent;\n  border: none;\n  cursor: pointer;\n  height: 100%;\n  padding: ${getSpace(SpaceSizes.xs)};\n  font-size: var(--sscds-font-size-elementlabel-md);\n  color: ${getColor('neutral.800')};\n\n  &:hover {\n    color: ${getColor('primary.500')};\n  }\n`;\n\nexport const getCounterContent = (\n  totalLength: number,\n  t: TFunction<['sscds'], undefined>,\n  selectedLength = 0,\n) => (\n  <span aria-hidden=\"true\" data-testid=\"counter-content\">\n    {isPositive(selectedLength) && isPositive(totalLength)\n      ? t('sscds|datatable.elementCounter.selectedOf', {\n          selectedLength: abbreviateNumber(selectedLength),\n          totalLength: abbreviateNumber(totalLength),\n        })\n      : isPositive(totalLength)\n      ? abbreviateNumber(totalLength)\n      : t('sscds|datatable.elementCounter.noData')}\n  </span>\n);\n\nfunction ElementCounterWrapper({ children, ...props }) {\n  return (\n    <Inline align=\"center\" gap={SpaceSizes.xs} {...props}>\n      {children}\n    </Inline>\n  );\n}\nElementCounterWrapper.displayName = 'ElementCounterWrapper';\n\nconst ElementCounter = ({\n  dataSize,\n  hasSelection,\n  hasOnlyPerPageSelection,\n}: ElementCounterProps) => {\n  const { t } = useSafeTranslation();\n  const { selectedIds, hasExclusiveSelection } = DatatableStore.useState(\n    (s) => ({\n      selectedIds: s.selectedIds,\n      hasExclusiveSelection: s.hasExclusiveSelection,\n    }),\n  );\n\n  const [localSelectedLength, setLocalSelectedLength] = useState(\n    selectedIds.length || 0,\n  );\n\n  useEffect(() => {\n    setLocalSelectedLength(selectedIds.length);\n  }, [selectedIds]);\n\n  const computedSelectedLength = hasExclusiveSelection\n    ? dataSize - localSelectedLength\n    : localSelectedLength;\n\n  const content = getCounterContent(dataSize, t, computedSelectedLength);\n\n  const handleSelectAllClick = () => {\n    setLocalSelectedLength(0);\n    DatatableStore.update((s) => {\n      s.hasExclusiveSelection = true;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  const handleSelectNoneClick = () => {\n    setLocalSelectedLength(0);\n    DatatableStore.update((s) => {\n      s.hasExclusiveSelection = false;\n      s.shouldResetSelectedRows = true;\n    });\n  };\n\n  if (!hasSelection) {\n    return (\n      <ElementCounterWrapper>\n        <Text size=\"md\" variant=\"secondary\">\n          {content}\n        </Text>\n      </ElementCounterWrapper>\n    );\n  }\n\n  if (hasOnlyPerPageSelection) {\n    return (\n      <ElementCounterWrapper>\n        <Text size=\"md\" variant=\"secondary\">\n          {content}\n        </Text>\n        {localSelectedLength > 0 && (\n          <SelectionButton\n            aria-label=\"Select None\"\n            title={t('sscds|datatable.selection.selectNone')}\n            type=\"button\"\n            onClick={handleSelectNoneClick}\n          >\n            <Icon name={SSCIconNames.times} size=\"sm\" />\n          </SelectionButton>\n        )}\n      </ElementCounterWrapper>\n    );\n  }\n\n  return (\n    <ElementCounterWrapper>\n      <Text size=\"md\" variant=\"secondary\">\n        {content}\n      </Text>\n      {dataSize > 0 && (\n        <DropdownMenu\n          actions={[\n            {\n              name: 'select-all',\n              label: t('sscds|datatable.selection.selectAll'),\n              onClick: handleSelectAllClick,\n            },\n            {\n              name: 'select-none',\n              label: t('sscds|datatable.selection.selectNone'),\n              onClick: handleSelectNoneClick,\n            },\n          ]}\n          paneWidth={140}\n        >\n          <SelectionButton\n            aria-label=\"Selection options\"\n            onClick={(e) => {\n              e.preventDefault();\n            }}\n          >\n            <Icon\n              data-testid=\"selection-dropdown\"\n              name={SSCIconNames.angleDown}\n              size=\"sm\"\n            />\n          </SelectionButton>\n        </DropdownMenu>\n      )}\n    </ElementCounterWrapper>\n  );\n};\n\nexport default ElementCounter;\n"],"names":["isPositive","both","isNumber","lt","cov_ikh9l5e7t","path","hash","global","gcv","coverageData","coverage","actualCoverage","SelectionButton","s","styled","button","withConfig","displayName","componentId","getSpace","SpaceSizes","xs","getColor","getCounterContent","totalLength","t","selectedLength","b","f","jsx","children","abbreviateNumber","selectedIds","setLocalSelectedLength","DatatableStore","hasOnlyPerPageSelection","useSafeTranslation","hasExclusiveSelection","useState","localSelectedLength","length","useEffect","computedSelectedLength","dataSize","content","handleSelectAllClick"],"mappings":"yvBAsBA,IAAIA,EAAaC,EAAKC,EAAUC,EAAG,CAAC,CAAC,ECNA,SAAAC,GAAA,CAAA,IAAAC,EAAA,uHAAAC,EAAA,2CAAAC,EAAA,OAAAC,EAAA,eAAAC,EAAA,CAAA,KAAA,uHAAA,aAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,wBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,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","x_google_ignoreList":[0]}