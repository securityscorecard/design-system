import{j as l}from"./jsx-runtime-Cw0GR0a5.js";import{R as i}from"./index-CTjT7uj6.js";import{s as d,B as o,q as a,j as x}from"./space-1LtLrmuu.js";import{P as s}from"./index-BRV0Se7Z.js";import{c as I}from"./index-C7IrpltL.js";import{I as v}from"./Input-CflEDIf9.js";import{P as y}from"./Password-DMckXrPE.js";import{S as b}from"./Select-D2oYJWhQ.js";import"./CreatableSelect-DuZZJGpq.js";import{I as u}from"./Icon-4JNizDXH.js";import"./Surface-DpLLkhSd.js";import{P as g}from"./Padbox-DKEfmyAv.js";import"./Stack-D3Wl5zWT.js";import{I as _}from"./Inline-BUcOfxrg.js";import"./Cluster-DAeUfwZi.js";import{B as C}from"./Button-vDRI25at.js";import{S as G}from"./SearchBar-CgCaR-wq.js";import{u as N}from"./useLogger-Cd66DVRc.js";import{p}from"./prop-DG2n0FAQ.js";const P=d(_).withConfig({displayName:"InputGroup__InputGroupContainer",componentId:"sc-18cez2f-0"})(["border:"," solid ",";border-radius:",";.ssc__control{border:0px;box-shadow:none;}& > &{border:none;border-radius:0px;}& > *,input:not([id^='react-select']){border:none;box-shadow:none;border-radius:0px;}& > *{","}& > *:first-child{border-radius:"," 0 0 "," !important;}& > *:last-child,& > *:last-child input[type='password'],& > *:last-child input[type='search']{border-right:0px !important;border-radius:0 "," "," 0 !important;}"],o("borderWidth"),o("borderColor"),a("default"),e=>e.hasDivider&&`border-right: ${o("borderWidth")(e)} solid ${o("borderColor")(e)};`,a("default"),a("default"),a("default"),a("default")),S=d(g).withConfig({displayName:"InputGroup__IconContainer",componentId:"sc-18cez2f-1"})(["display:flex;align-items:center;"]),t=({children:e,hasDivider:m,className:c,...n})=>{const{error:f}=N("InputGroup"),h=[b,v,u,C,y,t,G];return i.Children.forEach(e,r=>{h.includes(p("type",r))||f("Only Select, Input, InputGroup, Icon, Button, SearchBar and Password are valid childs of InputGroup")}),l.jsx(P,{className:I(x,c),hasDivider:m,...n,stretch:n.stretch||"start",children:i.Children.map(e,r=>p("type",r)===u?l.jsx(S,{paddingSize:"sm",children:r}):r)})};t.propTypes={hasDivider:s.bool,className:s.string};const X=t;try{t.displayName="InputGroup",t.__docgenInfo={description:"",displayName:"InputGroup",props:{hasDivider:{defaultValue:null,description:"",name:"hasDivider",required:!1,type:{name:"boolean"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},gap:{defaultValue:null,description:"Whitespace between each child of the Inline",name:"gap",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"xxs"'},{value:'"xs"'},{value:'"sm"'},{value:'"md"'},{value:'"mdPlus"'},{value:'"lg"'},{value:'"lgPlus"'},{value:'"xl"'},{value:'"xlPlus"'},{value:'"xxl"'},{value:'"half-x"'},{value:'"1x"'},{value:'"2x"'},{value:'"3x"'},{value:'"4x"'},{value:'"6x"'},{value:'"8x"'},{value:'"12x"'},{value:'"16x"'},{value:'"24x"'},{value:'"32x"'}]}},justify:{defaultValue:null,description:"Horizontal alignment of elements inside Inline",name:"justify",required:!1,type:{name:"JustifyContent"}},align:{defaultValue:null,description:"Vertical alignment of elements inside Inline",name:"align",required:!1,type:{name:"AlignItems"}},stretch:{defaultValue:null,description:"Child or children to fill available space",name:"stretch",required:!1,type:{name:"number | Stretch"}}}}}catch{}export{X as I};
