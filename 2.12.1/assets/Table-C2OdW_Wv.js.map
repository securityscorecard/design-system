{"version":3,"file":"Table-C2OdW_Wv.js","sources":["../../src/components/Table/Table.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport {\n  CellProps,\n  Column,\n  useFlexLayout,\n  usePagination,\n  useSortBy,\n  useTable,\n} from 'react-table';\nimport { prop, F as stubFalse } from 'ramda';\nimport { isNonEmptyArray, isNotUndefined, isString, noop } from 'ramda-adjunct';\n\nimport {\n  BaseTableAndLoadingOverlayContainer,\n  BaseTableContainer,\n  Body,\n  CellRenderer,\n  Footer,\n  Head,\n  LoadingNoData,\n  NoData,\n  StyledBaseTable,\n  getActionsColumn,\n} from '../_internal/BaseTable';\nimport { getColor, getRadii } from '../../utils';\nimport { SpaceSizes } from '../../theme';\nimport { Padbox } from '../layout';\nimport { TableProps } from './Table.types';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nconst useIsMountRender = (): boolean => {\n  const isMountRef = useRef(true);\n  useEffect(() => {\n    isMountRef.current = false;\n  }, []);\n  return isMountRef.current;\n};\n\nconst NoDataContainer = styled(Padbox)`\n  background: ${getColor('neutral.0')};\n`;\n\nconst TableWrapper = styled.div`\n  border: 1px solid ${getColor('neutral.300')};\n  border-top-width: 0;\n  background: ${getColor('neutral.0')};\n  border-radius: ${getRadii('default')};\n`;\n\nconst renderDefaultCell = <D extends Record<string, unknown>>(\n  props: CellProps<D>,\n) => <CellRenderer<D> {...props} />;\n\nfunction Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  dataSize,\n  NoDataComponent = NoData,\n  hasPagination = true,\n  defaultPageSize = 20,\n  hasSorting = true,\n  defaultSortBy = [],\n  defaultPageIndex = 0,\n  isDataLoading = false,\n  onPageChange = noop,\n  onSortChange = noop,\n  rowActions = [],\n  dataPrimaryKey,\n}: TableProps<D>) {\n  const defaultColumn = useMemo<Partial<Column<D>>>(\n    () => ({\n      minWidth: 40,\n      width: 150,\n      maxWidth: 400,\n      nullCondition: stubFalse,\n      Cell: (props: CellProps<D>) => renderDefaultCell<D>(props),\n      cellType: 'text',\n    }),\n    [],\n  );\n\n  // TABLE INITIALIZATION\n  const {\n    getTableProps,\n    getTableBodyProps,\n    gotoPage,\n    headerGroups,\n    page,\n    prepareRow,\n    pageCount,\n    state: { pageIndex, sortBy },\n  } = useTable<D>(\n    {\n      columns,\n      data,\n      defaultColumn,\n      initialState: {\n        // PAGINATION\n        pageSize: defaultPageSize,\n        pageIndex: defaultPageIndex,\n        // SORTING\n        sortBy: defaultSortBy,\n      },\n      // PAGINATION\n      pageCount: Math.ceil(dataSize / defaultPageSize),\n      autoResetPage: false,\n      // SORTING\n      disableSortBy: !hasSorting,\n      autoResetSortBy: false,\n      manualPagination: false,\n      ...(isNotUndefined(dataPrimaryKey) && {\n        getRowId: isString(dataPrimaryKey)\n          ? prop(dataPrimaryKey)\n          : dataPrimaryKey, // Set row id for selection\n      }),\n      // CUSTOM PROPS\n      rowActions,\n    },\n    useSortBy,\n    usePagination,\n    useFlexLayout,\n    (hooks) => {\n      hooks.visibleColumns.push((visibleColumns) => [\n        ...visibleColumns,\n        ...(isNonEmptyArray(rowActions) ? [getActionsColumn<D>()] : []),\n      ]);\n    },\n  );\n\n  const isMountRender = useIsMountRender();\n  useEffect(() => {\n    if (!isMountRender) {\n      onSortChange(sortBy);\n    }\n  }, [sortBy, isMountRender, onSortChange]);\n\n  const changePage = useCallback(\n    (pageNumber) => {\n      onPageChange(pageNumber + 1);\n      gotoPage(pageNumber);\n    },\n    [onPageChange, gotoPage],\n  );\n\n  return (\n    <TableWrapper className={CLX_COMPONENT}>\n      <BaseTableAndLoadingOverlayContainer>\n        <BaseTableContainer tabIndex={0}>\n          <StyledBaseTable {...getTableProps()}>\n            <Head headerGroups={headerGroups} />\n            <Body<D>\n              prepareRow={prepareRow}\n              rows={page}\n              {...getTableBodyProps()}\n            />\n          </StyledBaseTable>\n        </BaseTableContainer>\n      </BaseTableAndLoadingOverlayContainer>\n      {dataSize === 0 ? (\n        <NoDataContainer paddingSize={SpaceSizes.xl}>\n          {isDataLoading ? <LoadingNoData /> : <NoDataComponent />}\n        </NoDataContainer>\n      ) : pageCount !== 1 ? (\n        <Footer\n          hasPagination={hasPagination && dataSize > 0}\n          isDataLoading={isDataLoading}\n          pageCount={pageCount}\n          pageIndex={pageIndex}\n          onGotoPage={changePage}\n        />\n      ) : null}\n    </TableWrapper>\n  );\n}\n\nTable.displayName = 'Table';\n\nexport default Table;\n"],"names":["data","dataSize","NoData","hasPagination","isMountRef","cov_s0wiyzkwq","s","useRef","defaultPageSize","f","current","defaultSortBy","noop","getColor","defaultColumn","stubFalse","renderDefaultCell","props","getTableProps","getTableBodyProps","gotoPage","headerGroups","page","prepareRow","pageCount","pageIndex","sortBy","b","defaultPageIndex","columns","dataPrimaryKey","width","maxWidth","Math","Cell","cellType","disableSortBy","autoResetSortBy","rowActions","useSortBy","hooks","useEffect","useTable","onSortChange","changePage","onPageChange","ceil","autoResetPage","displayName","hasSorting","Table"],"mappings":"iwXAwDEA,EAAAA,EAAAA,EACAC,CAAAA,IAAAA,MACkBC,GAAAA,IAAAA,CAAAA,EAAAA,EAAAA,EAClBC,CAAAA,IAAAA,MAAgBC,GAAAC,EAAA,EAAAC,EAAA,CAAA,IAAAC,EAAA,OAAA,EAAA,GAAAF,OAAAA,EAAA,EAAAC,EAChBE,CAAAA,IAAAA,EAAAA,UAAkB,IAAA,CAAAH,EAAA,EAAAI,EAAAJ,CAAAA,IAAAA,EAAA,EAAAC,EAAA,CAAA,IACLF,EAAAM,QAAA,EACbC,iBACmBP,EAAAM,OAAA,EAGJE,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,WAAAA,CAAAA,YAAAA,yBAAAA,YACAC,cAAAA,CAAAA,EAAAA,CAAAA,cAAAA,GAAAA,EAAAA,EAAA,WAAA,CAAA,GAGTC,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,gEAEQD,cAAAA,CAAAA,EAAAA,CAAAA,oBAAAA,kCAAAA,kBAAAA,GAAAA,EAAAA,EAAA,aAAA,EAEAA,EAAA,WAAA,EACKE,EAAAA,SAAAA,CAAAA,GAAAA,EAAAA,EAAAA,EAEL,CAAA,IAAA,MAEZC,GAIIC,IACJC,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,IAAAA,GAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GACAC,SACAC,EAAAA,CACAC,QAAAA,EACAC,KAAAA,EACAC,SAAAA,EACAC,gBAAAA,GAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,cAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IACO,IAAEC,gBAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAAWC,WAAAA,GAAAA,IAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,IAAOf,cAAAA,GAAAN,EAAAsB,EAAAA,EAAA,CAAA,EAAA,CAAA,IAAA,CAAA,GAC7BC,iBAAAA,GAAAvB,EAAA,EAAAsB,EAAA,CAAA,EAAA,CAAA,IACE,GACEE,cAAAA,GAAAA,IAAAA,UAAAA,IACA7B,aAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GACAc,aAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IAAAA,GAAAA,WAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,CAAAA,IACc,CAAA,GAAAgB,eAAAA,CAEFtB,EAAAA,CAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,MACCoB,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,QAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAAAA,EAEXF,EAAAA,IAAAA,CAAAA,SAAQf,GACVoB,MAAA,IAAAC,SAAA,IAEWC,cAAUhC,EACNiC,KAAAjB,IAAAZ,EAAA,EAAAI,EAAA,CAAA,IAAAJ,EAAAC,EAAAA,QAAAU,GAAAC,CAAA,GAAAkB,SAAA,MAEfC,GACAC,CAAiB,CAAA,GAKXP,CACNZ,cAAAA,EAAAC,kBAAAA,EAEAmB,SAAAA,EAEFC,aAAAA,EAIEC,KAAAA,EAKJjB,WAAAA,EAEAC,UAAAA,EACAiB,MAAAA,CAAgBhB,UAAAA,EAAAC,OAAAA,CAAA,CACd,GAAArB,EAAA,EAAAC,EAAAoC,EAAAA,IAAAA,EAAA,SACEC,CACFd,QAAAA,EACEH,KAAAA,EAEEkB,cAAAA,EAEFC,cAGazB,SAAAA,EAIfK,UAAAG,EAIQF,OAAAf,CACA,EAQQa,UAAAS,KACXa,KAAA7C,EAAAO,CAAA,EAYLuC,cAAA,GAIEC,cAAc,CAAAC,EAELC,gBAAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}