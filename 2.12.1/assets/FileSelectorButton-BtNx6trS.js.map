{"version":3,"file":"FileSelectorButton-BtNx6trS.js","sources":["../../src/components/FileSelectorButton/FileSelectorButton.tsx"],"sourcesContent":["import type { ComponentPropsWithoutRef } from 'react';\nimport { type DropzoneOptions, useDropzone } from 'react-dropzone';\nimport cls from 'classnames';\n\nimport Button from '../ButtonV2/Button';\nimport { CLX_COMPONENT } from '../../theme/constants';\n\nexport type FileSelectorButtonProps = Omit<\n  DropzoneOptions,\n  | 'disabled'\n  | 'preventDropOnDocument'\n  | 'noClick'\n  | 'noDrag'\n  | 'noKeyboard'\n  | 'noDragEventsBubbling'\n  | 'getFilesFromEvent'\n  | 'useFsAccessApi'\n  | 'minSize'\n  | 'maxSize'\n  | 'onDrop'\n  | 'onDropAccepted'\n  | 'onDropRejected'\n> & {\n  /** File selector button label */\n  label?: string;\n  /** Expands button to full width of the parrent component */\n  isExpanded?: boolean;\n  /** Disables the FileSelector */\n  isDisabled?: boolean;\n  /** Minimal file size in bytes */\n  minFileSize?: number;\n  /** Maximal file size in bytes */\n  maxFileSize?: number;\n  /** Callback fired on file drop or select through native dialog */\n  onFilesDrop?: DropzoneOptions['onDrop'];\n  /** Callback fired when selected files are accepted */\n  onFilesAccepted?: DropzoneOptions['onDropAccepted'];\n  /** Callback fired when selected files are rejected */\n  onFilesRejected?: DropzoneOptions['onDropRejected'];\n};\n\nfunction FileSelectorButton({\n  label = 'Upload',\n  isDisabled = false,\n  isExpanded = false,\n  multiple = false,\n  accept,\n  minFileSize,\n  maxFileSize,\n  maxFiles,\n  onFilesDrop,\n  onFilesAccepted,\n  onFilesRejected,\n  onFileDialogCancel,\n  onFileDialogOpen,\n  onDragEnter,\n  onDragOver,\n  onDragLeave,\n  validator,\n  className,\n  ...props\n}: FileSelectorButtonProps & ComponentPropsWithoutRef<'button'>) {\n  const { getRootProps, getInputProps } = useDropzone({\n    disabled: isDisabled,\n    noDrag: true,\n    multiple,\n    accept,\n    minSize: minFileSize,\n    maxSize: maxFileSize,\n    maxFiles,\n    onDrop: onFilesDrop,\n    onDropAccepted: onFilesAccepted,\n    onDropRejected: onFilesRejected,\n    onFileDialogCancel,\n    onFileDialogOpen,\n    onDragEnter,\n    onDragOver,\n    onDragLeave,\n    validator,\n  });\n\n  return (\n    <div className={cls(CLX_COMPONENT, className)}>\n      <input aria-label=\"upload file\" aria-hidden {...getInputProps()} />\n      <Button\n        {...getRootProps({\n          ...props,\n          iconStart: { name: 'upload' },\n          isDisabled,\n          variant: 'subtle',\n          isExpanded,\n        })}\n      >\n        {label}\n      </Button>\n    </div>\n  );\n}\n\nFileSelectorButton.displayName = 'FileSelectorButton';\n\nexport default FileSelectorButton;\n"],"names":["props","onFileDialogCancel","onFileDialogOpen","onDragEnter","onDragOver","onDragLeave","validator","accept","minFileSize","maxFileSize","maxFiles","onFilesDrop","onFilesRejected","isDisabled","isExpanded","className","FileSelectorButton"],"mappings":"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"}