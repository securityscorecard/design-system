{"version":3,"file":"ListView-CpwIwdJR.js","sources":["../../src/components/ListView/ListViewRow.tsx","../../src/components/ListView/ListView.tsx"],"sourcesContent":["import { Fragment } from 'react';\nimport { Row, flexRender } from '@tanstack/react-table';\nimport styled from 'styled-components';\n\nimport { Skeleton } from '../Skeleton';\nimport { ListViewInstance } from './ListView.types';\nimport RowActionsButton from '../_internal/buttons/RowActionsButton';\n\nconst ListViewRowRoot = styled.li`\n  display: flex;\n  position: relative;\n\n  [data-paginated='true'] &,\n  [data-paginated='false'] &:not(:last-child) {\n    border-bottom: 1px solid var(--sscds-color-border-default);\n  }\n`;\nconst ListViewRowContent = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1;\n  padding-block: var(--sscds-space-2x);\n  padding-inline-start: calc(\n    var(--sscds-space-4x) + var(--sscds-listView-size-select)\n  );\n  padding-inline-end: calc(\n    var(--sscds-space-4x) + var(--sscds-listView-size-rowActions)\n  );\n  min-height: var(--sscds-listView-height-min);\n\n  button& {\n    cursor: pointer;\n    transition: var(--sscds-action-transition);\n\n    :hover {\n      background-color: var(--sscds-color-background-selectable-hover);\n    }\n\n    &[data-active='true'] {\n      background-color: var(--sscds-color-background-selectable-active);\n    }\n  }\n`;\nconst ListViewRowSelectionLabel = styled.label`\n  position: absolute;\n  inset-inline-start: 0;\n  inset-block: 0;\n  display: grid;\n  place-items: center;\n  width: var(--sscds-listView-size-select);\n\n  input {\n    width: 1.25rem;\n    height: 1.25rem;\n    accent-color: var(--sscds-color-primary-9);\n  }\n`;\nconst ListViewRowActionsRoot = styled.div`\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block: 0;\n  display: grid;\n  place-items: center;\n  width: var(--sscds-listView-size-rowActions);\n`;\n\nfunction ListViewRow<D>({\n  row,\n  listView,\n}: {\n  listView: ListViewInstance<D>;\n  row: Row<D>;\n}) {\n  const { options, getState, setActiveRowId } = listView;\n  const { activeRowId, isLoading } = getState();\n  const areItemsClickable = typeof options?.onRowClick !== 'undefined';\n\n  return (\n    <ListViewRowRoot>\n      {row.getAllCells().map((cell) => {\n        return (\n          <Fragment key={cell.id}>\n            <ListViewRowContent\n              {...(areItemsClickable\n                ? {\n                    as: 'button',\n                    type: 'button',\n                    onClick: () => {\n                      setActiveRowId(row.id);\n                      options.onRowClick({ row: row.original });\n                    },\n                    'data-active': activeRowId === row.id,\n                  }\n                : {})}\n            >\n              {isLoading ? (\n                <Skeleton width=\"100%\" />\n              ) : (\n                flexRender(cell.column.columnDef.cell, cell.getContext())\n              )}\n            </ListViewRowContent>\n            {options.enableRowSelection && (\n              <ListViewRowSelectionLabel>\n                {isLoading ? (\n                  <Skeleton width=\"1.25rem\" />\n                ) : (\n                  <>\n                    <span className=\"sr-only\">Select current row</span>\n                    <input\n                      checked={row.getIsSelected()}\n                      disabled={!row.getCanSelect()}\n                      type={\n                        options.enableMultiRowSelection ? 'checkbox' : 'radio'\n                      }\n                      onChange={row.getToggleSelectedHandler()}\n                    />\n                  </>\n                )}\n              </ListViewRowSelectionLabel>\n            )}\n            {options.rowActionsCount > 0 && (\n              <ListViewRowActionsRoot>\n                {isLoading ? (\n                  <Skeleton width=\"2rem\" />\n                ) : (\n                  <RowActionsButton instance={listView} row={row} />\n                )}\n              </ListViewRowActionsRoot>\n            )}\n          </Fragment>\n        );\n      })}\n    </ListViewRowRoot>\n  );\n}\n\nListViewRow.displayName = 'ListViewRow';\n\nexport default ListViewRow;\n","import {\n  type ColumnDef,\n  getCoreRowModel,\n  getPaginationRowModel,\n  useReactTable,\n} from '@tanstack/react-table';\nimport { ComponentPropsWithoutRef, useMemo, useState } from 'react';\n\nimport { useLogger } from '../../hooks/useLogger';\nimport ListViewRow from './ListViewRow';\nimport {\n  ListViewInstance,\n  ListViewOptions,\n  ParsedListViewOptions,\n} from './ListView.types';\nimport SelectionToolbar from '../_internal/toolbars/SelectionToolbar';\nimport PaginationToolbar from '../_internal/toolbars/PaginationToolbar';\n\nfunction ListView<D>({\n  data,\n  renderListViewRow,\n  state,\n  initialState,\n  enableRowSelection = false,\n  enableMultiRowSelection = true,\n  enablePagination = true,\n  enableRowsPerPage = false,\n  rowsPerPageOptions = [10, 25, 50, 100],\n  manualPagination,\n  rowActions = [],\n  rowCount,\n  renderRowSelectionActions,\n  onRowClick,\n  onActiveRowIdChange,\n  onPaginationChange,\n  onRowSelectionChange,\n  getRowId,\n  ...props\n}: ListViewOptions<D> & ComponentPropsWithoutRef<'ul'>) {\n  const rowActionsCount = rowActions.filter(Boolean).length;\n\n  const styles = useMemo(\n    () => ({\n      ...props.style,\n      '--sscds-listView-size-action': '3rem',\n      '--sscds-listView-size-action-double': '5rem',\n      '--sscds-listView-size-select': enableRowSelection\n        ? 'var(--sscds-listView-size-action)'\n        : '0rem',\n      '--sscds-listView-size-rowActions':\n        rowActionsCount > 0 ? 'var(--sscds-listView-size-action)' : '0rem',\n      '--sscds-listView-height-min':\n        enableRowSelection || rowActionsCount > 0\n          ? 'var(--sscds-listView-size-action)'\n          : 'auto',\n    }),\n    [enableRowSelection, props.style, rowActionsCount],\n  );\n  const columns = useMemo<ColumnDef<D>[]>(\n    () => [\n      {\n        id: 'listView-content',\n        cell: ({ row }) => renderListViewRow({ row: row.original }),\n      },\n    ],\n    [renderListViewRow],\n  );\n  const listData: D[] = useMemo(\n    () =>\n      state?.isLoading && !data.length\n        ? [\n            ...Array(\n              state?.pagination?.pageSize ||\n                initialState?.pagination?.pageSize ||\n                10,\n            ).fill(null),\n          ].map(() => ({} as D))\n        : data,\n    [\n      initialState?.pagination?.pageSize,\n      data,\n      state?.isLoading,\n      state?.pagination?.pageSize,\n    ],\n  );\n  const [activeRowId, setActiveRowId] = useState<string>(\n    initialState?.activeRowId ?? undefined,\n  );\n  const listView = useReactTable({\n    debugAll: true,\n    columns,\n    data: listData,\n    enableMultiRowSelection,\n    enableRowSelection,\n    enableRowsPerPage,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: enablePagination\n      ? getPaginationRowModel()\n      : undefined,\n    getRowId,\n    initialState,\n    manualPagination,\n    onRowClick,\n    renderRowSelectionActions,\n    rowActions,\n    rowActionsCount,\n    rowCount,\n    rowsPerPageOptions,\n    state: {\n      activeRowId,\n      ...state,\n    },\n    ...(typeof onPaginationChange !== 'undefined'\n      ? { onPaginationChange }\n      : {}),\n    ...(typeof onRowSelectionChange !== 'undefined'\n      ? { onRowSelectionChange }\n      : {}),\n  } as ParsedListViewOptions<D>) as unknown as ListViewInstance<D>;\n  listView.setActiveRowId = onActiveRowIdChange ?? setActiveRowId;\n\n  const logger = useLogger('ListView');\n  logger.log('ListView Instance', listView);\n  logger.log('ListView State', listView.getState());\n\n  return (\n    <div>\n      {/**\n       * Webkit removes implicit \"list\" semantics when \"list-style-type: none\" is set.\n       * Explicitly setting the \"list\" role ensures assistive technology in webkit\n       * browsers correctly announce the semantics.\n       *\n       * Ref https://bugs.webkit.org/show_bug.cgi?id=170179#c1 */}\n      {/* eslint-disable-next-line jsx-a11y/no-redundant-roles */}\n      <ul\n        {...props}\n        data-paginated={enablePagination}\n        role=\"list\"\n        style={styles}\n      >\n        {listView.getRowModel().rows.map((row) => {\n          return <ListViewRow key={row.id} listView={listView} row={row} />;\n        })}\n      </ul>\n      {enableRowSelection && <SelectionToolbar<D> instance={listView} />}\n      {enablePagination && <PaginationToolbar<D> instance={listView} />}\n    </div>\n  );\n}\n\nListView.displayName = 'ListView';\n\nexport default ListView;\n"],"names":["cov_hc0ox1267","path","hash","global","gcv","coverageData","coverage","actualCoverage","ListViewRowRoot","s","styled","li","withConfig","displayName","componentId","ListViewRowContent","div","setActiveRowId","options","label","ListViewRow","cov_1ynh0kodg0","manualPagination","rowCount","renderRowSelectionActions","onRowClick","onActiveRowIdChange","onPaginationChange","onRowSelectionChange","getRowId","enableRowsPerPage","b","props","rowsPerPageOptions","styles","useMemo","style","columns","f","rowActions","filter","Boolean","length","row","isLoading","listData","enableMultiRowSelection","enableRowSelection","getPaginationRowModel","initialState","rowActionsCount","state","renderListViewRow","activeRowId","Array","fill","logger","log","pagination","getState","data","pageSize","useState","ListView","useReactTable"],"mappings":"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EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,IAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,WAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,ccAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,E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"}