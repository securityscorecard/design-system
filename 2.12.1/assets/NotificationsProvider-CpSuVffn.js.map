{"version":3,"file":"NotificationsProvider-CpSuVffn.js","sources":["../../src/managers/common/events.ts","../../src/managers/NotificationsManager/types.ts","../../src/managers/NotificationsManager/api.ts","../../src/managers/common/useManagerEvents.ts","../../src/managers/NotificationsManager/reducer.ts","../../src/managers/NotificationsManager/NotificationsProvider.tsx"],"sourcesContent":["import type { ValueOf } from './types';\n\nexport const createCustomEvent = <\n  T extends Record<string, string>,\n  D = unknown,\n>(\n  type: ValueOf<T>,\n  detail: D,\n) => new CustomEvent(type, { detail });\n","import type { ReactNode } from 'react';\n\nimport { Variants } from '../../components/_internal/BaseToastBanner/BaseToastBanner.types';\n\n// eslint-disable-next-line\nexport enum ACTIONS {\n  ADD_NOTIFICATION = 'ADD_NOTIFICATION',\n  UPDATE_NOTIFICATION = 'UPDATE_NOTIFICATION',\n  REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION',\n}\n\nexport type NotificationActions = (typeof ACTIONS)[keyof typeof ACTIONS];\n\nexport interface Notification {\n  id: string;\n  variant?: Variants;\n  content: ReactNode;\n  autoDismiss?: boolean;\n}\n","import { createCustomEvent } from '../common/events';\nimport { ACTIONS, Notification } from './types';\n\nexport const removeNotification = (id: string) => {\n  window.dispatchEvent(\n    createCustomEvent<typeof ACTIONS, { id: string }>(\n      ACTIONS.REMOVE_NOTIFICATION,\n      {\n        id,\n      },\n    ),\n  );\n};\n\nconst setupAutodismiss = (notification: Notification) => {\n  if (notification.autoDismiss || notification.autoDismiss === undefined) {\n    setTimeout(() => removeNotification(notification.id), 6000);\n  }\n};\n\nexport const addNotification = (notification: Notification) => {\n  window.dispatchEvent(\n    createCustomEvent<typeof ACTIONS, { notification: Notification }>(\n      ACTIONS.ADD_NOTIFICATION,\n      {\n        notification,\n      },\n    ),\n  );\n  setupAutodismiss(notification);\n};\n\nexport const updateNotification = (notification: Notification) => {\n  window.dispatchEvent(\n    createCustomEvent<typeof ACTIONS, { notification: Notification }>(\n      ACTIONS.UPDATE_NOTIFICATION,\n      {\n        notification,\n      },\n    ),\n  );\n  setupAutodismiss(notification);\n};\n","import { useEffect } from 'react';\n\nimport type { ValueOf } from './types';\n\nexport const useManagerEvents = <A extends Record<string, string>>(listeners: {\n  [key in ValueOf<A>]: (e: CustomEvent) => void;\n}) => {\n  useEffect(() => {\n    let isMounted = true;\n    Object.keys(listeners).forEach((eventName) => {\n      window.addEventListener(eventName, (e: CustomEvent) => {\n        if (isMounted) {\n          listeners[eventName as ValueOf<A>](e);\n        }\n      });\n    });\n\n    return () => {\n      isMounted = false;\n      Object.keys(listeners).forEach((eventName) => {\n        window.removeEventListener(eventName, (e: CustomEvent) => {\n          listeners[eventName as ValueOf<A>](e);\n        });\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n};\n","import { ACTIONS, Notification } from './types';\n\ntype NotificationAction =\n  | {\n      type: ACTIONS.ADD_NOTIFICATION;\n      notification: Notification;\n    }\n  | { type: ACTIONS.REMOVE_NOTIFICATION; id: string }\n  | { type: ACTIONS.UPDATE_NOTIFICATION; notification: Notification };\n\nexport const NotificationsProviderReducer = (\n  // eslint-disable-next-line\n  state: Notification[] = [],\n  action: NotificationAction,\n) => {\n  switch (action.type) {\n    case ACTIONS.ADD_NOTIFICATION: {\n      return [...state, action.notification];\n    }\n    case ACTIONS.UPDATE_NOTIFICATION: {\n      return state.map((item) =>\n        item.id === action.notification.id ? action.notification : item,\n      );\n    }\n    case ACTIONS.REMOVE_NOTIFICATION: {\n      return state.filter((item) => item.id !== action.id);\n    }\n    default:\n      return state;\n  }\n};\n","import { type ReactNode, useReducer } from 'react';\n\nimport { Stack, Toast } from '../../components';\nimport { ToastArea } from '../../components/Toast/Toast';\nimport { useManagerEvents } from '../common/useManagerEvents';\nimport { ACTIONS, Notification } from './types';\nimport { NotificationsProviderReducer } from './reducer';\n\nexport const NotificationsProvider = ({\n  children,\n}: {\n  children?: ReactNode;\n}) => {\n  const [state, dispatch] = useReducer(NotificationsProviderReducer, []);\n\n  const addNotification = (notification: Notification) => {\n    dispatch({\n      type: ACTIONS.ADD_NOTIFICATION,\n      notification,\n    });\n  };\n\n  const updateNotification = (notification: Notification) => {\n    dispatch({\n      type: ACTIONS.UPDATE_NOTIFICATION,\n      notification,\n    });\n  };\n\n  const removeNotification = (id: string) => {\n    dispatch({\n      type: ACTIONS.REMOVE_NOTIFICATION,\n      id,\n    });\n  };\n\n  const listeners = {\n    [ACTIONS.ADD_NOTIFICATION]: (\n      e: CustomEvent<{ notification: Notification }>,\n    ) => addNotification(e.detail.notification),\n    [ACTIONS.UPDATE_NOTIFICATION]: (\n      e: CustomEvent<{ notification: Notification }>,\n    ) => updateNotification(e.detail.notification),\n    [ACTIONS.REMOVE_NOTIFICATION]: (e: CustomEvent<{ id: string }>) =>\n      removeNotification(e.detail.id),\n  };\n\n  useManagerEvents<typeof ACTIONS>(listeners);\n\n  return (\n    <>\n      {children}\n      {state.length > 0 && (\n        <ToastArea>\n          <Stack gap=\"md\">\n            {state.map((notification) => (\n              <Toast\n                key={notification.id}\n                isStandalone={false}\n                variant={notification.variant}\n                onClose={() => removeNotification(notification.id)}\n              >\n                {notification.content}\n              </Toast>\n            ))}\n          </Stack>\n        </ToastArea>\n      )}\n    </>\n  );\n};\n\nNotificationsProvider.displayName = 'NotificationsProvider';\n"],"names":["createCustomEvent","ACTIONS","cov_26v2ghaki4","s","dispatchEvent","f","id","REMOVE_NOTIFICATION","setupAutodismiss","autoDismiss","setTimeout","notification","b","removeNotification","window","ADD_NOTIFICATION","cov_2fpqg6n3h0","Object","listeners","eventName","isMounted","keys","forEach","addEventListener","e","removeEventListener","cov_2ajs511y3i","state","action","type","cov_9i3aih06i","path","hash","global","gcv","coverageData","coverage","actualCoverage","children","dispatch","addNotification","updateNotification","UPDATE_NOTIFICATION","useManagerEvents","length","detail","NotificationsProvider"],"mappings":"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AAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,EAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,KAAA,gBAAA,KAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,GAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,EAAA,KAAA,cAAA,UAAA,CAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,CAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAA,KAAA,GAAA,OAAA,EAAA,EAAA,IAAA,CAAA,KAAA,GAAA,OAAA,GAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,eAAA,CAAA,QAAA,EAAA,KAAA,KAAA,QAAA,CAAA,yGAAA,EAAA,MAAA,CAAA,aAAA,QAAA,QAAA,YAAA,mBAAA,UAAA,+BAAA,wBAAA,WAAA,QAAA,WAAA,kBAAA,eAAA,OAAA,mBAAA,qBAAA,sBAAA,qBAAA,KAAA,sBAAA,YAAA,IAAA,SAAA,SAAA,MAAA,UAAA,UAAA,aAAA,EAAA,SAAA,kkCAAA,EAAA,gBAAA,2CAAA,KAAA,0CAAA,EAAAC,EAAAH,EAAAC,CAAA,IAAAD,EAAAC,CAAA,EAAA,CAAA,IAAA,CAAAE,EAAAL,CAAA,GAAAK,EAAAL,CAAA,EAAA,OAAAC,KAAAI,EAAAL,CAAA,EAAAI,GAAA,IAAAE,EAAAD,EAAAL,CAAA,EAAAD,OAAAA,YAAA,CAAA,OAAAO,CAAAA,EAAAA,EAAAP,EAAA,EAjBgCA,EAAA,EAAA3B,OAG3CmC,MAAAA,EAAAA,CAAAA,CAGIA,SAAAA,CAIFC,IAAS,CAAAT,EAAA,EAAAzB,EAAA,CAAA,IAAA,QACOU,CAAAA,GAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,WAAAA,EAAAA,EAAAA,GAAAA,IAAAA,OACdJ,MACD6B,EAAA7B,GAAA,CAAAmB,EAAA,EAAAzB,EAAA,CAAA,IAAAyB,EAAA,EAAA3B,EACHoC,CAAAA,IAAAA,EAAA,CAEME,KAAAA,EAAAA,iBACK9B,aAAAA,CAAA,CAAA,CAEPA,EAAAA,EAAAA,EAAAA,OAEJ,MAAA8B,EAAA9B,GAAA,CAAAmB,EAAA,EAAAzB,EAAA,CAAA,IAAAyB,EAAA3B,EAAAA,OAEMU,EAAAA,CACKgB,KAAA5B,EAAAyC,oBACPb,aAAAA,CACAvB,CAAAA,CAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,IAIJ,MAAMY,EAAYZ,GAAA,CAAAwB,EAAA,EAAAzB,EAAAyB,CAAAA,IAAAA,IAAA3B,EAAA,CAAA,IAChBoC,EAASxB,QAGmBR,wBAK9B,CAAA,CAEAoC,EAIKL,GAAAA,IAAAA,EAAAA,CAAAA,IAAAA,CACAX,CAAMiB,EAAAA,gBACL,EAeJpB,IAEJM,IAAAzB,EAAAyB,CAAAA,IAAAA,IAAA3B,EAAA,CAAA,IAAAqC,EAAAhB,EAAAqB,OAAAlC,YAAA,GAEAmC,CAAAA,EAAAA,mBAAoC"}